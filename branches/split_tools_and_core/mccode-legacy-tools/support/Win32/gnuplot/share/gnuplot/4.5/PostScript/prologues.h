/* This script-generated file contains the PostScript prologues
 * in a form suitable to inclusion in a C source code */

static const char *prologue_8859_1_ps[] = {
"%\n",
"% Encoding for ISO-8859-1 (also called Latin1)\n",
"%\n",
"/reencodeISO {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding ISOLatin1Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/ISOLatin1Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve\n",
"/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut\n",
"/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar\n",
"/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot\n",
"/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior\n",
"/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine\n",
"/guillemotright/onequarter/onehalf/threequarters/questiondown\n",
"/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla\n",
"/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex\n",
"/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis\n",
"/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute\n",
"/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis\n",
"/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave\n",
"/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex\n",
"/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis\n",
"/yacute/thorn/ydieresis\n",
"] def\n",
NULL
};

static const char *prologue_8859_15_ps[] = {
"%\n",
"% Encoding for ISO-8859-15 (also called Latin9)\n",
"%\n",
"/reencodeISO15 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding ISOLatin15Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/ISOLatin15Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve\n",
"/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut\n",
"/ogonek/caron/space/exclamdown/cent/sterling/Euro/yen/Scaron\n",
"/section/scaron/copyright/ordfeminine/guillemotleft/logicalnot\n",
"/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior\n",
"/Zcaron/mu/paragraph/periodcentered/zcaron/onesuperior/ordmasculine\n",
"/guillemotright/OE/oe/Ydieresis/questiondown\n",
"/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla\n",
"/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex\n",
"/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis\n",
"/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute\n",
"/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis\n",
"/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave\n",
"/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex\n",
"/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis\n",
"/yacute/thorn/ydieresis\n",
"] def\n",
NULL
};

static const char *prologue_8859_2_ps[] = {
"%\n",
"% Encoding for ISO-8859-2 (also called Latin2), with\n",
"% minor differences to \"true\" ISO-8859-2 (*commaaccent \n",
"% instead of *cedilla for sStT -> incorrect in ISO-8859-2,\n",
"% the standard will probably be modified in this respect)\n",
"%      Levente Novak <novak@jaguar.dote.hu>\n",
"\n",
"/reencodeISO2 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding ISOLatin2Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/ISOLatin2Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M\n",
"/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/nbspace/Aogonek/breve/Lslash/currency/Lcaron/Sacute/section\n",
"/dieresis/Scaron/Scommaaccent/Tcaron/Zacute/hyphen/Zcaron/Zdotaccent\n",
"/degree/aogonek/ogonek/lslash/acute/lcaron/sacute/caron/cedilla\n",
"/scaron/scommaaccent/tcaron/zacute/hungarumlaut/zcaron/zdotaccent\n",
"/Racute/Aacute/Acircumflex/Abreve/Adieresis/Lacute/Cacute/Ccedilla\n",
"/Ccaron/Eacute/Eogonek/Edieresis/Ecaron/Iacute/Icircumflex/Dcaron\n",
"/Dcroat/Nacute/Ncaron/Oacute/Ocircumflex/Ohungarumlaut/Odieresis\n",
"/multiply/Rcaron/Uring/Uacute/Uhungarumlaut/Udieresis/Yacute\n",
"/Tcommaaccent/germandbls/racute/aacute/acircumflex/abreve/adieresis\n",
"/lacute/cacute/ccedilla/ccaron/eacute/eogonek/edieresis/ecaron\n",
"/iacute/icircumflex/dcaron/dcroat/nacute/ncaron/oacute/ocircumflex\n",
"/ohungarumlaut/odieresis/divide/rcaron/uring/uacute/uhungarumlaut\n",
"/udieresis/yacute/tcommaaccent/dotaccent\n",
"] def\n",
NULL
};

static const char *prologue_8859_9_ps[] = {
"%\n",
"% Encoding for ISO_8859_9 (also called Latin5)\n",
"% Plus code points 80-9F used in Codepage 1254\n",
"%\n",
"/reencodeISO9 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding ISOLatin5Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/ISOLatin5Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde\n",
"/Euro/.notdef/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl\n",
"/circumflex/perthousand/Scaron/guilsinglleft/OE/.notdef/.notdef/.notdef\n",
"/.notdef/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash\n",
"/tilde/trademark/scaron/guilsinglright/oe/.notdef/.notdef/Ydieresis\n",
"/.notdef/space/exclamdown/cent/sterling/currency/yen/brokenbar\n",
"/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot\n",
"/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior\n",
"/acute/mu/paragraph/bullet/cedilla/onesuperior/ordmasculine\n",
"/guillemotright/onequarter/onehalf/threequarters/questiondown\n",
"/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla\n",
"/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex\n",
"/Idieresis/Gbreve/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis\n",
"/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Idotaccent\n",
"/Scedilla/germandbls/agrave/aacute/acircumflex/atilde/adieresis\n",
"/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave\n",
"/iacute/icircumflex/idieresis/gbreve/ntilde/ograve/oacute/ocircumflex\n",
"/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis\n",
"/dotlessi/scedilla/ydieresis\n",
"] def\n",
NULL
};

static const char *prologue_cp1250_ps[] = {
"%\n",
"% Encoding for code page 1250 (Microsoft Windows Central and Eastern European)\n",
"%\n",
"/reencodeCP1250 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding CP1250Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/CP1250Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash/zero/one\n",
"/two/three/four/five/six/seven/eight/nine/colon/semicolon/less/equal/greater\n",
"/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z\n",
"/bracketleft/backslash/bracketright/asciicircum/underscore/quoteleft\n",
"/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar\n",
"/braceright/tilde/.notdef/.notdef/.notdef/quotesinglbase/.notdef/quotedblbase\n",
"/ellipsis/dagger/daggerdbl/.notdef/perthousand/Scaron/guilsinglleft/Sacute\n",
"/Tcaron/Zcaron/Zacute/.notdef/quoteleft/quoteright/quotedblleft\n",
"/quotedblright/bullet/endash/emdash/.notdef/trademark/scaron\n",
"/guilsinglright/sacute/tcaron/zcaron/zacute/space/caron/breve/Lslash\n",
"/currency/Aogonek/brokenbar/section/dieresis/copyright/Scedilla\n",
"/guillemotleft/logicalnot/hyphen/registered/Zdotaccent\n",
"/degree/plusminus/ogonek/lslash/acute/mu/paragraph/bullet\n",
"/cedilla/aogonek/scedilla/guillemotright/Ydieresis/hungarumlaut/Lcaron\n",
"/zdotaccent/Racute/Aacute/Acircumflex/Abreve/Adieresis/Lacute/Cacute\n",
"/Ccedilla/Ccaron/Eacute/Eogonek/Edieresis/Ecaron/Iacute/Icircumflex\n",
"/Dcaron/Eth/Nacute/Ncaron/Oacute/Ocircumflex/Ohungarumlaut/Odieresis\n",
"/multiply/Rcaron/Uring/Uacute/Uhungarumlaut/Udieresis/Yacute/Tcedilla\n",
"/germandbls/racute/aacute/acircumflex/abreve/adieresis/lacute/cacute\n",
"/ccedilla/ccaron/eacute/eogonek/edieresis/ecaron/iacute/icircumflex\n",
"/dcaron/dbar/nacute/ncaron/oacute/ocircumflex/ohungarumlaut/odieresis\n",
"/divide/rcaron/uring/uacute/uhungarumlaut/udieresis/yacute/tcedilla/dotaccent\n",
"] def\n",
NULL
};

static const char *prologue_cp437_ps[] = {
"%\n",
"% encoding for code page 437 (original MSDOS)\n",
"% version 1.0:\t- Mainly letters are mapped. The following positions\n",
"% (JFi)\t\t  are left blank (undefined):\n",
"%\t\t-- first 32 positions,\n",
"%\t\t-- frame characters,\n",
"%\t\t-- greek characters,\n",
"%\t\t-- some more special characters.\n",
"%\n",
"% version 1.1:  - added some more special characters\n",
"\n",
"/reencodeCP437 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding CP437Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/CP437Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/.notdef\n",
"/Ccedilla/udieresis/eacute/acircumflex/adieresis/agrave/aring/ccedilla\n",
"/ecircumflex/edieresis/egrave/idieresis/icircumflex/igrave/Adieresis/Aring\n",
"/Eacute/ae/AE/ocircumflex/odieresis/ograve/ucircumflex/ugrave\n",
"/ydieresis/Odieresis/Udieresis/cent/sterling/yen/.notdef/florin\n",
"/aacute/iacute/oacute/uacute/ntilde/Ntilde/ordfeminine/ordmasculine\n",
"/questiondown/.notdef/logicalnot/onehalf/onequarter/exclamdown/guillemotleft/guillemotright\n",
"/space/space/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/germandbls/.notdef/.notdef/.notdef/.notdef/mu/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/infinity/.notdef/.notdef/.notdef\n",
"/.notdef/plusminus/greaterequal/lessequal/.notdef/.notdef/divide/.notdef\n",
"/degree/bullet/periodcentered/.notdef/nsuperior/twosuperior/.notdef/.notdef\n",
"] def\n",
NULL
};

static const char *prologue_cp850_ps[] = {
"%\n",
"% encoding for code page 850 (obsolete MSDOS Western Europe)\n",
"% version 1.0:  - Mainly letters are mapped. The following positions\n",
"% (JFi)\t\t  are left blank (undefined):\n",
"%\t\t-- first 32 positions,\n",
"%\t\t-- frame characters,\n",
"%\t\t-- a few special characters.\n",
"\n",
"/reencodeCP850 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding CP850Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/CP850Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/.notdef\n",
"/Ccedilla/udieresis/eacute/acircumflex/adieresis/agrave/aring/ccedilla\n",
"/ecircumflex/edieresis/egrave/idieresis/icircumflex/igrave/Adieresis/Aring\n",
"/Eacute/ae/AE/ocircumflex/odieresis/ograve/ucircumflex/ugrave\n",
"/ydieresis/Odieresis/Udieresis/oslash/sterling/Oslash/multiply/florin\n",
"/aacute/iacute/oacute/uacute/ntilde/Ntilde/ordfeminine/ordmasculine\n",
"/questiondown/registered/logicalnot/onehalf/onequarter/exclamdown/guillemotleft/guillemotright\n",
"/space/space/.notdef/.notdef/.notdef/Aacute/Acircumflex/Agrave\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/cent/yen/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/atilde/Atilde\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/currency\n",
"/eth/Eth/Ecircumflex/Edieresis/Egrave/dotlessi/Iacute/Icircumflex\n",
"/Idieresis/.notdef/.notdef/.notdef/.notdef/brokenbar/Igrave/.notdef\n",
"/Oacute/germandbls/Ocircumflex/Ograve/otilde/Otilde/mu/thorn\n",
"/Thorn/Uacute/Ucircumflex/Ugrave/yacute/Yacute/macron/acute\n",
"/hyphen/plusminus/equal/threequarters/paragraph/section/divide/.notdef\n",
"/degree/.notdef/periodcentered/onesuperior/threesuperior/twosuperior/.notdef/.notdef\n",
"] def\n",
NULL
};

static const char *prologue_cp852_ps[] = {
"%\n",
"% encoding for code page 852 (MSDOS Central European)\n",
"/reencodeCP852 {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding CP852Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/CP852Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/paragraph/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle\n",
"/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine\n",
"/colon/semicolon/less/equal/greater/question\n",
"/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z\n",
"/bracketleft/backslash/bracketright/asciicircum/underscore\n",
"/grave/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w\n",
"/x/y/z/braceleft/bar/braceright/asciitilde/.notdef\n",
"/Ccedilla/udieresis/eacute/acircumflex/adieresis/uring/cacute/ccedilla\n",
"/lslash/edieresis/Ohungarumlaut/ohungarumlaut/icircumflex/Zacute/Adieresis\n",
"/Cacute/Eacute/Lacute/lacute/ocircumflex/odieresis/Lcaron/lcaron/Sacute\n",
"/sacute/Odieresis/Udieresis/Tcaron/tcaron/Lslash/multiply/ccaron\n",
"/aacute/iacute/oacute/uacute/Aogonek/aogonek/Zcaron/zcaron\n",
"/Eogonek/eogonek/.notdef/zacute/Ccaron/scedilla/guillemotleft/guillemotright\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/Aacute/Acircumflex/Ecaron\n",
"/Scedilla/.notdef/.notdef/.notdef/.notdef/Zdotaccent/zdotaccent/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/Abreve/abreve\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/currency\n",
"/eth/Eth/Dcaron/Edieresis/dcaron/Ncaron/Iacute/Icircumflex\n",
"/ecaron/.notdef/.notdef/.notdef/.notdef/Tcedilla/Uring/.notdef\n",
"/Oacute/germandbls/Ocircumflex/Nacute/nacute/ncaron/Scaron/scaron\n",
"/Racute/Uacute/racute/Uhungarumlaut/yacute/Yacute/tcedilla/acute\n",
"/hyphen/hungarumlaut/ogonek/caron/breve/section/divide/cedilla\n",
"/degree/dieresis/dotaccent/uhungarumlaut/Rcaron/rcaron/.notdef/.notdef\n",
"] def\n",
NULL
};

static const char *prologue_koi8r_ps[] = {
"%\n",
"% encoding for code page koi8r (8-bit Russian)\n",
"% version 1.0:\t- Mainly letters are mapped. The following positions\n",
"% (JFi)\t\t  are left blank (undefined):\n",
"%\t\t-- first 32 positions,\n",
"%\t\t-- frame characters,\n",
"%\t\t-- a few special characters.\n",
"\n",
"/reencodeKOI8R {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding KOI8REncoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/KOI8REncoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/.notdef\n",
"/SF100000/SF110000/SF010000/SF030000/SF020000/SF040000/SF080000/SF090000\n",
"/SF060000/SF070000/SF050000/SF600000/SF570000/SF610000/SF580000/SF590000\n",
"/SF140000/SF150000/SF160000/SS260000/filledbox/bullet/radical/approxequal\n",
"/lessequal/greaterequal/space/SS270000/degree/twosuperior/periodcentered/divide\n",
"/SF430000/SF240000/SF510000/afii10071/SF520000/SF390000/SF220000/SF210000\n",
"/SF250000/SF500000/SF490000/SF380000/SF280000/SF270000/SF260000/SF360000\n",
"/SF370000/SF420000/SF190000/afii10023/SF200000/SF230000/SF470000/SF480000\n",
"/SF410000/SF450000/SF460000/SF400000/SF540000/SF530000/SF440000/copyright\n",
"/afii10096/afii10065/afii10066/afii10088/afii10069/afii10070/afii10086/afii10068\n",
"/afii10087/afii10074/afii10075/afii10076/afii10077/afii10078/afii10079/afii10080\n",
"/afii10081/afii10097/afii10082/afii10083/afii10084/afii10085/afii10072/afii10067\n",
"/afii10094/afii10093/afii10073/afii10090/afii10095/afii10091/afii10089/afii10092\n",
"/afii10048/afii10017/afii10018/afii10040/afii10021/afii10022/afii10038/afii10020\n",
"/afii10039/afii10026/afii10027/afii10028/afii10029/afii10030/afii10031/afii10032\n",
"/afii10033/afii10049/afii10034/afii10035/afii10036/afii10037/afii10024/afii10019\n",
"/afii10046/afii10045/afii10025/afii10042/afii10047/afii10043/afii10041/afii10044\n",
"] def\n",
NULL
};

static const char *prologue_koi8u_ps[] = {
"%\n",
"% encoding for code page koi8r (8-bit Ukrainian)\n",
"/reencodeKOI8U {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding KOI8UEncoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/KOI8UEncoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/.notdef\n",
"/SF100000/SF110000/SF010000/SF030000/SF020000/SF040000/SF080000/SF090000\n",
"/SF060000/SF070000/SF050000/SF600000/SF570000/SF610000/SF580000/SF590000\n",
"/SF140000/SF150000/SF160000/SS260000/filledbox/bullet/radical/approxequal\n",
"/lessequal/greaterequal/space/SS270000/degree/twosuperior/periodcentered/divide\n",
"/SF430000/SF240000/SF510000/afii10071/afii10101/SF390000/afii10103/afii10104\n",
"/SF250000/SF500000/SF490000/SF380000/SF280000/afii10098/SF260000/SF360000\n",
"/SF370000/SF420000/SF190000/afii10023/afii10053/SF230000/afii10055/afii10056\n",
"/SF410000/SF450000/SF460000/SF400000/SF540000/afii10050/SF440000/copyright\n",
"/afii10096/afii10065/afii10066/afii10088/afii10069/afii10070/afii10086/afii10068\n",
"/afii10087/afii10074/afii10075/afii10076/afii10077/afii10078/afii10079/afii10080\n",
"/afii10081/afii10097/afii10082/afii10083/afii10084/afii10085/afii10072/afii10067\n",
"/afii10094/afii10093/afii10073/afii10090/afii10095/afii10091/afii10089/afii10092\n",
"/afii10048/afii10017/afii10018/afii10040/afii10021/afii10022/afii10038/afii10020\n",
"/afii10039/afii10026/afii10027/afii10028/afii10029/afii10030/afii10031/afii10032\n",
"/afii10033/afii10049/afii10034/afii10035/afii10036/afii10037/afii10024/afii10019\n",
"/afii10046/afii10045/afii10025/afii10042/afii10047/afii10043/afii10041/afii10044\n",
"] def\n",
NULL
};

static const char *prologue_prologue_ps[] = {
"%\n",
"% Gnuplot Prolog Version 4.4 (January 2010)\n",
"%\n",
"%/SuppressPDFMark true def\n",
"%\n",
"/M {moveto} bind def\n",
"/L {lineto} bind def\n",
"/R {rmoveto} bind def\n",
"/V {rlineto} bind def\n",
"/N {newpath moveto} bind def\n",
"/Z {closepath} bind def\n",
"/C {setrgbcolor} bind def\n",
"/f {rlineto fill} bind def\n",
"/Gshow {show} def   % May be redefined later in the file to support UTF-8\n",
"/vpt2 vpt 2 mul def\n",
"/hpt2 hpt 2 mul def\n",
"/Lshow {currentpoint stroke M 0 vshift R \n",
"\tBlacktext {gsave 0 setgray show grestore} {show} ifelse} def\n",
"/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R\n",
"\tBlacktext {gsave 0 setgray show grestore} {show} ifelse} def\n",
"/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R \n",
"\tBlacktext {gsave 0 setgray show grestore} {show} ifelse} def\n",
"/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def\n",
"  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def\n",
"/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}\n",
" {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def\n",
"/BL {stroke userlinewidth 2 mul setlinewidth\n",
"\tRounded {1 setlinejoin 1 setlinecap} if} def\n",
"/AL {stroke userlinewidth 2 div setlinewidth\n",
"\tRounded {1 setlinejoin 1 setlinecap} if} def\n",
"/UL {dup gnulinewidth mul /userlinewidth exch def\n",
"\tdup 1 lt {pop 1} if 10 mul /udl exch def} def\n",
"/PL {stroke userlinewidth setlinewidth\n",
"\tRounded {1 setlinejoin 1 setlinecap} if} def\n",
"% Default Line colors\n",
"/LCw {1 1 1} def\n",
"/LCb {0 0 0} def\n",
"/LCa {0 0 0} def\n",
"/LC0 {1 0 0} def\n",
"/LC1 {0 1 0} def\n",
"/LC2 {0 0 1} def\n",
"/LC3 {1 0 1} def\n",
"/LC4 {0 1 1} def\n",
"/LC5 {1 1 0} def\n",
"/LC6 {0 0 0} def\n",
"/LC7 {1 0.3 0} def\n",
"/LC8 {0.5 0.5 0.5} def\n",
"% Default Line Types\n",
"/LTw {PL [] 1 setgray} def\n",
"/LTb {BL [] LCb DL} def\n",
"/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def\n",
"/LT0 {PL [] LC0 DL} def\n",
"/LT1 {PL [4 dl1 2 dl2] LC1 DL} def\n",
"/LT2 {PL [2 dl1 3 dl2] LC2 DL} def\n",
"/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def\n",
"/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def\n",
"/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def\n",
"/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def\n",
"/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def\n",
"/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def\n",
"/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def\n",
"/Dia {stroke [] 0 setdash 2 copy vpt add M\n",
"  hpt neg vpt neg V hpt vpt neg V\n",
"  hpt vpt V hpt neg vpt V closepath stroke\n",
"  Pnt} def\n",
"/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V\n",
"  currentpoint stroke M\n",
"  hpt neg vpt neg R hpt2 0 V stroke\n",
" } def\n",
"/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M\n",
"  0 vpt2 neg V hpt2 0 V 0 vpt2 V\n",
"  hpt2 neg 0 V closepath stroke\n",
"  Pnt} def\n",
"/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M\n",
"  hpt2 vpt2 neg V currentpoint stroke M\n",
"  hpt2 neg 0 R hpt2 vpt2 V stroke} def\n",
"/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M\n",
"  hpt neg vpt -1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt 1.62 mul V closepath stroke\n",
"  Pnt} def\n",
"/Star {2 copy Pls Crs} def\n",
"/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M\n",
"  0 vpt2 neg V hpt2 0 V 0 vpt2 V\n",
"  hpt2 neg 0 V closepath fill} def\n",
"/TriUF {stroke [] 0 setdash vpt 1.12 mul add M\n",
"  hpt neg vpt -1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt 1.62 mul V closepath fill} def\n",
"/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M\n",
"  hpt neg vpt 1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt -1.62 mul V closepath stroke\n",
"  Pnt} def\n",
"/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M\n",
"  hpt neg vpt 1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt -1.62 mul V closepath fill} def\n",
"/DiaF {stroke [] 0 setdash vpt add M\n",
"  hpt neg vpt neg V hpt vpt neg V\n",
"  hpt vpt V hpt neg vpt V closepath fill} def\n",
"/Pent {stroke [] 0 setdash 2 copy gsave\n",
"  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat\n",
"  closepath stroke grestore Pnt} def\n",
"/PentF {stroke [] 0 setdash gsave\n",
"  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat\n",
"  closepath fill grestore} def\n",
"/Circle {stroke [] 0 setdash 2 copy\n",
"  hpt 0 360 arc stroke Pnt} def\n",
"/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def\n",
"/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def\n",
"/C1 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 0 90 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C2 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 90 180 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C3 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 0 180 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C4 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 180 270 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C5 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 0 90 arc\n",
"\t2 copy moveto\n",
"\t2 copy vpt 180 270 arc closepath fill\n",
"\tvpt 0 360 arc} bind def\n",
"/C6 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 90 270 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C7 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 0 270 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C8 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 270 360 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C9 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 270 450 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill\n",
"\t2 copy moveto\n",
"\t2 copy vpt 90 180 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C11 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 0 180 arc closepath fill\n",
"\t2 copy moveto\n",
"\t2 copy vpt 270 360 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C12 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 180 360 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C13 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 0 90 arc closepath fill\n",
"\t2 copy moveto\n",
"\t2 copy vpt 180 360 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/C14 {BL [] 0 setdash 2 copy moveto\n",
"\t2 copy vpt 90 360 arc closepath fill\n",
"\tvpt 0 360 arc} bind def\n",
"/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill\n",
"\tvpt 0 360 arc closepath} bind def\n",
"/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto\n",
"\tneg 0 rlineto closepath} bind def\n",
"/Square {dup Rec} bind def\n",
"/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def\n",
"/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def\n",
"/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def\n",
"/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def\n",
"/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def\n",
"/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def\n",
"/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill\n",
"\texch vpt sub exch vpt sub vpt Square fill Bsquare} bind def\n",
"/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def\n",
"/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill\n",
"\t2 copy vpt Square fill Bsquare} bind def\n",
"/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def\n",
"/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def\n",
"/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill\n",
"\tBsquare} bind def\n",
"/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill\n",
"\tBsquare} bind def\n",
"/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def\n",
"/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill\n",
"\t2 copy vpt Square fill Bsquare} bind def\n",
"/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill\n",
"\t2 copy exch vpt sub exch vpt Square fill Bsquare} bind def\n",
"/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def\n",
"/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def\n",
"/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def\n",
"/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def\n",
"/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def\n",
"/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def\n",
"/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def\n",
"/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def\n",
"/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def\n",
"/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def\n",
"/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def\n",
"/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def\n",
"/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def\n",
"/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def\n",
"/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def\n",
"/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def\n",
"/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def\n",
"/DiaE {stroke [] 0 setdash vpt add M\n",
"  hpt neg vpt neg V hpt vpt neg V\n",
"  hpt vpt V hpt neg vpt V closepath stroke} def\n",
"/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M\n",
"  0 vpt2 neg V hpt2 0 V 0 vpt2 V\n",
"  hpt2 neg 0 V closepath stroke} def\n",
"/TriUE {stroke [] 0 setdash vpt 1.12 mul add M\n",
"  hpt neg vpt -1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt 1.62 mul V closepath stroke} def\n",
"/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M\n",
"  hpt neg vpt 1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt -1.62 mul V closepath stroke} def\n",
"/PentE {stroke [] 0 setdash gsave\n",
"  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat\n",
"  closepath stroke grestore} def\n",
"/CircE {stroke [] 0 setdash \n",
"  hpt 0 360 arc stroke} def\n",
"/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def\n",
"/DiaW {stroke [] 0 setdash vpt add M\n",
"  hpt neg vpt neg V hpt vpt neg V\n",
"  hpt vpt V hpt neg vpt V Opaque stroke} def\n",
"/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M\n",
"  0 vpt2 neg V hpt2 0 V 0 vpt2 V\n",
"  hpt2 neg 0 V Opaque stroke} def\n",
"/TriUW {stroke [] 0 setdash vpt 1.12 mul add M\n",
"  hpt neg vpt -1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt 1.62 mul V Opaque stroke} def\n",
"/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M\n",
"  hpt neg vpt 1.62 mul V\n",
"  hpt 2 mul 0 V\n",
"  hpt neg vpt -1.62 mul V Opaque stroke} def\n",
"/PentW {stroke [] 0 setdash gsave\n",
"  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat\n",
"  Opaque stroke grestore} def\n",
"/CircW {stroke [] 0 setdash \n",
"  hpt 0 360 arc Opaque stroke} def\n",
"/BoxFill {gsave Rec 1 setgray fill grestore} def\n",
"/Density {\n",
"  /Fillden exch def\n",
"  currentrgbcolor\n",
"  /ColB exch def /ColG exch def /ColR exch def\n",
"  /ColR ColR Fillden mul Fillden sub 1 add def\n",
"  /ColG ColG Fillden mul Fillden sub 1 add def\n",
"  /ColB ColB Fillden mul Fillden sub 1 add def\n",
"  ColR ColG ColB setrgbcolor} def\n",
"/BoxColFill {gsave Rec PolyFill} def\n",
"/PolyFill {gsave Density fill grestore grestore} def\n",
"/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def\n",
"%\n",
"% PostScript Level 1 Pattern Fill routine for rectangles\n",
"% Usage: x y w h s a XX PatternFill\n",
"%\tx,y = lower left corner of box to be filled\n",
"%\tw,h = width and height of box\n",
"%\t  a = angle in degrees between lines and x-axis\n",
"%\t XX = 0/1 for no/yes cross-hatch\n",
"%\n",
"/PatternFill {gsave /PFa [ 9 2 roll ] def\n",
"  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate\n",
"  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec\n",
"  gsave 1 setgray fill grestore clip\n",
"  currentlinewidth 0.5 mul setlinewidth\n",
"  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def\n",
"  0 0 M PFa 5 get rotate PFs -2 div dup translate\n",
"  0 1 PFs PFa 4 get div 1 add floor cvi\n",
"\t{PFa 4 get mul 0 M 0 PFs V} for\n",
"  0 PFa 6 get ne {\n",
"\t0 1 PFs PFa 4 get div 1 add floor cvi\n",
"\t{PFa 4 get mul 0 2 1 roll M PFs 0 V} for\n",
" } if\n",
"  stroke grestore} def\n",
"%\n",
"/languagelevel where\n",
" {pop languagelevel} {1} ifelse\n",
" 2 lt\n",
"\t{/InterpretLevel1 true def}\n",
"\t{/InterpretLevel1 Level1 def}\n",
" ifelse\n",
"%\n",
"% PostScript level 2 pattern fill definitions\n",
"%\n",
"/Level2PatternFill {\n",
"/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}\n",
"\tbind def\n",
"/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} \n",
">> matrix makepattern\n",
"/Pat1 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke\n",
"\t0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}\n",
">> matrix makepattern\n",
"/Pat2 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L\n",
"\t8 8 L 8 0 L 0 0 L fill}\n",
">> matrix makepattern\n",
"/Pat3 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L\n",
"\t0 12 M 12 0 L stroke}\n",
">> matrix makepattern\n",
"/Pat4 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L\n",
"\t0 -4 M 12 8 L stroke}\n",
">> matrix makepattern\n",
"/Pat5 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L\n",
"\t0 12 M 8 -4 L 4 12 M 10 0 L stroke}\n",
">> matrix makepattern\n",
"/Pat6 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L\n",
"\t0 -4 M 8 12 L 4 -4 M 10 8 L stroke}\n",
">> matrix makepattern\n",
"/Pat7 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L\n",
"\t12 0 M -4 8 L 12 4 M 0 10 L stroke}\n",
">> matrix makepattern\n",
"/Pat8 exch def\n",
"<< Tile8x8\n",
" /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L\n",
"\t-4 0 M 12 8 L -4 4 M 8 10 L stroke}\n",
">> matrix makepattern\n",
"/Pat9 exch def\n",
"/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def\n",
"/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def\n",
"/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def\n",
"/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def\n",
"/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def\n",
"/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def\n",
"/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def\n",
"} def\n",
"%\n",
"%\n",
"%End of PostScript Level 2 code\n",
"%\n",
"/PatternBgnd {\n",
"  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse\n",
"} def\n",
"%\n",
"% Substitute for Level 2 pattern fill codes with\n",
"% grayscale if Level 2 support is not selected.\n",
"%\n",
"/Level1PatternFill {\n",
"/Pattern1 {0.250 Density} bind def\n",
"/Pattern2 {0.500 Density} bind def\n",
"/Pattern3 {0.750 Density} bind def\n",
"/Pattern4 {0.125 Density} bind def\n",
"/Pattern5 {0.375 Density} bind def\n",
"/Pattern6 {0.625 Density} bind def\n",
"/Pattern7 {0.875 Density} bind def\n",
"} def\n",
"%\n",
"% Now test for support of Level 2 code\n",
"%\n",
"Level1 {Level1PatternFill} {Level2PatternFill} ifelse\n",
"%\n",
"/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont\n",
"dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall\n",
"currentdict end definefont pop\n",
NULL
};

static const char *prologue_utf_8_ps[] = {
"%\n",
"% Base ISO8859-1 character encoding plus support macros for UTF-8 encoding\n",
"% via the glyphshow operator\n",
"%\n",
"/reencodeISO {\n",
"dup dup findfont dup length dict begin\n",
"{ 1 index /FID ne { def }{ pop pop } ifelse } forall\n",
"currentdict /CharStrings known {\n",
"\tCharStrings /Idieresis known {\n",
"\t\t/Encoding ISOLatin1Encoding def } if\n",
"} if\n",
"currentdict end definefont\n",
"} def\n",
"/ISOLatin1Encoding [\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright\n",
"/parenleft/parenright/asterisk/plus/comma/minus/period/slash\n",
"/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon\n",
"/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N\n",
"/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright\n",
"/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m\n",
"/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef\n",
"/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve\n",
"/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut\n",
"/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar\n",
"/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot\n",
"/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior\n",
"/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine\n",
"/guillemotright/onequarter/onehalf/threequarters/questiondown\n",
"/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla\n",
"/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex\n",
"/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis\n",
"/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute\n",
"/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis\n",
"/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave\n",
"/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex\n",
"/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis\n",
"/yacute/thorn/ydieresis\n",
"] def\n",
"\n",
"/Gshow { dup type /stringtype eq { show } { glyphshow } ifelse } def\n",
"\n",
"/Gsall { {Gshow} forall } def\n",
"/Gwidth {\n",
"\tdup currentpoint pop exch\n",
"\tgsave 6 array currentmatrix nulldevice setmatrix Gsall currentpoint pop grestore sub\n",
"\t} def\n",
"/GLshow {currentpoint stroke M 0 vshift R \n",
"\tBlacktext {gsave 0 setgray Gsall grestore} {Gsall} ifelse} def\n",
"/GRshow {currentpoint stroke M dup Gwidth vshift R\n",
"\tBlacktext {gsave 0 setgray Gsall grestore} {Gsall} ifelse} def\n",
"/GCshow {currentpoint stroke M dup Gwidth 2 div vshift R \n",
"\tBlacktext {gsave 0 setgray Gsall grestore} {Gsall} ifelse} def\n",
NULL
};

