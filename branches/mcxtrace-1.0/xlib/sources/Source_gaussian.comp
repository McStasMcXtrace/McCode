/************************************************************************'
 * 
 * McXtrace X-ray tracing software
 * Copyright, All Rights Reserved
 * Risoe-DTU, Roskilde, Denmark
 *
 *
 * Component: Source_gaussian
 *
 * %I
 * Written by: Jana Baltser & Erik Knudsen
 * Date: April, 2011.
 * Version: 1.0 
 * Origin: NBI
 * Release: McXtrace 0.1
 *
 * Gaussian cross-section source 
 * %D
 * A simple source model emitting photons from a gaussian distribution in the X-Y plane with the specified
 * standard deviations (in mm). A square target centered on the beam (Z-axis)
 restricts the beam to that aperture.
 * Further, the beam is restricted to emit photons between E0+-dE keV, or lambda0+-dlambda, whichever is given.
 * Flux is given in the unit 
 * 
 * Example: Source_gaussian(sig_x=10e-6,sig_y=10e-6,dist=15,sigPr_x=9e-6, sigPr_y=9e-6,E0=sensible, dE=sensible)
 * sig_x - Horizontal source size [microns]
 * sig_y - Vertical source size [microns]
 * dist [meters]
 * sigPr_x - sigmaPrime - angular divergence Horizontal [microrad]
 * sigPr_y - sigmaPrime - angular divergence Vertical [microrad]
 * %P
 * 
 * 
 */

DEFINE COMPONENT Source_gaussian
DEFINITION PARAMETERS (string spectrum_file=NULL)
SETTING PARAMETERS (sig_x=1,sig_y=0,sigPr_x=0,sigPr_y=0,flux=1,dist=1,gauss=0,gamma=0,E0=0, dE=0, lambda0=0,dlambda=-1,phase=-1)
OUTPUT PARAMETERS ()
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{
  %include "read_table-lib"
  double Gauss2D(double sigmaX, double sigmaY, double x, double y, double A){
    double F;
    F=A*exp(-(((x*x)/(2.0*sigmaX*sigmaX))+((y*y)/(2.0*sigmaY*sigmaY))));
    return F;
  }
%}

DECLARE
%{
  struct {
    double l0,dl;
    double pmul,pint;
    t_Table T;
  } prms;
%}


INITIALIZE
%{
  if (!sig_y) sig_y=sig_x;
  
  if (!sigPr_x || !sigPr_y){
    fprintf(stderr,"Source_gaussian_J (%s): Must define horizontal and vertical angular divergences \n",NAME_CURRENT_COMP);
    exit(0);
  }

 if (spectrum_file){
    /*read spectrum from file*/
    int status=0;
    if ( (status=Table_Read(&(prms.T),spectrum_file,0))==-1){
      fprintf(stderr,"Source_gaussian(%s) Error: Could not parse file \"%s\"\n",NAME_CURRENT_COMP,spectrum_file);
      exit(-1);
    }
    /*data is now in table t*/
    /*integrate to get total flux, assuming numbers have been corrected for measuring aperture*/
    int i;
    prms.pint=0;
    t_Table *T=&(prms.T);
    for (i=0;i<prms.T.rows-1;i++){
      prms.pint+=((T->data[i*T->columns+1]+T->data[(i+1)*T->columns+1])/2.0)*(T->data[(i+1)*T->columns]-T->data[i*T->columns]); 
    }
    printf("Source_gaussian(%s) Integrated intensity radiated is %g pht/s\n",NAME_CURRENT_COMP,prms.pint);
    if(E0) printf("Source_gaussian(%s) E0!=0 -> assuming intensity spectrum is parametrized by energy [keV]\n",NAME_CURRENT_COMP);
  } else if (E0){
    lambda0=2*M_PI/E2K * (E0/(E0*E0-dE*dE));
    if (dE) {
      dlambda=2*M_PI/E2K * (dE/(E0*E0-dE*dE));
    } else {
      dlambda=0;
    }
  }else if (!lambda0) {
    fprintf(stderr,"Source_gaussian (%s): Must specify either wavelength or energy distribution\n",NAME_CURRENT_COMP);
    exit(0);
  }
  /*calculate the X-ray weight from the flux*/
  if (flux){//pmul=flux;
    prms.pmul=flux*1.0/(double)mcget_ncount(); 
  }else{
    prms.pmul=1.0/(double)mcget_ncount();
  }
%}


TRACE
%{
  double xx,yy,spX,spY,x1,y1,z1;
  double k,e,l;
  double F1,F2;
  double dx,dy,dz;
  
  // initial source area
  xx=randnorm();
  yy=randnorm();
  x=xx*sig_x;
  y=yy*sig_y;
  z=0;
 
  // Gaussian distribution at origin
  F1=Gauss2D(sig_x,sig_y,x,y,prms.pmul);

  if (spectrum_file){
    double pp=0;
    //while (pp<=0){ 
    l=prms.T.data[0]+ (prms.T.data[(prms.T.rows-1)*prms.T.columns] -prms.T.data[0])*rand01();
    pp=Table_Value(prms.T,l,2);
    //}
    p*=pp;
    /*if E0!=0 convert the tabled value to wavelength*/
    if (E0) {
      l=2*M_PI/(l*1e-3*E2K);
    }
  }else if (dlambda){
    if (gauss){
      l=lambda0+dlambda*randnorm();
    }else{
      l=randpm1()*dlambda*0.5 + lambda0;
    }
  }else{
    l=lambda0;
  }

  k=(2*M_PI/l); 

  // Beam's footprint at a dist calculation
  spX=sqrt(sig_x*sig_x+sigPr_x*sigPr_x*dist*dist);
  spY=sqrt(sig_y*sig_y+sigPr_y*sigPr_y*dist*dist);
  
  // targeted area calculation
  x1=randnorm()*spX;
  y1=randnorm()*spY;
  z1=dist;
  
  dx=x1-x;
  dy=y1-y;
  dz=sqrt(dx*dx+dy*dy+dist*dist);
  
  kx=(k*dx)/dz;
  ky=(k*dy)/dz;
  kz=(k*dist)/dz;
  
  // Guassian distribution at a distance
  F2=Gauss2D(spX,spY,x1,y1,F1);
  
    /*randomly pick phase*/
  if (phase==-1){
    phi=rand01()*2*M_PI;
  }else{
    phi=phase;
  }

  /*set polarization vector*/
  Ex=0;Ey=0;Ez=0;
  
  p*=erf(F2)*prms.pmul;  
  
%}

MCDISPLAY
%{
  double radius;
  if (sig_x<sig_y) radius=sig_x;
  else radius=sig_y; 

  magnify("xy");
  circle("xy",0,0,0,radius);
%}

END
