/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test_SSR_SSW
*
* %Identification
* Written by: <a href="mailto:esbe@dtu.dk">Esben Klinkby</a>
* and <a href="mailto:pkwi@dtu.dk">Peter Willendrup</a> 
* Date: January, 2012
* Version:  $Revision: 1.0 $
* %INSTRUMENT_SITE: Test_SSR_SSW
*
* Test instrument for SSW/SSR interface between McStas and MCNP
*
* %Description
* This instrument draws neutron events from a Source Surface file created using the
* MCNP Monte Carlo code and converts them to make them suitable for a McStas simulation.
* Assumes a file called 'rssa' is present in the run dir (or a symbolic link to a file).
* To produce 'rssa' file a MCNP simualtion must by run, using a SSW card. See 'MCNP_test_write'
* in the /examples
* After passing a slit at z=2m, events are written to the same format
*
* Note that axes orientation may be different between MCNP and McStas!
* Note also that the conversion of between McStas and MCNP units and parameters 
* is done automatically by this component - but the user must ensure that
* geometry description matches between the two Monte Carlo codes.
*
* The verbose mode is highly recommended as it displays lots of useful informations.
*
* This interface uses the MCNP Source Surface Read/Write format (SSW/SSR). 
* Infomation transfer from(to) SSW files proceeds via a set of Fortran modules 
* and subroutines collected in "subs.f"
* For succesful compilation, it is required that these subroutines are compiled 
* and linked to the instrument file:
* 
* Example: 
*
*  "mcstas SSRSSW_test.instr" gives: SSRSSW_test.c
*  "gfortran -c subs.f" gives:  subs.f
*  "gcc -o runme.out SSRSSW_test.c subs.o -lm -lgfortran" gives: runme.out
*  "./runme.out" runs the simulation example
*
* Note that this requires a fortran compiler (here gfortran) and gcc.
*
* %Parameters
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT test_SSW_SSR()

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT  (0, 0, 0) ABSOLUTE

 
  //read rssa file
COMPONENT testread = Virtual_mcnp_ss_input(
    )
  AT (0, 0, 0) RELATIVE Origin

  //Only neutrons arriving at z=2m in some x,y window are written to wssa
COMPONENT window = Slit(
    xmin = -2, xmax = 2, ymin = -2, ymax = 2)
  AT (0, 0, 2.0) RELATIVE Origin

  //write wssa file
COMPONENT testwrite = Virtual_mcnp_ss_output(
    )
  AT (0, 0.0, 0.0) ABSOLUTE



/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END




