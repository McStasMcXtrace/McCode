/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_monitor
*
* %I
* Written by: Peter Christiansen
* Date: July 2006
* Version: $Revision: 1.6 $
* Origin: Risoe
* Release: McStas 1.10
*
* Polarisation sensitive monitor.
*
* %D A square single monitor that measures the projection of the
* polarisation along a given normalized m-vector (mx, my, mz).
* The measured quantity is: sx*mx+sy*my+mz*sz
*
* Example: Pol_monitor(xwidth=0.1, yheight=0.1, nchan=11, 
*                      mx=0, my=1, mz=0, filename="polMon.data")
*
* %P
* INPUT PARAMETERS:
*
* xwidth:   Width of detector (m). 
* yheight:  Height of detector (m). 
* mx:       X-component of monitor vector (can be negative) (1)
* my:       Y-component of monitor vector (can be negative) (1)
* mz:       Z-component of monitor vector (can be negative) (1)
* npol:     Number of channels (1)
* filename: Name of file in which to store the detector output (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* Pol_N:      Array of neutron counts
* Pol_p:      Array of neutron weight counts
* Pol_p2:     Array of second moments
*
* %E
*************************************************************************/

DEFINE COMPONENT Pol_monitor
DEFINITION PARAMETERS (xwidth=0.1, yheight=0.1, npol=20, restore_neutron=0)
SETTING PARAMETERS (string filename, mx=0, my=0, mz=0)
OUTPUT PARAMETERS (Pol_N, Pol_p, Pol_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 
     
DECLARE
%{
  double Pol_N[npol];
  double Pol_p[npol];
  double Pol_p2[npol];
  %}

INITIALIZE
%{
  int i;
  
  // Check that input parameteters makes sense
  
  if (mx==0 && my==0 && mz==0) {
    fprintf(stderr, "Pol_monitor: %s: NULL vector defined!\n"
	    "ERROR      (mx, my, mz). Exiting",
	    NAME_CURRENT_COMP);
    exit(1);
  }
  
  if ((xwidth<=0) || (yheight <= 0)) {
    fprintf(stderr, "Pol_monitor: %s: Null detection area !\n"
	    "ERROR      (xwidth,yheight). Exiting",
	    NAME_CURRENT_COMP);
    exit(1);
  }
  
  // Initialize variables 
 
  NORM(mx, my, mz);
  
  for (i=0; i<npol; i++) {
    
    Pol_N[i] = 0;
    Pol_p[i] = 0;
    Pol_p2[i] = 0;
  }
  %}

TRACE
%{
  int i;
  double pol_proj;
  
  PROP_Z0;
  if (inside_rectangle(x, y, xwidth, yheight)){
    
    pol_proj = scalar_prod(mx, my, mz, sx, sy, sz);
    
    if(fabs(pol_proj)>1) {
      fprintf(stderr, "Pol_monitor: %s: Pol vector longer than 1 (%g, %g %g %g)\n",
	      NAME_CURRENT_COMP,pol_proj,sx,sy,sz);
      exit(1);
    }
    
    i = floor((pol_proj+1.0)*npol/2.0);

    
    /*To take care of the case when m.s=1*/
    if(i==npol)
      i--;
    /*To handle the case when m.s<-1 can happen due to rounding errors in trig functions*/
    if(i<0)
      i=0;

    if(i >= 0 && i < npol) {
	Pol_N[i]++;
	Pol_p[i] += p;
	Pol_p2[i] += p*p;
	SCATTER;
    }
  }    
  if (restore_neutron) {
    RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
  }
  %}

SAVE
%{
  DETECTOR_OUT_1D("Polarisation monitor",
		  "Polarisation projection",
		  "Intensity",
		  "Pol", -1.0, 1.0, npol,
		  &Pol_N[0],&Pol_p[0],&Pol_p2[0],
		  filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  rectangle("xy", 0, 0, 0, xwidth, yheight);
  %}

END
