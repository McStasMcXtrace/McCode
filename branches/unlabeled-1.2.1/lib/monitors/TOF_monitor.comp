/***********************************************************************
*
* McStas, version 1.0, released October 26, 1998
*         Maintained by Kristian Nielsen and Kim Lefmann,
*         Risoe National Laboratory, Roskilde, Denmark
*
* Component: TOF-monitor 
*
* Written by:  KN, M. Hagan, August 1998
* Modified by: KL, October 7, 1998
*
* Rectangular Time-of-flight monitor.
*
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* nchan:    Number of time bins (1)
* dt:       Length of each time bin (mu-s)
* filename: Name of file in which to store the detector image (text)
*
* OUTPUT PARAMETERS:
*
* TOF_N:    Array of neutron counts
* TOF_p:    Array of neutron weight counts
* TOF_p2:   Array of second moments
*
***********************************************************************/

DEFINE COMPONENT TOF_monitor
DEFINITION PARAMETERS (xmin, xmax, ymin, ymax, nchan, dt, filename) 
SETTING PARAMETERS ()
OUTPUT PARAMETERS (TOF_N, TOF_p, TOF_p2)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
DECLARE
  %{
    int TOF_N[nchan];
    double TOF_p[nchan];
    double TOF_p2[nchan];
  %}
INITIALIZE
  %{
    int i;

    for (i=0; i<nchan; i++)
    {
      TOF_N[i] = 0;
      TOF_p[i] = 0;
      TOF_p2[i] = 0;
    }
  %}
TRACE
  %{
    int i;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      i = floor(1E6*t/dt);              /* Bin number */
      if(i >= nchan) i = nchan;
      if(i < 0)
      {
        printf("FATAL ERROR: negative time-of-flight.\n");
        exit(1);
      }
      TOF_N[i]++;
      TOF_p[i] += p;
      TOF_p2[i] += p*p;
    }
  %}
FINALLY
  %{
    int i, Nsum;
    double psum, p2sum;
    FILE *outfile;

    Nsum = psum = p2sum = 0;
    outfile=fopen(filename,"w");
    if(!outfile)
    {
      fprintf(stderr,
              "FATAL ERROR: could not open output file '%s'\n", filename);
      exit(1);
    }
    for (i=0; i<nchan; i++)
    {
      Nsum += TOF_N[i];
      psum += TOF_p[i];
      p2sum += TOF_p2[i];
      if(TOF_p[i] != 0.0 || TOF_N[i] != 0)
        fprintf(outfile,"%g %d %g %g\n",
                (double)i*dt, TOF_N[i], TOF_p[i], TOF_p2[i]);
    }
    fclose(outfile);
    DETECTOR_OUT(Nsum, psum, p2sum);
  %}

END
