<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Authors: Marco Barisione, Emanuele Aina
 Copyright (C) 2005-2007 Marco Barisione <barisione@gmail.com>
 Copyright (C) 2005-2007 Emanuele Aina

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="mcstas" _name="McStas" version="2.0" _section="Sources">
  <metadata>
    <property name="globs">*.instr;*.comp</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="common-defines"    _name="Common Defines"        map-to="def:special-constant"/>
    <style id="included-file"     _name="Included File"         map-to="def:string"/>
    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="storage-class"     _name="Storage Class"         map-to="def:type"/>
    <style id="printf"            _name="printf Conversion"     map-to="def:special-char"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="octal"             _name="Octal number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       _name="Hexadecimal number"    map-to="def:base-n-integer"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
    <style id="standard-stream"   _name="Standard stream"       map-to="def:constant"/>
    <style id="signal-name"       _name="Signal name"           map-to="def:constant"/>
    <style id="error"             _name="Error"                 map-to="def:error"/>
    <style id="mcstas_keyword"    _name="McStas keyword"        map-to="def:type"/>
    <style id="mcstas_trace"      _name="McStas trace"          map-to="def:operator"/>
    <style id="mcstas_runtime"    _name="McStas runtime"        map-to="def:special-constant"/>
  </styles>

  <definitions>

    <!--regexs-->
    <define-regex id="preproc-start">^\s*#\s*</define-regex>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <!--contexts NOT used on the main context-->
    <!-- TODO: what about scanf ? -->
    <!-- man 3 printf -->
    <context id="printf" style-ref="printf" extend-parent="false">
      <match extended="true">
        \%\%|\%
        (?:[1-9][0-9]*\$)?      # argument
        [#0\-\ \+\'I]*          # flags
        (?:[1-9][0-9]*|\*)?     # width
        (?:\.\-?(?:[0-9]+|\*))? # precision
        (?:hh|ll|[hlLqjzt])?    # length modifier
        [diouxXeEfFgGaAcsCSpnm] # conversion specifier
      </match>
    </context>

    <!--contexts used on the main context-->
    <!-- Preprocessor -->
    <context id="if0-comment" style-ref="comment">
      <start>\%{preproc-start}if\b\s*0\b</start>
      <end>\%{preproc-start}(endif|else|elif)\b</end>
      <include>
        <context id="if-in-if0">
          <start>\%{preproc-start}if(n?def)?\b</start>
          <end>\%{preproc-start}endif\b</end>
          <include>
            <context ref="if-in-if0"/>
            <context ref="def:in-comment"/>
          </include>
        </context>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="include" style-ref="preprocessor">
      <match extended="true">
        \%{preproc-start}
        (include|import)\s*
        (".*?"|&lt;.*&gt;)
      </match>
      <include>
        <context id="included-file" sub-pattern="2" style-ref="included-file"/>
      </include>
    </context>

    <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
      <start extended="true">
        \%{preproc-start}
        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
        \b
      </start>
      <include>
        <context ref="def:line-continue" ignore-style="true"/>
        <context ref="string" ignore-style="true"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
      </include>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="printf"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-hexadecimal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]*[g-zG-Z][a-zA-Z0-9]*[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="octal" style-ref="octal">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-octal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]*[89][0-9]*[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        (0|[1-9][0-9]*)[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>asm</keyword>
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>continue</keyword>
      <keyword>default</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>enum</keyword>
      <keyword>for</keyword>
      <keyword>fortran</keyword>
      <keyword>goto</keyword>
      <keyword>if</keyword>
      <keyword>return</keyword>
      <keyword>struct</keyword>
      <keyword>switch</keyword>
      <keyword>typedef</keyword>
      <keyword>union</keyword>
      <keyword>while</keyword>
    </context>

    <context id="operators" style-ref="operator">
      <keyword>sizeof</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>_Bool</keyword>
      <keyword>_Complex</keyword>
      <keyword>_Imaginary</keyword>
      <keyword>bool</keyword>
      <keyword>char</keyword>
      <keyword>double</keyword>
      <keyword>float</keyword>
      <keyword>int</keyword>
      <keyword>(u)?int(8|16|32|64)_t</keyword>
      <keyword>long</keyword>
      <keyword>ptrdiff_t</keyword>
      <keyword>off(64)?_t</keyword>
      <keyword>short</keyword>
      <keyword>signed</keyword>
      <keyword>size_t</keyword>
      <keyword>ssize_t</keyword>
      <keyword>unsigned</keyword>
      <keyword>void</keyword>
      <keyword>wchar_t</keyword>
      <keyword>wint_t</keyword>
    </context>

    <context id="storage-class" style-ref="storage-class">
      <keyword>auto</keyword>
      <keyword>const</keyword>
      <keyword>extern</keyword>
      <keyword>inline</keyword>
      <keyword>register</keyword>
      <keyword>restrict</keyword>
      <keyword>static</keyword>
      <keyword>volatile</keyword>
    </context>

    <!-- C99 booleans -->
    <context id="boolean" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>

    <context id="common-defines" style-ref="common-defines">
      <keyword>NULL</keyword>
      <keyword>MAX</keyword>
      <keyword>MIN</keyword>
      <keyword>TRUE</keyword>
      <keyword>FALSE</keyword>
      <keyword>__LINE__</keyword>
      <keyword>__DATA__</keyword>
      <keyword>__FILE__</keyword>
      <keyword>__func__</keyword>
      <keyword>__TIME__</keyword>
      <keyword>__STDC__</keyword>
    </context>

    <context id="standard-streams" style-ref="standard-stream">
      <keyword>stdin</keyword>
      <keyword>stdout</keyword>
      <keyword>stderr</keyword>
    </context>

    <context id="signals" style-ref="signal-name">
      <keyword>SIGABRT</keyword>
      <keyword>SIGALRM</keyword>
      <keyword>SIGCHLD</keyword>
      <keyword>SIGCONT</keyword>
      <keyword>SIGFPE</keyword>
      <keyword>SIGHUP</keyword>
      <keyword>SIGILL</keyword>
      <keyword>SIGINT</keyword>
      <keyword>SIGKILL</keyword>
      <keyword>SIGPIPE</keyword>
      <keyword>SIGQUIT</keyword>
      <keyword>SIGSEGV</keyword>
      <keyword>SIGSTOP</keyword>
      <keyword>SIGTERM</keyword>
      <keyword>SIGTRAP</keyword>
      <keyword>SIGTSTP</keyword>
      <keyword>SIGTTIN</keyword>
      <keyword>SIGTTOU</keyword>
      <keyword>SIGUSR1</keyword>
      <keyword>SIGUSR2</keyword>
    </context>
    
    <!-- McStas keywords (grammar) -->
    <context id="mcstas_keyword" style-ref="mcstas_keyword">
        <keyword>DECLARE</keyword>
        <keyword>DEFINE</keyword>
        <keyword>END</keyword>
        <keyword>FINALLY</keyword>
        <keyword>INITIALIZE</keyword>
        <keyword>MCDISPLAY</keyword>
        <keyword>SAVE</keyword>
        <keyword>SHARE</keyword>
        <keyword>TRACE</keyword>
        <keyword>DEFINITION</keyword>
        <keyword>PARAMETERS</keyword>
        <keyword>POLARISATION</keyword>
        <keyword>SETTING</keyword>
        <keyword>STATE</keyword>
        <keyword>OUTPUT</keyword>
        <keyword>INSTRUMENT</keyword>
        <keyword>%include</keyword>
        <keyword>REMOVABLE</keyword>
    </context>
    
    <!-- McStas keywords (grammar) -->
    <context id="mcstas_trace" style-ref="mcstas_trace">
        <keyword>ABSOLUTE</keyword>
        <keyword>AT</keyword>
        <keyword>COMPONENT</keyword>
        <keyword>EXTEND</keyword>
        <keyword>GROUP</keyword>
        <keyword>PREVIOUS</keyword>
        <keyword>NEXT</keyword>
        <keyword>MYSELF</keyword>
        <keyword>RELATIVE</keyword>
        <keyword>ROTATED</keyword>
        <keyword>WHEN</keyword>
        <keyword>JUMP</keyword>
        <keyword>ITERATE</keyword>
        <keyword>SPLIT</keyword>
        <keyword>COPY</keyword>
    </context>
    
    <!-- McStas keywords (grammar) -->
    <context id="mcstas_runtime" style-ref="mcstas_runtime">
        <keyword>ABSORB</keyword>
        <keyword>SCATTERED</keyword>
        <keyword>MC_GETPAR</keyword>
        <keyword>DETECTOR_OUT</keyword>
        <keyword>DETECTOR_OUT_0D</keyword>
        <keyword>DETECTOR_OUT_1D</keyword>
        <keyword>DETECTOR_OUT_2D</keyword>
        <keyword>DETECTOR_OUT_3D</keyword>
        <keyword>NAME_CURRENT_COMP</keyword>
        <keyword>INDEX_CURRENT_COMP</keyword>
        <keyword>POS_A_CURRENT_COMP</keyword>
        <keyword>POS_R_CURRENT_COMP</keyword>
        <keyword>ROT_A_CURRENT_COMP</keyword>
        <keyword>ROT_R_CURRENT_COMP</keyword>
        <keyword>RAD2MIN</keyword>
        <keyword>MIN2RAD</keyword>
        <keyword>DEG2RAD</keyword>
        <keyword>RAD2DEG</keyword>
        <keyword>K2V</keyword>
        <keyword>V2K</keyword>
        <keyword>Q2V</keyword>
        <keyword>V2Q</keyword>
        <keyword>SE2V</keyword>
        <keyword>VS2E</keyword>
        <keyword>FWHM2RMS</keyword>
        <keyword>RMS2FWHM</keyword>
        <keyword>HBAR</keyword>
        <keyword>MNEUTRON</keyword>
        <keyword>PI</keyword>
        <keyword>POS_A_COMP_INDEX</keyword>
        <keyword>POS_R_COMP_INDEX</keyword>
        <keyword>NAME_COMP</keyword>
        <keyword>POS_A_COMP</keyword>
        <keyword>POS_R_COMP</keyword>
        <keyword>ROT_A_COMP</keyword>
        <keyword>ROT_R_COMP</keyword>
        <keyword>SCATTER</keyword>
        <keyword>SCATTERED</keyword>
        <keyword>STORE_NEUTRON</keyword>
        <keyword>RESTORE_NEUTRON</keyword>
        <keyword>PROP_GRAV_DT</keyword>
        <keyword>PROP_DT</keyword>
        <keyword>PROP_Z0</keyword>
        <keyword>PROP_X0</keyword>
        <keyword>PROP_Y0</keyword>
        <keyword>vec_prod</keyword>
        <keyword>scalar_prod</keyword>
        <keyword>NORM</keyword>
        <keyword>rotate</keyword>
        <keyword>rand01</keyword>
        <keyword>randpm1</keyword>
        <keyword>rand0max</keyword>
        <keyword>randminmax</keyword>
        <keyword>randtriangle</keyword>
        <keyword>normal_vec</keyword>
        <keyword>box_intersect</keyword>
        <keyword>cylinder_intersect</keyword>
        <keyword>sphere_intersect</keyword>
        <keyword>randvec_target_circle</keyword>
        <keyword>randvec_target_rect_angular</keyword>
        <keyword>randvec_target_rect</keyword>
        <keyword>Rotation</keyword>
        <keyword>Coords</keyword>
        <keyword>MAGNET_ON</keyword>
        <keyword>MAGNET_OFF</keyword>
        <keyword>ALLOW_BACKPROP</keyword>
        <keyword>DISALLOW_BACKPROP</keyword>
        <keyword>PROP_MAGNET</keyword>
        <keyword>mirror</keyword>
    </context>

    <!--Main context-->
    <context id="mcstas" class="no-spell-check">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="if0-comment"/>
        <context ref="include"/>
        <context ref="preprocessor"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="invalid-hexadecimal"/>
        <context ref="octal"/>
        <context ref="invalid-octal"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="operators"/>
        <context ref="types"/>
        <context ref="storage-class"/>
        <context ref="boolean"/>
        <context ref="common-defines"/>
        <context ref="standard-streams"/>
        <context ref="signals"/>
        <context ref="mcstas_keyword"/>
        <context ref="mcstas_runtime"/>
        <context ref="mcstas_trace"/>
      </include>
    </context>

  </definitions>
</language>
