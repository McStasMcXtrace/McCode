/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: Bispectral extraction 
*
* %Identification
* Written by: Henrik Jacobsen, contact: hjacobse@fys.ku.dk
* Date:  October 2012.
* Origin: NBI, ESS
* Release: McStas CVS-080208
* Version: 0.2
* %INSTRUMENT_SITE: ESS
*
* Instrument short description
* Bispectral extraction system
* %Description
* Bispectral extraction: A thermal and a cold source at the same time. The neutrons from the cold source are reflected into the guide by a ~2.5m long mirror in front of the guide.
* 
*
* mcrun --mpi=2 bispectral_monitors -p flat_flatm_156m_bispectral_5deg.par -d flat_flatm_156m_bispectral_5deg -n 1e8
*
*
*
*
* %Parameters
*	cold_Lam_min: 		[AA]	Minimum wavelength emitted by the cold moderator
*	cold_Lam_max: 		[AA]	Maximum wavelength emitted by the cold moderator
*	thermal_Lam_min: 	[AA]	Minimum wavelength emitted by the thermal moderator
*	thermal_Lam_max: 	[AA]	Maximum wavelength emitted by the thermal moderator
*	Pulse_width:	 	[s]	Length of the long pulse.
*       frequency: 		[Hz] 	Frequency of source
*	thermal_hotspot_fac:	[1]	Intensity increase in thermal hot spot
*	cold_hotspot_fac:	[1]	Intensity increase in cold hot spot
*
*	use_full_guide_flag:	[1]	1: Use full guide. 2: Remove left part of guide to let cold neutrons through
*	guide_start:		[m]	Distance from thermal moderator to guide start
*	gravity:			[m/s^2] Gravitational acceleration
*	focus_start_w:		[m]	First horizontal focus in real space
*	focus_end_w:		[m]	Second horizontal focus in real space
*	smallaxis_w:		[m]	Width of small axis
*	focus_start_h:		[m]	First vertical focus in real space
*	focus_end_h:		[m]	Second vertical focus in real space
*	smallaxis_h:		[m]	Height of small axis
* maxdiv:			[deg]	Maximum divergence detected
* Length:			[m]	Distance from source to sample
* coldperthermal:		[1]	Amount of simulated cold neutrons per thermal neutrons
* man_lam:			[1]	0: use standard wavelength, overrides input parameters. 1: use input parameters
*	thermal:			[1]	Choose which sources to use. 0: only cold source. 1: only thermal source. 2: both sources.	
*	mirror_type:		[1]	The type of mirror. 0: no mirror. 1: flat mirror. 2: curved mirror.
*	mirror_coating_type:	[1]	The coating distribution of the mirror. 1: same for all plates. 2: parabolic
*	mirror_offset:		[m]	The offset of the center of the mirror in the x direction
*	theta1:			[deg]	The angle of the first mirror plate
*	theta2:			[deg]	The angle of the central mirror plate
*	theta3:			[deg]	The angle at the end of the mirror
*	m_mirror1:		[1]	The m-value of the first mirror plate
*	m_mirror2:		[1]	The m-value of the central mirror plate
*	m_mirror4:		[1]	The m-value at the end of the mirror
*	h_mirror:		[m]	The height of the part of the mirror that is outside the guide
*	substrate_thickness:	[m]	The thickness of the substrate of the mirror
*	coating_thickness:	[m]	The thickness of the coating of the mirror	
*
* %End
*
***************************************************/

DEFINE INSTRUMENT ESS_2001_bispectral(
int man_lam=1, 
int thermal=2, 
cold_Lam_min=0.1, cold_Lam_max=10, 
thermal_Lam_min=0.1, thermal_Lam_max=10, 
thermal_hotspot_fac=1.0,
cold_hotspot_fac=1.0,
int use_full_guide_flag=0, 
guide_start=2, Length=150, 
focus_start_w=-1.2620, focus_end_w=150.3187, smallaxis_w=0.2550,
focus_start_h=-2.1415, focus_end_h=150.0778, smallaxis_h=0.3847,
maxdiv=2.0, 
coldperthermal=30,  
int mirror_type=2, 
int mirror_coating_type=1,
mirror_offset=0,
theta1=1.25,
theta2=1.25,
theta3=1.25,
m_mirror=5,
h_mirror=0.15,
Pulse_width=0.00286, frequency=14.0,   gravity=-9.81, substrate_thickness=0.0005, coating_thickness=10e-6,
m1=5,
m2=4)

DECLARE
%{
double cold_moderator_x=0.12;

// parameters for the elliptic guide
double distance[202], length[201], h[201], w[201], alpha[201], guide_piece_length[201];
double guide_dist, Pulse_freq;
int n_elements=50;
//%include "mdeclare.c"
double m[50];
double guide_length;

double focus_s_w;
double focus_e_w;
double focus_s_h;
double focus_e_h;

double W_par=0.003;
double R0_par=0.99;
double waviness=0.0101;


// The standard wavelengths when man_lam=0
double thermal_lam_max;
double thermal_lam_min;
double cold_lam_max;
double cold_lam_min;

// parameters to switch between sources
double dummy;
int two_sources;
int flag;
double coldperthermal;
double coldmultiplier;
double thermalmultiplier;

double x_one; //lower focus point for source
double x_two; //upper focus point for source
int r; //number of first guide element that is outside mirror
double x_mid; //center to focus on
double x_focus; //width of focusing rectangle
double y_focus;

// Parameters to find the origin of neutrons hitting the sample
double xmidlertidig;
double ymidlertidig;
double xcold;
double xthermal;
double ycold;
double ythermal;
int hit_sample_flag=0;

// Parameters to remove the too divergent neutrons from the monitors
double x_div;
double y_div;

//to remove neutrons outside the wavelength band
double lambda;

// to find where the simulated rays come from
double p_old;

// Parameters for hotspot
double size=0.12;
double thermal_hotspot_dia= 0.03;
double thermal_hotspot_factor;
double thermal_hotspot_x_center=-0.01;
double thermal_hotspot_y_center=0.0;

double cold_hotspot_dia= 0.03;
double cold_hotspot_factor;
double cold_hotspot_x_center=0.01;
double cold_hotspot_y_center=0.03;

// double cold_hotspot_xwidth=0.018;
// double cold_hotspot_yheight=0.039;




// Parametes for the mirror
//---------------------------------------------------------------
double L_moderator_mirror=3.25;   //distance to center of mirror
double mirror_full_length=2.5; //length of mirror
double extraction_start_pos=2.0; //where the mirror starts
double guide_left_start=3.970; //where the left part of the guide starts
double R0_mirror=0.99;

double W_mirror=0.003;

double alpha_mirror;

int n_elements_mirror=16;
int mirror_part_in_guide_number[51];
double mirror_rot[50];
double x_mirror[50];
double mirror_part_length[50];
double mirror_height_in_guide[51];
double y_mirror[50];
double z_mirror[50];
double mirror_rotation[50]; 

double mirror_start;
double mirror_end;
double h_mirror_part;
double L_mirror_part;


int k;
int h_index;

//Rotation of mirror is theta(z)=a*z^2+b*z+c, m is a_m*z^2+b_m*z+c_m
double x1, x2, x3;
double a, b, c;
double a_m, b_m, c_m;

//end of parameters for the mirror
//-------------------------------------------------


// for the guide made of mirrors
int guide_scatt=0;
double guide_bottom_height[202];
double guide_bottom_rotation[202];
double guide_right_height[202];
double guide_right_rotation[202];
double guide_h_pos[202];
double guide_w_pos[202];
double guide_z_pos[202];
double guide_right_rot[202];
double guide_bottom_rot[202];
double guide_top_rot[202];
double guide_left_rot[202];
int use_guidegravity_flag[202];
int use_guide_left_part[202];

double ArmExitPos;
double ArmMidOnePos;





double old_x_prop;
double old_y_prop;
double old_z_prop;

double old_vx_prop;
double old_vy_prop;
double old_vz_prop;

double old_t_prop;
double old_p_prop;

double new_x_prop;
double new_y_prop;
double new_z_prop;

double new_vx_prop;
double new_vy_prop;
double new_vz_prop;

double new_t_prop;
double new_p_prop;



double w_extractionstart;
double h_extractionstart;
double w_guide_leftstart;
double h_guide_leftstart;


%}

INITIALIZE
%{	

//input focus points are in real coordinates: focus_start_w=0 means at origin, focus_start_w=-1 means 1m behind source. In elliptic guide, they are in coordinates relative to the guide
focus_s_w=focus_start_w-guide_start;
focus_s_h=focus_start_h-guide_start;
focus_e_w=focus_end_w-guide_start;
focus_e_h=focus_end_h-guide_start;


focus_s_w=focus_start_w-4.5;
focus_s_h=focus_start_h-4.5;
focus_e_w=focus_end_w-4.5;
focus_e_h=focus_end_h-4.5;


guide_length=Length-0.5-4.5; //length of guide made of Guide_gravity_NewCoating2 components

if (focus_s_w>guide_start){
printf("-------warning-------- focus_s_w is inside guide"); }

if (focus_s_h>guide_start) {
printf("---------warning -------------- focus_s_h is inside guide");}


guide_dist=1e-6; //Distance between guide elements


//Define the coating of the guide
k=0;
for (k=0; k<n_elements+1; k++){
m[k]=m1;
if (k<(n_elements/10*3))
{m[k]=m2;}
if (k>(n_elements/10*7)-1)
{m[k]=m1;}
}



//calculate the guide shape
//	%include "earray_corrected.c"

// File earray_corrected.c inserted directly in instrument for inclusion in McStas 2.0

// BEGIN earray_corrected.c - K. Klenoe
// January 2010 Generic

// temp is the file which data is (optionally) written to
 FILE *data;
 data = fopen("temp", "w");

// Variables used only in this file
double expcoeff, elength_w, elength_h, coating_price_w, coating_price_h;
int i,j, n_elements_half, n_elements_half_plus_1;

n_elements_half=n_elements/2;
n_elements_half_plus_1=n_elements_half+1;


//printf("focus_s_w, focus_e_w, smallaxis_w %f, %f, %f",focus_s_w, focus_e_w, smallaxis_w);


// Next 4 loops calculate spacing of guide elements


expcoeff=log(guide_length/2+1)/n_elements_half;

i=0;
for (i=0; i<(n_elements_half_plus_1); i++)
distance[i]=exp(expcoeff*i)-1;

j=0;
i=n_elements_half;
for (i=n_elements_half; i<(n_elements+1); i++)
{distance[n_elements-j]=guide_length-exp(expcoeff*(j))+1; j++;}

i=0;
for (i=0; i<(n_elements); i++)
length[i]=distance[i+1]-distance[i];


// Next 4 loops calculate the shape of the guide. Modify for non-elliptical geometries.


double f_h=focus_e_h-focus_s_h;
double f_w=focus_e_w-focus_s_w;

elength_h=sqrt(f_h*f_h+smallaxis_h*smallaxis_h);
elength_w=sqrt(f_w*f_w+smallaxis_w*smallaxis_w);

i=0;
for (i=0; i<(n_elements_half_plus_1); i++){
h[i]=smallaxis_h*sqrt(1-(((distance[i]-focus_s_h)-f_h/2)/(elength_h/2))*(((distance[i]-focus_s_h)-f_h/2)/(elength_h/2)));
if (h[i]<0.005) h[i]=0.005;}

i=n_elements_half;
for (i=n_elements_half; i<(n_elements+1); i++){
h[i]=smallaxis_h*sqrt(1-(((distance[i]-focus_s_h)-f_h/2)/(elength_h/2))*(((distance[i]-focus_s_h)-f_h/2)/(elength_h/2)));
if (h[i]<0.005) h[i]=0.005;}

i=0;
for (i=0; i<(n_elements_half_plus_1); i++){
w[i]=smallaxis_w*sqrt(1-(((distance[i]-focus_s_w)-f_w/2)/(elength_w/2))*(((distance[i]-focus_s_w)-f_w/2)/(elength_w/2)));
if (w[i]<0.005) w[i]=0.005;}

i=n_elements_half;
for (i=n_elements_half; i<(n_elements+1); i++){
w[i]=smallaxis_w*sqrt(1-(((distance[i]-focus_s_w)-f_w/2)/(elength_w/2))*(((distance[i]-focus_s_w)-f_w/2)/(elength_w/2)));
if (w[i]<0.005) w[i]=0.005;}


// calculating alpha from m

i=0;
for (i=0; i<(n_elements); i++)
if (m[i]>5) {alpha[i]=3.5+1.02*(m[i]-5);}
else {alpha[i]=3.5;}


// Calculating dimensions if guide was extended to source and sample
/*
double w_at_source, h_at_source, w_at_sample, h_at_sample;

h_at_source=2*sqrt(smallaxis_h/10*(1-1/elength_h/elength_h*4*(elength_h/2+focus_s_h-(-guide_start))*(elength_h/2+focus_s_h-(-guide_start))));


w_at_source=2*sqrt(smallaxis_w/10*(1-1/elength_w/elength_w*4*(elength_w/2+focus_s_w-(-guide_start))*(elength_w/2+focus_s_w-distance_s[i])));


h_at_sample=2*sqrt(smallaxis_h/10*(1-1/elength_h/elength_h*4*(elength_h/2+focus_s_h-(guide_length+sample_dist))*(elength_h/2+focus_s_h-(guide_length+sample_dist))));


w_at_sample=2*sqrt(smallaxis_w/10*(1-1/elength_w/elength_w*4*(elength_w/2+focus_s_w-(guide_length+sample_dist))*(elength_w/2+focus_s_w-(guide_length+sample_dist))));
*/
//printf("\ndistance_s[24] = %f\n",distance_s[24]);
/*printf("h_at_source = %f\n",h_at_source);
printf("w_at_source = %f\n",w_at_source);
printf("h_at_sample = %f\n",h_at_sample);
printf("w_at_sample = %f\n",w_at_sample);*/

// For printing out the calculated values (if desired)


i=0;
for (i=0; i<(n_elements+1); i++)
fprintf(data,"distance[%i] %f\n",i, distance[i]);


i=0;
for (i=0; i<(n_elements); i++)
fprintf(data,"length[%i] %f\n",i, length[i]);

i=0;
for (i=0; i<(n_elements); i++)
fprintf(data,"h[%i] %f     w[%i] %f\n",i, h[i], i, w[i]);


//fprintf(data,"\n elength_h, expcoeff, * %f, %f",elength_h, expcoeff);
//}


// END earray_corrected.c

//	%include "cost.c"		 


// Everything with sources
//---------------------------------------------------------------------------	 
// Switch settings. thermal=0: cold, thermal=1: thermal, thermal=2: bispectral
if(thermal==0){flag=1; two_sources=0;   }
if(thermal==1){flag=0; two_sources=0;   }
if(thermal==2){flag=1; two_sources=1;   }

//if man_lam=0, set emitted wavelength interval to standard - not used very often

if(Length==50){
thermal_lam_min=0.2; 
thermal_lam_max=4.7;
cold_lam_min=2.75;
cold_lam_max=7.25;
}

if(Length==70){
thermal_lam_min=0.2; 
thermal_lam_max=4.7;
cold_lam_min=2.75;
cold_lam_max=7.25;
}

if(Length==150){
thermal_lam_min=0.75; 
thermal_lam_max=2.25;
cold_lam_min=4.25;
cold_lam_max=5.75;
}

thermal_lam_min=0.75; 
thermal_lam_max=2.25;
cold_lam_min=4.25;
cold_lam_max=5.75;

if(man_lam==0){cold_Lam_min=cold_lam_min; cold_Lam_max=cold_lam_max; thermal_Lam_min=thermal_lam_min; thermal_Lam_max=thermal_lam_max;}

//calculate the propability multiplier for each source: if more cold neutrons than thermal neutrons are simulated, their weight is less
coldmultiplier=(coldperthermal+1)/coldperthermal;
thermalmultiplier=(coldperthermal+1) ;

// for hot spot
thermal_hotspot_factor=thermal_hotspot_fac;
cold_hotspot_factor=cold_hotspot_fac;

//end of calculations for sources
//-------------------------------------------




//calculate parameters for guide to speed up TRACE
k=0;
for (k=0; k<n_elements+1; k++){
guide_piece_length[k]=length[k]-guide_dist;
}

//Calculate everything needed for the mirror

 //The positions where the angles for the mirror are given: Start of mirror, center of mirror, end of mirror;
x1=0; 
x2=mirror_full_length/2;  
x3=mirror_full_length;



//calculate  alpha_mirror
	if (m_mirror>5) {alpha_mirror=3.5+1.02*(m_mirror-5);}
	else {alpha_mirror=3.5;}



//end of calculations for mirror
//------------------------------------------------------


k=0;
for (k=0; k<n_elements+1; k++)
{guide_z_pos[k]=4.5+distance[k];
}



//Position the arms for proper propagation of neutrons
ArmMidOnePos=extraction_start_pos+mirror_full_length/2;
ArmExitPos=extraction_start_pos+mirror_full_length+1e-7;

// end of calculations for guide consisting of mirrors
//---------------------------------------------------------------------


//For focusing of the source

w_extractionstart=0.5*smallaxis_w*sqrt(1-   (f_w+2*focus_start_w-2*extraction_start_pos)*(f_w+2*focus_start_w-2*extraction_start_pos)/(elength_w*elength_w));
w_guide_leftstart=0.5*smallaxis_w*sqrt(1-   (f_w+2*focus_start_w-2*guide_left_start)    *(f_w+2*focus_start_w-2*guide_left_start)/(elength_w*elength_w));
h_extractionstart=0.5*smallaxis_h*sqrt(1-   (f_h+2*focus_start_h-2*extraction_start_pos)*(f_h+2*focus_start_h-2*extraction_start_pos)/(elength_h*elength_h));
h_guide_leftstart=0.5*smallaxis_h*sqrt(1-   (f_h+2*focus_start_h-2*guide_left_start    )*(f_h+2*focus_start_h-2*guide_left_start)/(elength_h*elength_h));



if (isnan(w_extractionstart)){
w_extractionstart=0;
} 

if (isnan(h_extractionstart)){
h_extractionstart=0;
} 

x_two=(guide_left_start-extraction_start_pos)/(guide_left_start)*(0.18-w_guide_leftstart/2)+w_guide_leftstart/2;

x_mid=0.5*(x_two-w_extractionstart);
x_focus=x_two+w_extractionstart;

//printf("--------w_extractionstart=%f, h_extractionstart=%f, w_guide_leftstart=%f,h_guide_leftstart=%f x_mid=%f, x_two=%f, x_focus=%f\n\n", w_extractionstart, h_extractionstart, w_guide_leftstart, h_guide_leftstart, x_mid, x_two, x_focus);
//printf("smallaxis_w=%f, f_w=%f, focus_start_w=%f, guide_start=%f, elength_w=%f, f_w+2*focus_start_w-2*guide_start=%f\n", smallaxis_w, f_w, focus_start_w, guide_start, elength_w, f_w+2*focus_start_w-2*guide_start);

if (guide_start>extraction_start_pos) {
y_focus=h_mirror;
}else{
y_focus=h_extractionstart; // h[0] is the yheight at 4.5 m: a bit larger focus because part of the guide is missing
}

printf("h[0]=%f, w[0]=%f\n",h[0],w[0]);

%}


TRACE


COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE
EXTEND
%{
	if(two_sources!=0){                //switch between sources
		dummy=thermalmultiplier*rand01();
		if (dummy>1){
		flag=1;
		}
	else {flag=0;}
	}
%}


COMPONENT ArmForGuideRight=Arm()
AT(0,0,0) RELATIVE Origin
ROTATED (0,0,90) RELATIVE Origin

COMPONENT ArmForGuideBottom=Arm() AT (0,0,0) RELATIVE Origin ROTATED (0,0,90) RELATIVE Origin

COMPONENT ArmForGuideTop=Arm() AT (0,0,0) RELATIVE Origin ROTATED (0,0,-90) RELATIVE Origin

COMPONENT ArmForGuideLeft=Arm() AT (0,0,0) RELATIVE Origin ROTATED (0,0,180) RELATIVE Origin


COMPONENT cold_source = ESS_moderator_long_2001(
    size = 0.12, l_low = cold_Lam_min, l_high = cold_Lam_max,
    xw = x_focus+0.15, yh = y_focus+0.15, freq = frequency, T = 50, tau = 287e-6, tau1 = 0,
//    xw = x_focus+0.01, yh = h[0]+0.01, freq = frequency, T = 50, tau = 287e-6, tau1 = 0,
    tau2 = 20e-6, d = Pulse_width, n = 20, n2 = 5, chi2 = 0.9,
    I0 = 6.9e11, I2 = 27.6e10, branch1 =1.0, branch2 = 0.5,
    branch_tail = 0.1,  target_index=2) WHEN (flag==1)
  AT (cold_moderator_x, 0, 0) RELATIVE Origin
EXTEND
%{
if (flag==1){
/*
	if (cold_hotspot_factor>1){
		if((x-cold_hotspot_x_center)*(x-cold_hotspot_x_center)+(y-cold_hotspot_y_center)*(y-cold_hotspot_y_center) < cold_hotspot_dia/2.0*cold_hotspot_dia/2.0){
			p=p*cold_hotspot_factor;
		}
		else {
			p=p*(size*size-cold_hotspot_dia/2.0*cold_hotspot_dia/2.0*3.1416*cold_hotspot_factor)/(size*size-cold_hotspot_dia/2.0*cold_hotspot_dia/2.0*3.1416);}
	}
*/
	if(two_sources!=0){
		p=p*coldmultiplier;   //increase intensity because not all neutrons come from this source
	}
}
  %}


COMPONENT thermal_source = ESS_moderator_long_2001(
    size = 0.12, l_low = thermal_Lam_min, l_high = thermal_Lam_max, dist = extraction_start_pos, 
    xw = 2*w_guide_leftstart+0.1, yh = 2*h_guide_leftstart+0.1, freq = frequency, T = 325, tau = 80e-6, tau1 = 400e-6, 
    tau2 = 12e-6, d = Pulse_width, n = 20, n2 = 5, chi2 = 2.5,
    I0 = 13.5e11, I2 = 27.6e10, branch1 = 0.5, branch2 = 0.5,
    branch_tail = 0.1) WHEN (flag==0)
  AT (0, 0, 0) RELATIVE Origin
EXTEND
%{  
if (flag==0){
/*
	if (thermal_hotspot_factor>1){
if((x-thermal_hotspot_x_center)*(x-thermal_hotspot_x_center)+(y-thermal_hotspot_y_center)*(y-thermal_hotspot_y_center) < thermal_hotspot_dia/2.0*thermal_hotspot_dia/2.0){p=p*thermal_hotspot_factor;}
else {
p=p*(size*size-thermal_hotspot_dia/2.0*thermal_hotspot_dia/2.0*3.1416*thermal_hotspot_factor)/(size*size-thermal_hotspot_dia/2.0*thermal_hotspot_dia/2.0*3.1416);}
}*/
xthermal=x; ythermal=y;  //for origin info
if(two_sources!=0){  //increase intensity because not all neutrons come from this source
p=p*thermalmultiplier;
}
}
  %}


 COMPONENT ColdFocus=Arm()
AT (x_mid,0,extraction_start_pos) RELATIVE Origin
EXTEND %{
PROP_Z0;
%}




//////////////////////////////////////////////////////  
//Extraction system  
//////////////////////////////////////////////////////  
COMPONENT ArmMidOne=Arm() AT (0, 0, ArmMidOnePos) RELATIVE Origin 
 EXTEND%{ 
 guide_scatt=0; 

//save the current state of the neutron. consider including spin
old_x_prop=x;
old_y_prop=y;
old_z_prop=z;

old_vx_prop=vx;
old_vy_prop=vy;
old_vz_prop=vz;

old_t_prop=t;
old_p_prop=p;

new_x_prop=x;
new_y_prop=y;
new_z_prop=z;

new_vx_prop=vx;
new_vy_prop=vy;
new_vz_prop=vz;

new_t_prop=1e15; //any large value to make sure t<new_t_prop the first time the neutron hits any of the components near the mirror
new_p_prop=p;
SCATTER;
 %} 



COMPONENT mirror_full_center = Mirror_Curved_Bispectral(substrate_thickness=substrate_thickness, coating_thickness=coating_thickness,
focus_e=focus_end_h, focus_s=focus_start_h, mirror_start=extraction_start_pos, guide_start=guide_start, yheight=h_mirror, length=2.5, smallaxis=smallaxis_h, 
 transmit=1,  m=m_mirror, theta_1=theta1, theta_2=theta1, theta_3=theta1)
//WHEN(guide_scatt==0)
AT (mirror_offset,0,extraction_start_pos+mirror_full_length*0.5) RELATIVE Origin
ROTATED(0,-90,0) RELATIVE Origin
EXTEND%{
if (SCATTERED) {
//{printf("I scatter\n");
guide_scatt=5; PROP_DT(1e-9); SCATTER; }
%}

COMPONENT ArmForNeutronPropState_2=Arm() AT (0,0,ArmMidOnePos) RELATIVE Origin
EXTEND%{
//save new parameters if the time it took to reach the component is less than the time of the previous component
if (guide_scatt==5){
if (t<new_t_prop){
new_x_prop=x;
new_y_prop=y;
new_z_prop=z;

new_vx_prop=vx;
new_vy_prop=vy;
new_vz_prop=vz;

new_t_prop=t;
new_p_prop=p;
}}
//reset neutron to where it was before mirror
x=old_x_prop;
y=old_y_prop;
z=old_z_prop;

vx=old_vx_prop;
vy=old_vy_prop;
vz=old_vz_prop;

t=old_t_prop;
p=old_p_prop;
SCATTER;
//printf("mirror1_scatt=%i\,z=%f, t=%f, old_t_prop=%f, new_t_prop=%f\n",guide_scatt,z,t,old_t_prop, new_t_prop);

%}


COMPONENT guide_right = Mirror_Elliptic_Bispectral(substrate_thickness=0, coating_thickness=0,
focus_end_h=focus_end_h, focus_start_h=focus_start_h, mirror_start=guide_start, length=extraction_start_pos+mirror_full_length-guide_start, smallaxis_h=smallaxis_h, 
focus_end_w=focus_end_w, focus_start_w=focus_start_w, smallaxis_w=smallaxis_w, 
 m=m[0])
//WHEN(guide_scatt==0)
AT (0,0,guide_start) RELATIVE Origin
ROTATED(0,-90,0) RELATIVE Origin
EXTEND%{
if (SCATTERED){
//{printf("I scatter\n");
guide_scatt=3; PROP_DT(1e-9); SCATTER; }
%}

COMPONENT ArmForNeutronPropState_4=Arm() AT (0,0,ArmMidOnePos) RELATIVE Origin
EXTEND%{

//save new parameters if the time it took to reach the component is less than the time of the previous component
//printf("3guide_scatt=%i\,z=%f, t=%f, old_t_prop=%f, new_t_prop=%f\n",guide_scatt,z,t,old_t_prop, new_t_prop);
if (guide_scatt==3){

if (t<new_t_prop){
new_x_prop=x;
new_y_prop=y;
new_z_prop=z;

new_vx_prop=vx;
new_vy_prop=vy;
new_vz_prop=vz;

new_t_prop=t;
new_p_prop=p;
}}
//reset neutron to where it was before mirror
x=old_x_prop;
y=old_y_prop;
z=old_z_prop;

vx=old_vx_prop;
vy=old_vy_prop;
vz=old_vz_prop;

t=old_t_prop;
p=old_p_prop;

SCATTER;

//printf("guide_scatt=%i\,z=%f, t=%f, old_t_prop=%f, new_t_prop=%f\n",guide_scatt,z,t,old_t_prop, new_t_prop);

%}

COMPONENT guide_bottom = Mirror_Elliptic_Bispectral(substrate_thickness=0, coating_thickness=0,
focus_end_h=focus_end_w, focus_start_h=focus_start_w, mirror_start=guide_start, length=extraction_start_pos+mirror_full_length-guide_start, smallaxis_h=smallaxis_w, 
focus_end_w=focus_end_h, focus_start_w=focus_start_h, smallaxis_w=smallaxis_h, 
m=m[0])
//WHEN(guide_scatt==0)
AT (0,0,guide_start) RELATIVE ArmForGuideBottom
ROTATED(0,-90,0) RELATIVE ArmForGuideBottom
EXTEND%{
if (SCATTERED){
//printf("I scatter\n");
guide_scatt=2; PROP_DT(1e-9); SCATTER; }
%}

COMPONENT ArmForNeutronPropState_5=Arm() AT (0,0,ArmMidOnePos) RELATIVE Origin
EXTEND%{

if (guide_scatt==2){

//save new parameters if the time it took to reach the component is less than the time of the previous component

if (t<new_t_prop){
new_x_prop=x;
new_y_prop=y;
new_z_prop=z;

new_vx_prop=vx;
new_vy_prop=vy;
new_vz_prop=vz;

new_t_prop=t;
new_p_prop=p;
}}
//reset neutron to where it was before mirror
x=old_x_prop;
y=old_y_prop;
z=old_z_prop;

vx=old_vx_prop;
vy=old_vy_prop;
vz=old_vz_prop;

t=old_t_prop;
p=old_p_prop;

SCATTER;

%}

COMPONENT cold_lambda_guidestart = L_monitor(
    nL = 100, filename = "cold_lambda_guidestart", restore_neutron = 1,
    xwidth = w[0], yheight = h[0], Lmin = 0.01, Lmax = 20) WHEN (flag==1)
AT (0, 0, guide_z_pos[0]) RELATIVE Origin

COMPONENT thermal_lambda_guidestart = L_monitor(
    nL = 100, filename = "thermal_lambda_guidestart", restore_neutron = 1,
    xwidth = w[0], yheight = h[0], Lmin = 0.01, Lmax = 20) WHEN (flag==0)
AT (0, 0, guide_z_pos[0]) RELATIVE Origin

COMPONENT lambda_guidestart = L_monitor(
    nL = 100, filename = "lambda_guidestart", restore_neutron = 1,
    xwidth = w[0], yheight = h[0], Lmin = 0.01, Lmax = 20)
AT (0, 0, guide_z_pos[0]) RELATIVE Origin



COMPONENT guide_top = Mirror_Elliptic_Bispectral(substrate_thickness=0, coating_thickness=0,
focus_end_h=focus_end_w, focus_start_h=focus_start_w, mirror_start=guide_start, length=extraction_start_pos+mirror_full_length-guide_start, smallaxis_h=smallaxis_w, 
focus_end_w=focus_end_h, focus_start_w=focus_start_h, smallaxis_w=smallaxis_h, 
m=m[0])
//WHEN(guide_scatt==0)
AT (0,0,guide_start) RELATIVE ArmForGuideTop
ROTATED(0,-90,0) RELATIVE ArmForGuideTop
EXTEND%{
if (SCATTERED){
//{printf("I scatter\n");
guide_scatt=1; PROP_DT(1e-9); SCATTER; }
%}

COMPONENT ArmForNeutronPropState_6=Arm() AT (0,0,ArmMidOnePos) RELATIVE Origin
EXTEND%{

if (guide_scatt==1){

//save new parameters if the time it took to reach the component is less than the time of the previous component

if (t<new_t_prop){
new_x_prop=x;
new_y_prop=y;
new_z_prop=z;

new_vx_prop=vx;
new_vy_prop=vy;
new_vz_prop=vz;

new_t_prop=t;
new_p_prop=p;
}}
//reset neutron to where it was before mirror
x=old_x_prop;
y=old_y_prop;
z=old_z_prop;

vx=old_vx_prop;
vy=old_vy_prop;
vz=old_vz_prop;

t=old_t_prop;
p=old_p_prop;

SCATTER;


%}


COMPONENT guide_Left = Mirror_Elliptic_Bispectral(substrate_thickness=0, coating_thickness=0,
focus_end_h=focus_end_h, focus_start_h=focus_start_h, mirror_start=guide_left_start, length=extraction_start_pos+mirror_full_length-guide_left_start, smallaxis_h=smallaxis_h, 
focus_end_w=focus_end_w, focus_start_w=focus_start_w, smallaxis_w=smallaxis_w, 
m=m[0])
//WHEN(guide_scatt==0 && guide_left_start<extraction_start_pos+mirror_full_length)
AT (0,0,guide_left_start) RELATIVE ArmForGuideLeft
ROTATED(0,-90,0) RELATIVE ArmForGuideLeft
EXTEND%{
if (SCATTERED){
//{printf("I scatter\n");
guide_scatt=4; PROP_DT(1e-9); SCATTER; }
%}

COMPONENT ArmForNeutronPropState_7=Arm() AT (0,0,ArmMidOnePos) RELATIVE Origin
EXTEND%{

//save new parameters if the time it took to reach the component is less than the time of the previous component
if (guide_scatt==4){

if (t<new_t_prop){
new_x_prop=x;
new_y_prop=y;
new_z_prop=z;

new_vx_prop=vx;
new_vy_prop=vy;
new_vz_prop=vz;

new_t_prop=t;
new_p_prop=p;
}}
//reset neutron to where it was before mirror
x=old_x_prop;
y=old_y_prop;
z=old_z_prop;

vx=old_vx_prop;
vy=old_vy_prop;
vz=old_vz_prop;

t=old_t_prop;
p=old_p_prop;


SCATTER;


%}


// Make neutrons propagate properly
 
COMPONENT ArmMidTwo=Arm() AT (0,0,0) RELATIVE ArmMidOne 
 EXTEND%{ 
 if (guide_scatt==0)
 {SCATTER; }
 %}

COMPONENT ArmForNeutronPropState_8=Arm() AT (0,0,ArmMidOnePos) RELATIVE Origin
EXTEND%{
//printf("1guide_scatt=%i\,z=%f, t=%f, old_t_prop=%f, new_t_prop=%f\n",guide_scatt,z,t*1000,old_t_prop*1000, new_t_prop*1000);

if (guide_scatt>0)
{
//let the neutrons be scattered from the component with the lowest value of t
x=new_x_prop;
y=new_y_prop;
z=new_z_prop;

vx=new_vx_prop;
vy=new_vy_prop;
vz=new_vz_prop;

//printf("2guide_scatt=%i\,z=%f, t=%f, old_t_prop=%f, new_t_prop=%f\n\n",guide_scatt,z,t*1000,old_t_prop*1000, new_t_prop*1000);

t=new_t_prop;
if (t>9e14){
t=old_t_prop;}

p=new_p_prop;
//printf("2guide_scatt=%i\,z=%f, t=%f, old_t_prop=%f, new_t_prop=%f\n\n",guide_scatt,z,t*1000,old_t_prop*1000, new_t_prop*1000);

}

 %}

COMPONENT ArmMidThree=Arm() AT (0,0,0) RELATIVE ArmMidOne JUMP ArmMidOne WHEN (guide_scatt>0)

COMPONENT ArmExit=Arm() 
 AT (0, 0, ArmExitPos) RELATIVE Origin

//////////////////////////////////////////////////////  
//End of guide made of mirrors  
//////////////////////////////////////////////////////  

// This is where one would define the actual elliptical guide - taken out for McStas 2.0...


END









