/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: Test_Scatter_log_srw_mcnp 
*
* %Identification
* Written by: Esben Klinkby (esbe@dtu.dk), Peter Willendrup (pkwi@fysik.dtu.dk)
* Origin: DTU Nutech
* Date: 2013
* Release: McStas 2.1
* Version: 1.0
* %INSTRUMENT_SITE: Templates
*
* Example instrument of Scatter_logger feature usage for lost neutron transfer to MCNP via the ssr/ssw mechanism.
*
* %Description
* 
* This instrument is an example of how to use thet newly developed (and experimental)
* Scatter_logger family of components in McStas. In this example the neutrons deposited in the
* guide wall of a straight guide are transferred to an MCNP SSW file, for later processing in MCNP
* (for estimating gamma-production etc.)
*
* Also include (but commented out) is a code-snippet that would dump the lost neutrons to stdout
*
* Example: mcrun Test_Scatter_log_losses LENGTH=10
*
* %Parameters
*
* %Link
* <a href="http://orbit.dtu.dk/files/57025387/prod11375088187360.NO_P_v8.pdf">Esben Klinkby talk at NOP&D 2013</a>
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT Test_Scatter_log_srw_mcnp()

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
AT (0,0,0) ABSOLUTE


  //COMPONENT src = Source_simple(
  //    radius = 0.1, dist = 1, focus_xw = 0.1, focus_yh = 0.1, lambda0=10, dlambda=1)
  //AT (0, 0, 0) RELATIVE Origin


  //read rssa file                                                                                                                   
COMPONENT src = Virtual_mcnp_ss_input(
   )
  AT (0, 0, 0.002) RELATIVE Origin


COMPONENT s1=Scatter_logger()
AT(0,0,0.0021) RELATIVE src

COMPONENT guide_simple = Guide(
    w1 = 0.15, h1 = 0.15, w2 = 0.15, h2 = 0.15, l = 100, R0 = 0.99,
    Qc = 0.0219, alpha = 6.07, m = 2, W = 0.003)
  AT (0, 0, 0.0022) RELATIVE src

  COMPONENT s2=Scatter_logger_stop(logger=s1)
AT(0,0,0) RELATIVE PREVIOUS

/*The iterator test code*/

COMPONENT a0=Arm()
AT(0,0,0) RELATIVE PREVIOUS


  //COMPONENT testwrite = Virtual_mcnp_ss_output(
  // )
  //AT (0, 0.0, 0.0) ABSOLUTE

COMPONENT iter1 = Scatter_log_iterator()
AT(0,0,0) RELATIVE PREVIOUS
EXTEND
%{
  //  printf("EK before/after?start and stop values:  %g %g \n",start,stop);  
%}


COMPONENT testwrite = Virtual_mcnp_ss_output(
 )
AT (0, 0.0, 0.0) ABSOLUTE

COMPONENT printout = Arm()
AT(0,0,0) RELATIVE PREVIOUS
EXTEND
%{
  /*print the neutron state*/
  //    printf("SCATTERLOG_ITERATOR: %llu %g %g %g  %g %g %g  %g  %g %g %g  %g  %d\n", \
  //  	     mcget_run_num(),x,y,z, vx, vy, vz, t,			\
  //  	     sx, sy, sz, p, INDEX_CURRENT_COMP);
  
  /*EK write ssw*/
  //  printf("EK before/after?stop and start values:  %g %g \n",stop,start);
  
%}
 
 
COMPONENT iter2 = Scatter_log_iterator_stop(iterator=iter1)
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT a1 = Arm()
AT (0,0,0) RELATIVE PREVIOUS
JUMP a0 WHEN(MC_GETPAR(iter2,loop))
 
/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END

