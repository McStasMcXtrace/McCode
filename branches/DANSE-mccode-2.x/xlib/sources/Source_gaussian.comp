/************************************************************************'
 * 
 * McXtrace X-ray tracing software
 * Copyright, All Rights Reserved
 * Risoe-DTU, Roskilde, Denmark
 *
 *
 * Component: Source_gaussian
 *
 * %I
 * Written by: Erik Knudsen
 * Date: February 11th, 2009
 * Version: 1.0 
 * Origin: Risoe
 * Release: McXtrace 0.1
 *
 * Gaussian cross-section source with focussing 
 * %D
 * A simple source model emitting photons from a gaussian distribution in the X-Y plane with the specified
 * standard deviations (in mm) into a cone of angular width gamma^-1. A square target centered on the beam (Z-axis)
 restricts the beam to that aperture.
 * Further, the beam is restricted to emit photons between E0+-dE keV, or lambda0+-dlambda, whichever is given.
 * Flux is given in the unit 
 * 
 * Example: Source_gaussian(sig_x=0.1,sig_y=0.1,distance=1,focus_xw,focus_yh, E0=sensible, dE=sensible)
 *
 *
 * %P
 * 
 * 
 */

DEFINE COMPONENT Source_gaussian
DEFINITION PARAMETERS ()
SETTING PARAMETERS (sig_x=1,sig_y=0,focus_xw=0,focus_yh=0,flux=1,distance=1,gamma=0,E0=0, dE=0, lambda=0,dlambda=-1,phase=-1)
OUTPUT PARAMETERS ()
STATE PARAMETERS (x,y,z,kx,ky,kz,phi,Ex,Ey,Ez,p)

DECLARE
%{
  double e,l,pmul;
%}

INITIALIZE
%{
  double fi_x,fi_y;
  /*input logic*/
  if (!sig_y) sig_y=sig_x;

  if (focus_xw)
    fi_x=atan(focus_xw/2.0/distance);
  else {
    printf("Source_gaussian (%s): Target area unmeaningful! (negative dist / focus_xw / focus_yh)\n ERROR - Exiting\n",
           NAME_CURRENT_COMP);
    exit(0);
  }
  if (focus_yh)
    fi_y=atan(focus_yh/2.0/distance);
  else {
    printf("Source_gaussian: (%s): Target area unmeaningful! (negative dist / focus_xw / focus_yh)\n ERROR - Exiting\n",
           NAME_CURRENT_COMP);
    exit(0);
  }

  if (E0){
    lambda=2*M_PI/(E0*E2K);
    if (dE) {
      dlambda=2*M_PI/(dE*E2K);
    } else {
      dlambda=0;
    }
  }else if (!lambda) {
    fprintf(stderr,"Source_gaussian (%s): Must specify either wavelength or energy distribution\n",NAME_CURRENT_COMP);
    exit(0);
  }

  /*calculate the X-ray weight from the flux*/
  if (flux){
    pmul=flux/mcget_ncount();
  }else{
    pmul=1/mcget_ncount();
  }

  /*if necessary adjust for not having the full gamma-window*/
  if (fi_x) pmul*=erf(fi_x/(gamma))-erf(-fi_x/(gamma));
  if (fi_y) pmul*=erf(fi_y/(gamma))-erf(-fi_y/(gamma));

%}

TRACE
%{
  /*draw random number from gaussian distribution in both x and y*/
  double xx=randnorm();
  double yy=randnorm();
  double k;

  x=xx*sig_x;
  y=yy*sig_y;
  z=0;

  /*draw random coordinates in the acceptance window*/
  kx= (focus_xw /2.0 * randpm1() -x)/distance;
  ky= (focus_yh/2.0 * randpm1() -y)/distance;
  kz= distance;
  NORM(kx,ky,kz);

  /*sample photon energy or wavelength - for now - do it uniformly in the window*/
  l=randpm1()*dlambda*0.5 + lambda;
  k=2*M_PI/l;
  kx*=k;
  ky*=k;
  kz*=k;
  
  /*randomly pick phase*/
  if (phase==-1){
    phi=rand01()*2*M_PI;
  }else{
    phi=phase;
  }

  /*set polarization vector*/
  Ex=0;Ey=0;Ez=0;

  p=pmul;


%}

MCDISPLAY
%{
  double radius;
  if (sig_x<sig_y) radius=sig_x;
  else radius=sig_y; 

  magnify("xy");
  circle("xy",0,0,0,radius);
%}

END
