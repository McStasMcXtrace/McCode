/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* %I
* Written by: Kim Lefmann
* Date: October 26, 2000
* Version: $Revision: 1.16 $
* Origin: Risoe
* Release: McStas 1.6
*
* A 2D Position-sensitive monitor. The shape is cylindrical with
the axis vertical. The monitor covers the whole cylinder (360 degrees).
*
* %D
* An (n times m) pixel PSD monitor with cylinder shape,
* vertical axis, centered at (0,0,0).
*
* Example: PSDcyl_monitor(nr=20, ny=20, filename="Output.cyl",
*           yheight=0.2, radius=0.1)
*
* %P
* INPUT PARAMETERS:
*
* yheight:  Height of detector (m)
* radius:   Radius of detector (m)
* nr:       Number of pixel (radial) columns (1)
* ny:       Number of pixel rows (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of neutron counts
* PSD_p:    Array of neutron weight counts
* PSD_p2:   Array of second moments
*
* %E
******************************************************************************/


DEFINE COMPONENT PSDcyl_monitor
DEFINITION PARAMETERS (nr=20, ny=20)
SETTING PARAMETERS (string filename=0, yheight=0.3, radius=1, restore_neutron=0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 
DECLARE
  %{
    double PSD_N[nr][ny];
    double PSD_p[nr][ny];
    double PSD_p2[nr][ny];
  %}
INITIALIZE
  %{
    int i,j;

    for (i=0; i<nr; i++)
     for (j=0; j<ny; j++)
     {
      PSD_N[i][j] = 0;
      PSD_p[i][j] = 0;
      PSD_p2[i][j] = 0;
     }
  %}
TRACE
  %{
    int i,j;
    double t0,t1,phi;

    if(cylinder_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius, yheight))
     {
      if(t0>0)
       {
         printf("FATAL ERROR: Did not come from within cylinder.\n");
         exit(1);
       };
      if(t1<0)
       {
         printf("FATAL ERROR: Did not hit cylinder from inside.\n");
         exit(1);
       }
      else
       {
        PROP_DT(t1);
                     /* Calculate pixel */
        if (fabs(y)<(yheight- 1e-10))
         {
          phi=atan2(x,z);
          i=(int)floor((phi/(2*PI))*nr);
          j=(int)floor((y/yheight)*ny);
          PSD_N[i][j]++;
          PSD_p[i][j] += p;
          PSD_p2[i][j] += p*p;
         }
        else
          ABSORB;  /* Should not be necessary */
       }
     }
    else
     {
      ABSORB;
     }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "PSD cylindrical monitor",
        "radial position [deg]",
        "yheight [m]",
        -180, 180, -yheight/2.0, yheight/2.0,
        nr, ny,
        &PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xz");
  circle("xz", 0, 0, 0, radius );

%}

END
