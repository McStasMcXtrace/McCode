/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: TOF_PSD_monitor_rad
*
* %Identification
* Written by: Kim Lefmann
* Modified from: PSD_monitor_rad by Henrich Frielinghaus, FZJuelich
* Date:       March 2012
* Origin:     UCPH
* Version:    $Revision: 1.1 $
* Release:    McStas 2.0
* Modified by:   
*
* Position-sensitive TOF monitor with radially averaging.
*
* %D
* TOF monitor that performs radial averaging.
* Comment: The intensity is given as two 2D files:
*          1) a radial sum vs. TOF
*          2) a radial average (i.e. intensity per area) vs. TOF
*
* Example: TOF_PSD_monitor_rad(rmax=0.2, nr=100, filename="Output.psd", filename_av="Output_av.psd")
*
* %P
* INPUT PARAMETERS:
*
* rmax:     Outer radius of detector (m)
* nr:       Number of concentric circles (1)
* filename: Name of file in which to store the detector image (text)
* filename_av: Name of file in which to store the averaged detector image (text)
* nt:       Number of time bins (1)
* tmin:     Beginning of time window (mu-s)
* tmax:     End of time window (mu-s)
* *
* OUTPUT PARAMETERS:
*
* PSDr_N:      Array of neutron counts
* PSDr_p:      Array of neutron weight counts
* PSDr_p2:     Array of second moments
* PSDr_av_N:   Array of neutron counts, averaged
* PSDr_av_p:   Array of neutron weight counts, averaged
* PSDr_av_p2:  Array of second moments, averaged
*
* %E
*******************************************************************************/

DEFINE COMPONENT TOF_PSD_monitor_rad
DEFINITION PARAMETERS (nr=100, nt=100)
SETTING PARAMETERS (string filename="", string filename_av="", rmax=0.2, tmin, tmax, restore_neutron=0)
OUTPUT PARAMETERS (TOFPSDr_N, TOFPSDr_p, TOFPSDr_p2, TOFPSDr_av_p, TOFPSDr_av_p2)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
POLARISATION PARAMETERS (sx,sy,sz)

DECLARE
  %{
    double tt_0, tt_1;
    double TOFPSDr_N[nt][nr];
    double TOFPSDr_p[nt][nr];
    double TOFPSDr_p2[nt][nr];
    double TOFPSDr_av_p[nt][nr];
    double TOFPSDr_av_p2[nt][nr];
  %}
INITIALIZE
  %{
    int i,j;

    tt_0=tmin*1e-6;
    tt_1=tmax*1e-6;
    for (i=0; i<nt; i++)
      for (j=0; j<nr; j++)
      {
        TOFPSDr_N[i][j] = 0;
        TOFPSDr_p[i][j] = 0;
        TOFPSDr_p2[i][j] = 0;
      }
  %}
TRACE
  %{
    int i,j;
    double dt,radpos;

    PROP_Z0;

    radpos = sqrt(x*x+y*y);
    i = floor((t-tt_0)*nt/(tt_1-tt_0));              /* Bin number */
    j = floor(nr*radpos/rmax);

    if (radpos < rmax && i>=0 && i < nt)
    {
      TOFPSDr_N[i][j]++;
      TOFPSDr_p[i][j] += p;
      TOFPSDr_p2[i][j]+= p*p;
      SCATTER;
    }

    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    int i,j;
    for(i=0; i<nt; i++)
     for(j=0; j<nr; j++)
      {
       TOFPSDr_av_p[i][j]  = TOFPSDr_p[i][j]  / (PI*rmax*rmax/(nr*nr)*(2*j+1.0));
       TOFPSDr_av_p2[i][j] = TOFPSDr_p2[i][j]
           / (PI*rmax*rmax/(nr*nr)*(2*j+1.0)) / (PI*rmax*rmax/(nr*nr)*(2*j+1.0));
      }
    DETECTOR_OUT_2D(
        "TOF PSD monitor radial sum",
        "Time-of-flight [\\gms]",
	"Radius [m]",
        tmin, tmax, 0, rmax,
	nt, nr,
	&TOFPSDr_N[0][0],&TOFPSDr_p[0][0],&TOFPSDr_p2[0][0],
        filename);
    DETECTOR_OUT_2D(
        "TOF PSD monitor radial average",
        "Time-of-flight [\\gms]",
	"Radius [m]",
        tmin, tmax, 0, rmax,
	nt, nr,
        &TOFPSDr_N[0][0],&TOFPSDr_av_p[0][0],&TOFPSDr_av_p2[0][0],
        filename_av);
  %}

MCDISPLAY
%{
  magnify("xy");
  circle("xy",0,0,0,rmax);
%}

END
