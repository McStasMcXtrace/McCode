/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: Test_Fermi
*
* %Identification
* Written by: E. Farhi [farhi@ill.fr]
* Date: Sept 1st, 2008
* Origin: ILL
* Release: McStas CVS_090316
* Version: $Revision: 1.6 $
* %INSTRUMENT_SITE: Tests_optics
*
* Cross comparison of Fermi Chopper components
*
* %Description
* Cross comparison of Fermi Chopper components, using McStas and
* contributed components, as well as rotating collimator approximations. It 
* shows that all implementations are equivalent. However, approximating rotating
* guide are 30% faster than McStas Fermi chopper, and on the other hand
* Vitess implementation is 100 times slower.
*
* %Example: Fermi=1 Detector: Monitor2_xt_I=0.00051256
* %Example: Fermi=2 Detector: Monitor2_xt_I=0.00058198
* %Example: Fermi=3 Detector: Monitor2_xt_I=0.00051377
* %Example: Fermi=4 Detector: Monitor2_xt_I=0.000572427
* %Example: Fermi=5 Detector: Monitor2_xt_I=0.00058003
*
* %Parameters
* Fermi: [1] Choice of Fermi chopper component to test, with
*            1=FermiChopper, 
*            2=Vitess_ChopperFermi,
*            3=FermiChopper_ILL, 
*            4=rotating Guide_gravity,
*            5=rotating Guide_channeled
*
*
* %End
*******************************************************************************/

DEFINE INSTRUMENT Test_Fermi(int Fermi=1)

INITIALIZE
%{
  printf("\n%s: ", NAME_CURRENT_COMP);
  switch (Fermi) {
  case 1:
    printf("Using FermiChopper\n"); break;
  case 2:
    printf("Using Vitess_ChopperFermi\n"); break;
  case 3:
    printf("Using FermiChopper_ILL\n"); break;
  case 4:
    printf("Using rotating Guide_gravity\n"); break;
  case 5:
    printf("Using rotating Guide_channeled\n"); break;
  }
%}

TRACE

COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE


COMPONENT Source = Source_gen(
   focus_xw = 0.05, focus_yh = 0.05, lambda0 = 3.39, dlambda = 0.3,
   yheight = 0.05, xwidth = 0.05)
  AT (0, 0, 0) RELATIVE PREVIOUS
EXTEND %{
  /* 1 ms triangle time window */
  // t = randtriangle()*1e-3;  /* trianglular distribution */
  t = randpm1()*1e-3;          /* rectangular distribution */
%}

COMPONENT Monitor1_xt = Monitor_nD(
    options = "multiple x y time, all auto", xwidth = 0.05, yheight = 0.05)
  AT (0, 0, 1) RELATIVE PREVIOUS

COMPONENT FC_Position = Arm( )
  AT (0, 0, 0.1) RELATIVE PREVIOUS

COMPONENT FC_GuideG = Guide_gravity(
    w1 = 0.05, h1 = 0.05, l = 0.012, R0 = 0.0, nslit=120, d=0, nu=100)
  WHEN (Fermi == 4)
  AT (0, 0, -0.012/2.0) RELATIVE FC_Position
EXTEND %{
  if (!SCATTERED) ABSORB;
%}

COMPONENT FC_GuideC = Guide_channeled(
    w1 = 0.05, h1 = 0.05, l = 0.012, R0 = 0.0, nslit=120, d=0, nu=100)
  WHEN (Fermi == 5)
  AT (0, 0, -0.012/2.0) RELATIVE FC_Position
EXTEND %{
  if (!SCATTERED) ABSORB;
%}

COMPONENT FC_McStas = FermiChopper(
    radius = 0.1, nu = 100, xwidth = 0.05, yheight = 0.05, nslit=120, length=0.012)
  WHEN (Fermi == 1)
  AT (0, 0, 0) RELATIVE FC_Position

COMPONENT FC_ILL = FermiChopper_ILL(
    radius = 0.1, nu = 100, yheight = 0.05, 
    nslit = 120, length = 0.012, xwidth = 0.05)
  WHEN (Fermi ==3)
  AT (0, 0, 0) RELATIVE FC_Position

COMPONENT Fake_Origin = Arm()
  AT (0,0,0) ABSOLUTE

COMPONENT FC_Vitess = Vitess_ChopperFermi(
    sGeomFileName = "FC_geom_str.dat", Nchannels = 120, wallwidth=0,
    freq = 100, height = 0.05, width = 0.05, depth = 0.012,
    diameter = 0.1)
  WHEN (Fermi == 2)
  AT (0, 0, 1.1) RELATIVE PREVIOUS

COMPONENT Monitor2_xt = Monitor_nD(
    options = "multiple x y time limits=[0 3e-4]", xwidth = 0.05, yheight = 0.05)
  AT (0, 0, .1) RELATIVE FC_Position

END



