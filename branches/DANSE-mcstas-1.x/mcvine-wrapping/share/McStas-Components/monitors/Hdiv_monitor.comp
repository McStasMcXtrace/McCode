/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2007, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Hdiv_monitor
*
*%I
* Written by: KL,
* Date: Nov. 11, 1998
* Version: $Revision: 1.12 $
* Origin: Risoe
* Release: McStas 1.11
* Modified by: Thomas Hansen,  December, 1999
*
* A divergence sensitive monitor.
*
*%D
* A divergence sensitive monitor. The counts are distributed in
* n pixels.
*
* Example: Hdiv_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*           nh=20, filename="Output.hd", h_maxdiv=2)
*
*%P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* nh:       Number of pixel rows (1)
* h_maxdiv  Maximal vertical divergence detected (degrees)
* filename: Name of file in which to store the detector image (text)
*
* OUTPUT PARAMETERS:
*
* Div_N:    Array of neutron counts
* Div_p:    Array of neutron weight counts
* Div_p2:   Array of second moments
*
*%E
*/


DEFINE COMPONENT Hdiv_monitor
DEFINITION PARAMETERS (nh=20, string filename)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0, h_maxdiv=2 )
OUTPUT PARAMETERS (Div_N, Div_p, Div_p2)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
DECLARE
  %{
    double *Div_N;
    double *Div_p;
    double *Div_p2;
  %}
INITIALIZE
  %{
    int i;

    Div_N = (double *)malloc(nh*sizeof(double));
    Div_p = (double *)malloc(nh*sizeof(double));
    Div_p2 = (double *)malloc(nh*sizeof(double));

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("Hdiv_monitor: %s: Null detection area !\n"
                   "ERROR         (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nh; i++)
     {
/*       printf("HDiv_monitor: %d\n",i); */
      Div_N[i] = 0;
      Div_p[i] = 0;
      Div_p2[i] = 0;
     }
/*     printf("%d %d %d\n",i,nh,h_maxdiv); */
  %}
TRACE
  %{
    int i;
    double h_div;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      h_div = RAD2DEG*atan2(vx,vz);
      if (h_div < (double)h_maxdiv && h_div > -(double)h_maxdiv)
      {
        i = floor((h_div + (double)h_maxdiv)*nh/(2.0*(double)h_maxdiv));
        Div_N[i]++;
        Div_p[i] += p;
        Div_p2[i] += p*p;
        SCATTER;
      }
    }
  %}
SAVE
  %{
    DETECTOR_OUT_1D(
        "horizontal divergence monitor",
        "horizontal divergence [deg]",
        "Intensity",
        "divergence", -h_maxdiv, h_maxdiv, nh,
        &Div_N[0],&Div_p[0],&Div_p2[0],
        filename);
  %}

FINALLY
  %{
    free(Div_N); free(Div_p); free(Div_p2);
  %}

MCDISPLAY
  %{
    magnify("xy");
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
%}


END
