/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2007, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor_4PI
*
* %I
* Written by: Kim Lefmann and Kristian Nielsen
* Date: April 17, 1998
* Version: $Revision: 1.26 $
* Origin: Risoe
* Release: McStas 1.11c
*
* Spherical position-sensitive detector.
*
* %D
* An (n times m) pixel spherical PSD monitor using a cylindrical projection.
* Mostly for test and debugging purposes.
*
* Example: PSD_monitor_4PI(radius=0.1,
            nx=90, ny=90, filename="Output.psd")
*
* %P
* INPUT PARAMETERS:
*
* radius:   Radius of detector (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* filename: Name of file in which to store the detector image (text)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of neutron counts
* PSD_p:    Array of neutron weight counts
* PSD_p2:   Array of second moments
*
* %L
* <A HREF="http://neutron.risoe.dk/mcstas/components/tests/powder/">Test
* results</A> (not up-to-date).
*
* %E
*******************************************************************************/


DEFINE COMPONENT PSD_monitor_4PI
DEFINITION PARAMETERS (nx=90, ny=90, string filename)
SETTING PARAMETERS (radius)
OUTPUT PARAMETERS (PSD_N_00, PSD_p_00, PSD_p2_00)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)

SHARE
%{
// ----------- added by Jiao Lin --------
// ----------  header for SHARE ----------
// ----------- added by Jiao Lin --------
inline double & element_2Darr(double *array2D, int dim_y, int i, int j) 
  {
    return *(array2D+j+i*dim_y);
  }
#define PSD_N( i,  j)  element_2Darr(PSD_N_00, ny, i, j)
#define PSD_p( i,  j)  element_2Darr(PSD_p_00, ny, i, j)
#define PSD_p2( i,  j)  element_2Darr(PSD_p2_00, ny, i, j)  

// ----------- added by Jiao Lin --------
// ----------  implementation for SHARE ----------
// ----------- added by Jiao Lin --------
%}


DECLARE
%{
  double *PSD_N_00, *PSD_p_00, *PSD_p2_00;
  double save_x, save_y, save_z, save_vx, save_vy, save_vz, save_t;
%}

INITIALIZE
%{
  int i,j;

  PSD_N_00 = (double *)malloc(nx*ny*sizeof(double));
  PSD_p_00 = (double *)malloc(nx*ny*sizeof(double));
  PSD_p2_00 = (double *)malloc(nx*ny*sizeof(double));

  for (i=0; i<nx; i++)
    for (j=0; j<ny; j++)
    {
      PSD_N(i,j) = 0;
      PSD_p(i,j) = 0;
      PSD_p2(i,j) = 0;
    }
%}

TRACE
%{
// #define DEBUG

  double t0, t1, phi, theta;
  int i,j;

#ifdef DEBUG
  std::cout 
      << "r=(" 
      << x << ","
      << y << ","
      << z << "), "
      << "v=("
      << vx << ","
      << vy << ","
      << vz << ")"
      << std::endl
      ;
#endif

  if(sphere_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius) && t1 > 0)
  {
    save_vx = vx; save_vy = vy; save_vz = vz;
    save_x = x; save_y = y; save_z = z;
    save_t = t;

    if(t0 < 0)
      t0 = t1;
    /* t0 is now time of intersection with the sphere. */
    PROP_DT(t0);
    phi = atan2(x,z);
    i = floor(nx*(phi/(2*PI)+0.5));
    if(i >= nx)
      i = nx-1;                      /* Special case for phi = PI. */
    else if(i < 0)
      i = 0;
    theta=asin(y/radius);
    j = floor(ny*(theta+PI/2)/PI+0.5);
    if(j >= ny)
      j = ny-1;                      /* Special case for y = radius. */
    else if(j < 0)
      j = 0;

#ifdef DEBUG
    std::cout 
      << "propagated r=(" 
      << x << ","
      << y << ","
      << z << "), "
      << "theta=" << theta << ", "
      << "phi=" << phi 
      << std::endl;
    std::cout
      << "i=" << i <<", "
      << "j=" << j 
      << std::endl;
#endif
    PSD_N(i,j)++;
    PSD_p(i,j) += p;
    PSD_p2(i,j) += p*p;
    SCATTER;

    vx = save_vx; vy = save_vy; vz = save_vz;
    x = save_x; y = save_y; z = save_z;
    t = save_t;
  }
%}

SAVE
%{
  DETECTOR_OUT_2D(
    "4PI PSD monitor",
    "Longitude [deg]",
    "Lattitude [deg]",
    -180, 180, -90, 90,
    nx, ny,
    PSD_N_00,PSD_p_00,PSD_p2_00,
    filename);
%}

FINALLY
%{
  free(PSD_N_00); free(PSD_p_00); free(PSD_p2_00);
%}


MCDISPLAY
%{
  magnify("");
  circle("xy",0,0,0,radius);
  circle("xz",0,0,0,radius);
  circle("yz",0,0,0,radius);
%}

END
