/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2007, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_TEW_monitor
*
* %I
* Written by:  F. Gallmeier
* Date: August 2010
* Version: $Revision: 1.0 $
* Origin:  SNS
* Release: McStas 1.12
*
* Rectangular PSD monitor bined in x, y, and time or energy or wavelength .
*
* %P
* INPUT PARAMETERS:
*
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* nxchan:   Number of x bins (1)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* nychan:   Number of x bins (1)
* bmin:     Lower time/energy/wavelength limit (ms/meV/AA)
* bmax:     Upper time/energy/wavelength limit (ms/meV/AA)
* deltab:   time/energy/wavelength bin width
* nbchan:   Number of tow bins (1)
* type:     detector type "time"/"energy"/"wavelength" (string)
* filename: Name of file in which to store the detector image (string)
* format:   "table"- binned values on ascii file; "detector_out"- McStas format ascii
* restore_neutron: If set >0, the monitor does not influence the neutron state
*
* OUTPUT PARAMETERS:
*
* TOF_N:    Array of neutron counts
* TOF_p:    Array of neutron weight counts
* TOF_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT PSD_TEW_monitor
DEFINITION PARAMETERS (nxchan=20, nychan=20, nbchan=20, string type="time", string filename, string format="table")
SETTING PARAMETERS (xwidth=0, yheight=0, bmin=0, bmax=0, deltab=0, restore_neutron=0)
OUTPUT PARAMETERS (TOF_N_00, TOF_p_00, TOF_p2_00, b_min, b_max, delta_b, x_min, x_max, delta_x, y_min, y_max, delta_y)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
POLARISATION PARAMETERS (sx,sy,sz)

SHARE
%{
// ----------- added by Alex Dementsov --------
// ----------  header for SHARE ----------
// ----------- added by Alex Dementsov --------
inline double & element_3Darr(double *array3D, int dim_y, int dim_z, int i, int j, int k)
  {
    return *(array3D + i*dim_y*dim_z + j*dim_z + k );
  }
#define TOF_N(i,j,k)  element_3Darr(TOF_N_00, nychan, nbchan, i, j, k)
#define TOF_p(i,j,k)  element_3Darr(TOF_p_00, nychan, nbchan, i, j, k)
#define TOF_p2(i,j,k)  element_3Darr(TOF_p2_00, nychan, nbchan, i, j, k)

// ----------- added by Alex Dementsov --------
// ----------  implementation for SHARE ----------
// ----------- added by Alex Dementsov --------
#include <string.h>

%}


DECLARE
  %{
    double *TOF_N_00, *TOF_p_00, *TOF_p2_00;
    double b_min, b_max, delta_b;
    double x_min, x_max, delta_x;
    double y_min, y_max, delta_y;
  %}
INITIALIZE
  %{
    int i, j, k;

    TOF_N_00    = (double *)malloc(nxchan*nychan*nbchan*sizeof(double));
    TOF_p_00    = (double *)malloc(nxchan*nychan*nbchan*sizeof(double));
    TOF_p2_00   = (double *)malloc(nxchan*nychan*nbchan*sizeof(double));

    if(!(strcmp(type,"time")==0) && !(strcmp(type,"energy")==0) && !(strcmp(type,"wavelength")==0)) {
       printf("PSD_TEW: error in type keyword\n stop\n");
       exit(0);
    }
    if(!(strcmp(format,"table")==0) && !(strcmp(format,"McStas")==0)) {
       printf("PSD_TEW: error in format keyword\n");
       printf("PSD_TEW: data are not recorded!");
       exit(0);
    }
    if ((xwidth<=0) || (yheight<0)) {
       printf("PSD TOFEL: %s: Null detection area !\n" 
              "ERROR        (xwidth,yheight). Exiting",
              NAME_CURRENT_COMP);
       exit(0);
    }

    if ((bmin >= bmax) && (bmax > 0)) {
       printf("PSD tew: %s:  bmin larger bmax !\n" 
              "ERROR        (bmin,bmax). Exiting",
              NAME_CURRENT_COMP);
        exit(0);
    }


/*    if (nxchan<=0) {nxchan = 1;}; */
    x_min=-xwidth/2;       
    x_max=-x_min;
    delta_x=xwidth/nxchan;

/*    if (nychan<=0) {nychan = 1;}; */
    y_min=-yheight/2;
    y_max=-y_min;
    delta_y=yheight/nychan;

/*    if (nbchan<=0) {nbchan = 1;}; */
    if (bmax!=0) {
        b_max=bmax;
        b_min=bmin;
        delta_b=(b_max-b_min)/nbchan;
    }
    else {
        delta_b=deltab;
        b_min=0;
        b_max=nbchan*delta_b+b_min;
    }

    for (i=0; i<nxchan; i++) {
	for (j=0; j<nychan; j++) {
	    for (k=0; k<nbchan; k++) {
                TOF_N(i,j,k) = 0;
                TOF_p(i,j,k) = 0;
                TOF_p2(i,j,k) = 0;
	    }
	}
    }
    printf("PSD_TEW:\n");
    printf("x_min= %10.5f, x_max= %10.5f  delta_x= %10.5f\n", x_min, x_max, delta_x);
    printf("y_min= %10.5f, y_max= %10.5f  delta_y= %10.5f\n", y_min, y_max, delta_y);
    printf("b_min= %10.5f, b_max= %10.5f  delta_b= %10.5f\n", b_min, b_max, delta_b);
  %}
TRACE
  %{
    int i, j, k;
    double t0 = 0;
    double t1 = 0;
    double bb = 0;

/*    printf("xi= %10.5f  yi= %10.5f  zi= %10.5f\n", x,y,z); */
    if(strcmp(type,"time")==0) {
       bb = t*1e3;
    }
    else if(strcmp(type,"energy")==0) {
       bb = VS2E*(vx*vx + vy*vy + vz*vz);
    }
    else if(strcmp(type,"wavelength")==0) {
       bb = (2*PI/V2K)/sqrt(vx*vx + vy*vy + vz*vz);
    }
    if(bb>=b_min && bb<=b_max && box_intersect(&t0,&t1,x,y,z,vx,vy,vz,x_max-x_min,y_max-y_min,0.0001)) {
       PROP_DT(t0);
/*       printf("xf= %10.5f yf= %10.5f  zf= %10.5f\n", x,y,z); */
    
       i = floor((x-x_min)/delta_x);              /* x bin number */
       if(i >= nxchan) {i = nxchan - 1;}
       if(i < 0) {i=0;}

       j = floor((y-y_min)/delta_y);              /* y bin number */
       if(j >= nychan) {i = nychan - 1;}
       if(j < 0) {j=0;}

         
       k = floor((bb-b_min)/delta_b);            /* b bin number */
       if(k >= nbchan) {k = nbchan - 1;}
       if(k < 0) {i=0;}

       TOF_N(i,j,k)++;
       TOF_p(i,j,k) += p;
       TOF_p2(i,j,k) += p*p;
       SCATTER;

       //if (restore_neutron) RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    char third_ordinate[15];
    char b_units[11];
    double b_multiplier;
    if(strcmp(type,"time")==0) {
       b_multiplier=0.1;
    }
    else if(strcmp(type,"energy")==0) {
       b_multiplier=0.1;
    }
    else if(strcmp(type,"wavelength")==0) {
       b_multiplier=1e-4;
    }

    if(strcmp(format,"McStas")==0) {
       if(strcmp(type,"time")==0) {
          DETECTOR_OUT_3D(
            "Time-of-flight 2D monitor",
            "x-coordinate [m]",
            "y-coordinate [m]",
            "time [ms]",
            "x", "y", type, 
             x_min, x_max, y_min, y_max, b_min, b_max, 
             nxchan, nychan, nbchan,
             TOF_N_00,TOF_p_00,TOF_p2_00,
             filename);
       }
       else if(strcmp(type,"energy")==0) {
          DETECTOR_OUT_3D(
            "Time-of-flight 2D monitor",
            "x-coordinate [m]",
            "y-coordinate [m]",
            "energy [meV]",
            "x", "y", type, 
             x_min, x_max, y_min, y_max, b_min, b_max, 
             nxchan, nychan, nbchan,
             TOF_N_00,TOF_p_00,TOF_p2_00,
             filename);
       }
       else if(strcmp(type,"wavelength")==0) {
          DETECTOR_OUT_3D(
            "Time-of-flight 2D monitor",
            "x-coordinate [m]",
            "y-coordinate [m]",
            "wavelength [AA]",
            "x", "y", type, 
             x_min, x_max, y_min, y_max, b_min, b_max, 
             nxchan, nychan, nbchan,
             TOF_N_00, TOF_p_00, TOF_p2_00,
             filename);
       }
    }
    else if(strcmp(format,"table")==0) {
       int i, j, k, N;
       double I, ERR, stdv, one_over_counts;
       FILE *fp;
       one_over_counts = 1.0/mcget_run_num();
       N=0;
       I=0;
       ERR=0;
       for(i=0; i<nxchan; i++){
          for(j=0; j<nychan; j++){
             for(k=0;k<nbchan;k++) {
                N += TOF_N(i,j,k);
                I += TOF_p(i,j,k);
                ERR += TOF_p2(i,j,k);
             }
          }
       }
       if(I>0) ERR=sqrt(ERR/I/I-one_over_counts);
       printf("Detector: %s_I=%12.5e %s_ERR=%12.5e %s_N=%d %s%s%s\n",
               NAME_CURRENT_COMP, I, 
               NAME_CURRENT_COMP, I*ERR,
               NAME_CURRENT_COMP, N,
               "\"",filename,"\"");

       fp=fopen(filename,"w");
       fprintf(fp,"# TOF 2D monitor output\n");
       fprintf(fp,"# \n");    
       fprintf(fp,"#     counts=%10d\n", N);
       fprintf(fp,"#     total intensity=%10.4e +/- %10.4e neutron counts\n", I, I*ERR);
       fprintf(fp,"# \n");    
       if(strcmp(type,"time")==0) {
          fprintf(fp,"#                         intensity +- stdv [n/cm^2/s] \n");
          fprintf(fp,"# x [m]       y [m]       time [ms]\n ");
       }
       else if(strcmp(type,"energy")==0) {
          fprintf(fp,"#                         intensity +- stdv [n/cm^2/eV] \n");
          fprintf(fp,"# x [m]       y [m]       energy [meV]\n ");
       }
       else if(strcmp(type,"wavelength")==0) {
          fprintf(fp,"#                         intensity +- stdv [n/cm^2/AA] \n");
          fprintf(fp,"# x [m]       y [m]       wavelength [AA]\n ");
       }
       fprintf(fp,"#                       ");    
       for(k=0;k<=nbchan;k++) {
	  fprintf(fp,"  %10.4f         ",b_min+k*delta_b);
       }
       fprintf(fp,"\n");

       fprintf(fp,"#\n");
       for(i=0; i<nxchan; i++){
          for(j=0; j<nychan; j++){
             fprintf(fp,"  %10.4f  %10.4f", x_min+delta_x*(i+0.5), y_min+delta_y*(j+0.5));
             for(k=0;k<nbchan;k++) {
                stdv =0.0;
                if(TOF_p2(i,j,k)>0) {
                   stdv = TOF_p2(i,j,k)/TOF_p(i,j,k)/TOF_p(i,j,k)-one_over_counts;
                }
                if(stdv>1){stdv=1.0;}
                else if(stdv<0){stdv=0.0;}
                else{stdv=sqrt(stdv);}
                fprintf(fp,"  %10.4e  %7.5f",TOF_p(i,j,k)/delta_x/delta_y/delta_b*b_multiplier,stdv);
             }
             fprintf(fp,"\n");
          }	  
          fprintf(fp,"\n"); 
       }    
       fclose(fp);
    }
    else {
       printf("PSD_TEW: error in format keyword\n");
       printf("PSD_TEW: data are not recorded!");
       exit(0);
    }
  %}

FINALLY
%{
  free(TOF_N_00); free(TOF_p_00); free(TOF_p2_00);
%}


MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)x_min, (double)y_min, 0.0,
               (double)x_max, (double)y_min, 0.0,
               (double)x_max, (double)y_max, 0.0,
               (double)x_min, (double)y_max, 0.0,
               (double)x_min, (double)y_min, 0.0);
%}

END
