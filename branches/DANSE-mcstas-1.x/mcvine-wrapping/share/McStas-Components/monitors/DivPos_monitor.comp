/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2007, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: DivPos_monitor
*
* %I
* Written by: Kristian Nielsen
* Date: 1999
* Version: $Revision: 1.18 $
* Origin: Risoe
* Release: McStas 1.11
*
* Divergence/position monitor (acceptance diagram).
*
* %D
* 2D detector for intensity as a function of both horizontal position
* and wavelength. This gives information similar to an aceptance diagram used
* eg. to investigate beam profiles in neutron guides.
*
* Example: DivPos_monitor(npos=20, ndiv=20, filename="Output.dip",
*           xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, maxdiv=2)
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* npos:     Number of bins in position (1)
* ndiv:     Number of bins in divergence (1)
* maxdiv:   Maximal horizontal divergence detected (degrees)
* filename: Name of file in which to store the detector image (string)
*
* OUTPUT PARAMETERS:
*
* Div_N:    Array of neutron counts
* Div_p:    Array of neutron weight counts
* Div_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT DivPos_monitor
DEFINITION PARAMETERS (npos=20, ndiv=20, string filename)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0, maxdiv=2)
OUTPUT PARAMETERS (Div_N_00, Div_p_00, Div_p2_00)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)

SHARE
%{
// ----------  header for SHARE ----------
inline double & element_2Darr(double *array2D, int dim_y, int i, int j) 
  {
    return *(array2D+j+i*dim_y);
  }
#define Div_N( i,  j)  element_2Darr(Div_N_00, ndiv, i, j)
#define Div_p( i,  j)  element_2Darr(Div_p_00, ndiv, i, j)
#define Div_p2( i,  j)  element_2Darr(Div_p2_00, ndiv, i, j)  

// ----------  implementation for SHARE ----------
%}

DECLARE
  %{
    double *Div_N_00, *Div_p_00, *Div_p2_00;
  %}

INITIALIZE
  %{
    Div_N_00 = (double *)malloc(npos*ndiv*sizeof(double));
    Div_p_00 = (double *)malloc(npos*ndiv*sizeof(double));
    Div_p2_00 = (double *)malloc(npos*ndiv*sizeof(double));

    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("DivPos_monitor: %s: Null detection area !\n"
                   "ERROR           (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<npos; i++)
     for (j=0; j<ndiv; j++)
     {
      Div_N(i, j) = 0;
      Div_p(i, j) = 0;
      Div_p2(i, j) = 0;
     }
  %}
TRACE
  %{
    int i,j;
    double div;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      div = RAD2DEG*atan2(vx,vz);
      if (div < maxdiv && div > -maxdiv)
      {
        i = floor((x - xmin)*npos/(xmax - xmin));
        j = floor((div + maxdiv)*ndiv/(2.0*maxdiv));
        Div_N(i, j)++;
        Div_p(i, j) += p;
        Div_p2(i, j) += p*p;
        SCATTER;
      }
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "Position-divergence monitor",
        "pos [m]",
        "divergence [deg]",
        xmin, xmax, -maxdiv, maxdiv,
        npos, ndiv,
        Div_N_00, Div_p_00, Div_p2_00,
        filename);
  %}

FINALLY
%{
  free(Div_N_00); free(Div_p_00); free(Div_p2_00);
%}

MCDISPLAY
  %{
    magnify("xy");
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
%}

END
