/*****************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2007, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Monochromator_pol
*
* %I
*
* Written by: Peter Christiansen
* Date: 2006
* Version: $Revision: 1.3 $
* Origin: RISOE
* Release: McStas 1.11
*
* Flat polarizaing monochromator crystal.
*
* %D
* Based on Monochromator_flat.
* Flat, infinitely thin mosaic crystal, useful as a monochromator or analyzer.
* For an unrotated monochromator component, the crystal surface lies in the Y-Z
* plane (ie. parallel to the beam).
* The mosaic and d-spread distributions are both Gaussian.
* Neutrons are just reflected (billard ball like). No correction is done for 
* mosaicity of reflecting crystal.
* The crystal is assumed to be a ferromagnet with spin pointing up 
* eta-tilde = (0, 1, 0) (along y-axis), so that the magnetic field is 
* pointing opposite (0, -|B|, 0).
*
* The polarisation is done by defining the reflectivity for spin up
* (Rup) and spin down (Rdown) (which can be negative, see now!) and
* based on this the nuclear and magnetic structure factors are
* calculated:
* FM = sign(Rup)*sqrt(|Rup|) + sign(Rdown)*sqrt(|Rdown|)
* FN = sign(Rup)*sqrt(|Rup|) - sign(Rdown)*sqrt(|Rdown|)
* and the physics is calculated as 
* Pol in = (sx_in, sy_in, sz_in) 
* Reflectivity R0 = FN*FN + 2*FN*FM*sy_in + FM*FM 
*                (= |Rup| + |Rdown| (for sy_in=0))
* Pol out:
*	sx = (FN*FN - FM*FM)*sx_in/R0;
*	sy = ((FN*FN - FM*FM)*sy_in + 2*FN*FM + FM*FM*sy_in)/R0;
*	sz = (FN*FN - FM*FM)*sz_in/R0;
*
* These equations are taken from: 
* Lovesey: "Theory of neutron scattering from condensed matter, Volume
* 2", Eq. 10.96 and Eq. 10.110
*
* This component works with gravity (uses PROP_X0).
*
* Example: Monochromator_pol(zw=0.2, yh=0.2, mosaic=30.0, dspread=0.0025,
*                            Rup=1.0, Rdown=0.0, Q=1.8734)
*
* %P
* INPUT PARAMETERS:
*
* zw     : Width of crystal (m)
* yh     : Height of crystal (m)
* mosaic : Mosaicity (FWHM) (arc minutes)
* dspread: Relative d-spread (FWHM) (1)
* Q      : Magnitude of scattering vector (AA-1)
* Rup    : Reflectivity of neutrons with polarization up (1)
* Rdown  : Reflectivity of neutrons with polarization down (1)
*
* optional parameters
* DM:      monochromator d-spacing instead of Q = 2*pi/DM (Angstrom)
* pThreshold: if probability>pThreshold then accept and weight else random
* debug  : if debug > 0 print out some info about the calculations 
*
* %E
*****************************************************************************/

DEFINE COMPONENT Monochromator_pol
DEFINITION PARAMETERS ()
SETTING PARAMETERS (zw, yh, mosaic=30.0, dspread=0, Q=1.8734, DM=0, pThreshold=0, Rup = 1, Rdown =1, int debug=0)
OUTPUT PARAMETERS (mos_rms, d_rms, mono_Q, FN, FM)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
POLARISATION PARAMETERS (sx,sy,sz)

SHARE
%{
  %include "pol-lib"
  %}

DECLARE
%{
#include <assert.h>

  double mos_rms; /* root-mean-square of mosaic, in radians */
  double d_rms;   /* root-mean-square of d-spread, in AA */
  double mono_Q;
  
  double FN; /* Unit cell nuclear structure factor */
  double FM; /* Unit cell magnetic structure factor */
  %}

INITIALIZE
%{
  mos_rms = MIN2RAD*mosaic/sqrt(8*log(2));
  
  mono_Q = Q;
  if (DM != 0) 
    mono_Q = 2*PI/DM;
  
  DM = 2*PI/mono_Q;
  d_rms = dspread*DM/sqrt(8*log(2));
  
  // calculate the unit cell nuclear and magnetic structure factors
  if(debug > 0)
    printf("Rup: %f, Rdown: %f\n", Rup, Rdown);

  GetMonoPolFNFM(Rup, Rdown, &FN, &FM);

  if(debug > 0)
    printf("FN: %f, FM: %f\n", FN, FM);
%}

TRACE
%{
  double y1, z1, t1, dt, vel;
  double sinTheta, lambdaBragg, lambda, dLambda2, sigmaLambda2, p_reflect;
  double R0; /* reflection probability based on FN and FM */
  double sx_in, sy_in, sz_in;
  int i;
  
  /* Propagate to crystal */
  PROP_X0;

  if (inside_rectangle(z, y, zw, yh)) {/* Intersect the crystal? */
    
    // calculate sin(Bragg angle)
    vel = sqrt(vx*vx + vy*vy + vz*vz);
    sinTheta = abs(vx)/vel; 
    
    // calculate lambdaBragg
    lambdaBragg = 2.0*DM*sinTheta;
    
    // calculate lambda of neutron
    lambda = 2*PI/(V2K*vel);
    
    
    // calculate deltaLambda squared and sigmaLambda squared
    dLambda2 = (lambda-lambdaBragg)*(lambda-lambdaBragg);
    // The sigmaLambda is propagated by differentiating thge bragg 
    // condition: Lambda = 2*d*sinTheta
    sigmaLambda2 = 2.0*2.0 * sinTheta*sinTheta * d_rms*d_rms+
      2.0*2.0 * DM*DM * (1.0-sinTheta*sinTheta) * mos_rms*mos_rms;
    
    // calculate peak reflection probability
    GetMonoPolRefProb(FN, FM, sy, &R0);
    
    // calculate reflection probability
    p_reflect = R0*exp(-dLambda2/(2.0*sigmaLambda2));      
    
    if(debug > 0) {
      printf("\n Lambda: %f, Lambda_Bragg: %f\n", lambda, lambdaBragg);
      printf("sigmaLambda: %f, R0: %f, p_reflect: %f\n", 
	     sqrt(sigmaLambda2), R0, p_reflect);
      printf("S_in:  (%f, %f, %f)\n", sx, sy, sz);
    }
    
    if((pThreshold>0 && p_reflect>pThreshold) || rand01()<p_reflect) { 
      /* Reflect */
      
      // scale weight if neutron was accepted because of threshold
      if(pThreshold>0 && p_reflect>pThreshold)
	p*=p_reflect;
      
      vx = -vx;
      
      // Outgoing polarisation
      SetMonoPolRefOut(FN, FM, R0, &sx, &sy, &sz);
      
      if(debug > 0)
	printf("S_out: (%f, %f, %f)\n", sx, sy, sz);
      
      assert(sx*sx+sy*sy+sz*sz <= 1);
      
      SCATTER;
    } /* End MC choice to reflect or transmit neutron */
  } /* End intersect the crystal */
  
  %}

MCDISPLAY
%{
  magnify("zy");
  rectangle("yz", 0, 0, 0, zw, yh);
  %}

END
