''' UI classes. 

Some autogenerated (do not edit).

@author: jaga
'''
from PyQt4 import QtCore, QtGui, Qsci
from PyQt4.Qsci import QsciLexerPython


''' View class containing all windows and dialogs.
ALL explicit ui widget updates MUST be handled by this class
'''
class McView(object):
    def __init__(self):
        # create main window
        self.__mw = McMainWindow()
        self.mwui = self.__mw.ui
        self.mwui.lblInstrument.setText("")
                
        #if self.ew == None:
        self.ew = McCodeEditorWindow()
            
    def showMainWindow(self):
        self.__mw.show()

    def showCodeEditorWindow(self, instr=''):
        self.ew.initCodeEditor(instr)
        self.ew.show()
    
    def closeCodeEditorWindow(self):
        self.ew.close()
        
    ''' Update UI data
    '''
    def updateInstrumentLabel(self, labels):
        self.mwui.lblInstrument.setText(labels[0])
        
    def updateStatus(self, text=''):
        self.mwui.statusbar.showMessage(text)
        
    def updateLog(self, text='', guiMsg=False, error=False):
        if guiMsg:
            if error:
                self.mwui.txtbrwMcgui.setTextColor(QtGui.QColor('red'))
            else:
                self.mwui.txtbrwMcgui.setTextColor(QtGui.QColor('black'))
            self.mwui.txtbrwMcgui.append(text)
        else:
            if error:
                self.mwui.txtbrwSim.setTextColor(QtGui.QColor('red'))
            else:
                self.mwui.txtbrwSim.setTextColor(QtGui.QColor('black'))
            self.mwui.txtbrwSim.append(text)
            
    def updateSimState(self, state=[]):
        canRun = state[0] == 'True'
        canPlot = state[1] == 'True'
        
        ui = self.mwui
        ui.btnRun.setEnabled(canRun)
        ui.btnEdit.setEnabled(canRun)
        ui.btnPlot.setEnabled(canPlot)
        if canRun:
            ui.lblInstrument.setStyleSheet('color: black')
        else:
            ui.lblInstrument.setStyleSheet('color: red')
        ui.actionClose_Instrument.setEnabled(canRun)
        ui.actionPlot.setEnabled(canPlot)
        ui.actionRun_Simulation.setEnabled(canRun)
        ui.actionSave_As.setEnabled(canRun)
        ui.actionEdit_Instrument.setEnabled(canRun)
        ui.actionCompile_Instrument.setEnabled(canRun)
        
    ''' UI actions
    '''
    def showOpenInstrumentDlg(self, lookDir):
        dlg = QtGui.QFileDialog()
        dlg.setDirectory(lookDir)
        dlg.setNameFilter("mcstas instruments (*.instr)");
        if dlg.exec_():
            return dlg.selectedFiles()[0]
    
    def showChangeWorkDirDlg(self, lookDir):
        dlg = QtGui.QFileDialog()
        dlg.setFileMode(QtGui.QFileDialog.Directory)
        dlg.setDirectory(lookDir)
        if dlg.exec_():
            return dlg.selectedFiles()[0]

    def showStartSimDialog(self, params):
        dlg = McStartSimDialog()
        dlg.createParamsWidgets(params)
        if dlg.exec_():
            return dlg.getValues()
        else: 
            return None, None
    
    def showNewInstrDialog(self, lookdir):
        dlg = QtGui.QFileDialog()
        dlg.setDirectory(lookdir)
        dlg.setNameFilter("mcstas instruments (*.instr)");
        tuple = dlg.getSaveFileNameAndFilter(parent=None, caption=QtCore.QString('Create new instrument file...'))
        return tuple[0]
        
    def showSaveAsDialog(self, instr):
        dlg = QtGui.QFileDialog()
        dlg.setFileMode(QtGui.QFileDialog.AnyFile)
        return dlg.getSaveFileNameAndFilter(parent=None, caption=QtCore.QString('Save instrument As...'), directory=instr)[0]

''' Main Window widgets wrapper class
Events callbacks are hooked elsewhere.
'''
class McMainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(McMainWindow, self).__init__(parent)
        self.ui =  Ui_MainWindow()
        self.ui.setupUi(self)
        
        
''' Code editor window widgets wrapper class
'''
class McCodeEditorWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(McCodeEditorWindow, self).__init__(parent)
        self.ui =  Ui_EditorWindow()
        self.ui.setupUi(self)
        self.__initScintilla()
        self.__initCallbacks()
        
    def __initScintilla(self):
        # delete text editor placeholder 
        scintilla = Qsci.QsciScintilla(self)
        
        lexer = QsciLexerPython()
        scintilla.setLexer(lexer)
        scintilla.__myLexer = lexer # save reference to retain scope
        
        api = Qsci.QsciAPIs(lexer)
        api.add("aLongString")
        api.add("aLongerString")
        api.add("aDifferentString")
        api.add("sOmethingElse")
        api.prepare()
        scintilla.__myApi = api # save reference to retain scope
        
        scintilla.setAutoCompletionThreshold(1)
        scintilla.setAutoCompletionSource(Qsci.QsciScintilla.AcsAPIs)
        
        self.setCentralWidget(scintilla)

        self.__scintilla = scintilla
    
    def __initCallbacks(self):
        # connect menu items to corresponding scintilla slots
        ui = self.ui 
        ui.actionUndo.triggered.connect(self.__scintilla.undo)
        ui.actionRedo.triggered.connect(self.__scintilla.redo)
        ui.actionSelect_All.triggered.connect(self.__scintilla.selectAll) 
        ui.actionCopy.triggered.connect(self.__scintilla.copy)
        ui.actionCut.triggered.connect(self.__scintilla.cut)
        ui.actionPaste.triggered.connect(self.__scintilla.paste)
        ui.actionSave.triggered.connect(self.__handleSaveAction)
        ui.actionClose_Instrument_Editor.triggered.connect(self.close)
        
        # connect "text changed" signal to our handler to detect unsaved changes
        self.__scintilla.textChanged.connect(self.__handleTextChanged)
        
        self.volatileDataTransition.connect(self.__handleVolatileDataPresent)
 
    def closeEvent(self, event):
        ''' hook to display a "save changes?" dialog if there are unsaved changes 
        '''
        if self.volatileDataExists:
            reply = QtGui.QMessageBox.question(self, 
                                               'Message', 
                                               'Are you sure you want to exit the program?',
                                               'Save',      # default button, reply == 0
                                               'Discard',   # reply == 1
                                               'Cancel')    # reply == 2
            if reply == 0:
                self.saveRequest.emit(self.__scintilla.text())
                self.assumeDataSaved()
                event.accept()
            elif reply == 1:
                event.accept()
            elif reply == 2:
                event.ignore()
        else:
            event.accept()
            
    volatileDataExists = False
    volatileDataTransition = QtCore.pyqtSignal(bool)
    def __handleTextChanged(self):
        if not self.volatileDataExists:
            self.volatileDataTransition.emit(True)
    
    saveRequest = QtCore.pyqtSignal(QtCore.QString)
    def __handleSaveAction(self):
        self.saveRequest.emit(self.__scintilla.text())
        
    def __handleVolatileDataPresent(self, volatileDataExists=False):
        if volatileDataExists:
            title = self.windowTitle()
            self.setWindowTitle('*' + title)
        else:
            title = str(self.windowTitle())
            self.setWindowTitle(title.replace('*', ''))
        self.volatileDataExists = volatileDataExists
        self.ui.actionSave.setEnabled(volatileDataExists)
        
    def __handleExit(self):
        if self.volatileDataExists:
            return
            # TODO: make a "save changes?" dialog
            #dlg = QtGui.QDialogButtonBox()
        
    def initCodeEditor(self, instr):
        if instr != '':
            self.__scintilla.setText(open(instr).read())
        else:
            self.__scintilla.setText('')
        self.setWindowTitle("mcstas: " + instr)
        self.assumeDataSaved()
        
    def assumeDataSaved(self):
        self.volatileDataTransition.emit(False)


''' Start simulation widgets wrapper class
Programatically alters the dialog to match current instrument.
Supports reuse of widgets from sim to sim, to retain input values.
Works as a dialog - call _exec(), probe for return behavior and
state to proceed.
'''
class McStartSimDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(McStartSimDialog, self).__init__(parent)
        self.ui = Ui_dlgStartSim()
        self.ui.setupUi(self)
        self.ui.btnStart.clicked.connect(self.accept)
        self.ui.btnCancel.clicked.connect(self.reject)
        
    def getValues(self):
        # simulation or trace option
        p0 = None
        if self.ui.cbxSimTrace.currentIndex() == 0:
            p0 = SimTraceEnum.SIM
        else:
            p0 = SimTraceEnum.TRACE
        
        # neutron count
        p1 = self.ui.edtNeutronCnt.text()
        
        # steps
        p2 = self.ui.edtSteps.text()
        
        # gravity
        p3 = self.ui.checkBox.checkState()
        
        # clustering option 
        p4 = None
        if self.ui.cbxClustering.currentIndex() == 0:
            p4 = ClusteringEnum.SINGLE
        if self.ui.cbxClustering.currentIndex() == 1:
            p4 = ClusteringEnum.MPI
        if self.ui.cbxClustering.currentIndex() == 2:
            p4 = ClusteringEnum.SSH
            
        # clustring option
        p5 = self.ui.edtNodes.text()
        
        fixed_params =[p0, p1, p2, p3, p4, p5]
        
        # get values of text boxes matching params
        params = []
        for w in self.__wParams:
            p = []
            p.append(str(w[0].text()).rstrip(':'))
            p.append(str(w[1].text()))
            params.append(p)
        
        return fixed_params, params
    
    __wParams = []
    def createParamsWidgets(self, params):
        # clear the containing grid
        grd = self.ui.gridLayout
        for i in reversed(range(grd.count())): 
            grd.itemAt(i).widget().setParent(None)
            
        self.__wParams = None
        self.__wParams = []
        # insert custom params widgets
        i = -1
        x = 0
        y = 0
        for p in params:
            name = QtCore.QString(p[0])
            value = QtCore.QString(p[1])
            
            i = i + 1
            x = i % 6
            y = i / 6
            
            lbl = QtGui.QLabel(self.ui.gbxGrid)
            lbl.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
            lbl.setObjectName("lbl" + name)
            lbl.setText(name + ':')
            self.ui.gridLayout.addWidget(lbl, y, x, 1, 1)
            
            i = i + 1
            x = i % 6
            
            edt = QtGui.QLineEdit(self.ui.gbxGrid)
            edt.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
            edt.setObjectName("edt" + name)
            edt.setText(value)
            self.ui.gridLayout.addWidget(edt, y, x, 1, 1)
            
            self.__wParams.append([lbl, edt])
        self.ui.btnStart.setFocus()

class SimTraceEnum:
    SIM = 0
    TRACE = 1

class ClusteringEnum:
    SINGLE = 0 
    MPI = 1
    SSH = 2
    

''' Main window ui widget setup.
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit.
'''
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setToolTip("")
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gbxInstrument = QtGui.QGroupBox(self.centralwidget)
        self.gbxInstrument.setObjectName("gbxInstrument")
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.gbxInstrument)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.grdInstrument = QtGui.QGridLayout()
        self.grdInstrument.setObjectName("grdInstrument")
        self.lblInstrument = QtGui.QLabel(self.gbxInstrument)
        self.lblInstrument.setObjectName("lblInstrument")
        self.grdInstrument.addWidget(self.lblInstrument, 2, 1, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.grdInstrument.addItem(spacerItem, 0, 1, 1, 5)
        self.btnRun = QtGui.QPushButton(self.gbxInstrument)
        self.btnRun.setObjectName("btnRun")
        self.grdInstrument.addWidget(self.btnRun, 0, 6, 1, 1)
        self.btnPlot = QtGui.QPushButton(self.gbxInstrument)
        self.btnPlot.setObjectName("btnPlot")
        self.grdInstrument.addWidget(self.btnPlot, 0, 7, 1, 1)
        self.btnEdit = QtGui.QPushButton(self.gbxInstrument)
        self.btnEdit.setObjectName("btnEdit")
        self.grdInstrument.addWidget(self.btnEdit, 2, 7, 1, 1)
        self.btnOpenInstrument = QtGui.QPushButton(self.gbxInstrument)
        self.btnOpenInstrument.setObjectName("btnOpenInstrument")
        self.grdInstrument.addWidget(self.btnOpenInstrument, 2, 6, 1, 1)
        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.grdInstrument.addItem(spacerItem1, 2, 2, 1, 4)
        self.verticalLayout_2.addLayout(self.grdInstrument)
        self.verticalLayout.addWidget(self.gbxInstrument)
        self.hlyMessages = QtGui.QHBoxLayout()
        self.hlyMessages.setObjectName("hlyMessages")
        self.gbxMessages = QtGui.QGroupBox(self.centralwidget)
        self.gbxMessages.setObjectName("gbxMessages")
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.gbxMessages)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.tbxMessages = QtGui.QTabWidget(self.gbxMessages)
        self.tbxMessages.setObjectName("tbxMessages")
        self.tabMcgui = QtGui.QWidget()
        self.tabMcgui.setObjectName("tabMcgui")
        self.verticalLayout_4 = QtGui.QVBoxLayout(self.tabMcgui)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.txtbrwMcgui = QtGui.QTextBrowser(self.tabMcgui)
        self.txtbrwMcgui.setObjectName("txtbrwMcgui")
        self.verticalLayout_4.addWidget(self.txtbrwMcgui)
        self.tbxMessages.addTab(self.tabMcgui, "")
        self.tabSim = QtGui.QWidget()
        self.tabSim.setObjectName("tabSim")
        self.verticalLayout_5 = QtGui.QVBoxLayout(self.tabSim)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.txtbrwSim = QtGui.QTextBrowser(self.tabSim)
        self.txtbrwSim.setObjectName("txtbrwSim")
        self.verticalLayout_5.addWidget(self.txtbrwSim)
        self.tbxMessages.addTab(self.tabSim, "")
        self.verticalLayout_3.addWidget(self.tbxMessages)
        self.hlyMessages.addWidget(self.gbxMessages)
        self.verticalLayout.addLayout(self.hlyMessages)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSimulation = QtGui.QMenu(self.menubar)
        self.menuSimulation.setObjectName("menuSimulation")
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen_instrument = QtGui.QAction(MainWindow)
        self.actionOpen_instrument.setObjectName("actionOpen_instrument")
        self.actionQuit = QtGui.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.actionRun_Simulation = QtGui.QAction(MainWindow)
        self.actionRun_Simulation.setObjectName("actionRun_Simulation")
        self.actionCompile_Instrument = QtGui.QAction(MainWindow)
        self.actionCompile_Instrument.setObjectName("actionCompile_Instrument")
        self.actionMcstas_User_Manual = QtGui.QAction(MainWindow)
        self.actionMcstas_User_Manual.setObjectName("actionMcstas_User_Manual")
        self.actionMcstas_Web_Page = QtGui.QAction(MainWindow)
        self.actionMcstas_Web_Page.setObjectName("actionMcstas_Web_Page")
        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionMcstas_Component_Manual = QtGui.QAction(MainWindow)
        self.actionMcstas_Component_Manual.setObjectName("actionMcstas_Component_Manual")
        self.actionNew_Instrument = QtGui.QAction(MainWindow)
        self.actionNew_Instrument.setObjectName("actionNew_Instrument")
        self.actionEdit_Instrument = QtGui.QAction(MainWindow)
        self.actionEdit_Instrument.setObjectName("actionEdit_Instrument")
        self.actionClose_Instrument = QtGui.QAction(MainWindow)
        self.actionClose_Instrument.setObjectName("actionClose_Instrument")
        self.actionPlot = QtGui.QAction(MainWindow)
        self.actionPlot.setObjectName("actionPlot")
        self.actionSave_As = QtGui.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.menuFile.addAction(self.actionNew_Instrument)
        self.menuFile.addAction(self.actionOpen_instrument)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionEdit_Instrument)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionClose_Instrument)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuSimulation.addAction(self.actionRun_Simulation)
        self.menuSimulation.addAction(self.actionCompile_Instrument)
        self.menuSimulation.addSeparator()
        self.menuSimulation.addAction(self.actionPlot)
        self.menuHelp.addAction(self.actionMcstas_User_Manual)
        self.menuHelp.addAction(self.actionMcstas_Component_Manual)
        self.menuHelp.addAction(self.actionMcstas_Web_Page)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSimulation.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tbxMessages.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "mcgui-py", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxInstrument.setTitle(QtGui.QApplication.translate("MainWindow", "Instrument:", None, QtGui.QApplication.UnicodeUTF8))
        self.lblInstrument.setText(QtGui.QApplication.translate("MainWindow", "<Instrument file>", None, QtGui.QApplication.UnicodeUTF8))
        self.btnRun.setText(QtGui.QApplication.translate("MainWindow", "Run...", None, QtGui.QApplication.UnicodeUTF8))
        self.btnPlot.setText(QtGui.QApplication.translate("MainWindow", "Plot", None, QtGui.QApplication.UnicodeUTF8))
        self.btnEdit.setText(QtGui.QApplication.translate("MainWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
        self.btnOpenInstrument.setToolTip(QtGui.QApplication.translate("MainWindow", "Browse instrument...", None, QtGui.QApplication.UnicodeUTF8))
        self.btnOpenInstrument.setText(QtGui.QApplication.translate("MainWindow", "Open...", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxMessages.setTitle(QtGui.QApplication.translate("MainWindow", "Messages:", None, QtGui.QApplication.UnicodeUTF8))
        self.tbxMessages.setTabText(self.tbxMessages.indexOf(self.tabMcgui), QtGui.QApplication.translate("MainWindow", "mcgui", None, QtGui.QApplication.UnicodeUTF8))
        self.tbxMessages.setTabText(self.tbxMessages.indexOf(self.tabSim), QtGui.QApplication.translate("MainWindow", "Simulations", None, QtGui.QApplication.UnicodeUTF8))
        self.menuFile.setTitle(QtGui.QApplication.translate("MainWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
        self.menuSimulation.setTitle(QtGui.QApplication.translate("MainWindow", "Simulation", None, QtGui.QApplication.UnicodeUTF8))
        self.menuHelp.setTitle(QtGui.QApplication.translate("MainWindow", "Help", None, QtGui.QApplication.UnicodeUTF8))
        self.actionOpen_instrument.setText(QtGui.QApplication.translate("MainWindow", "Open...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionOpen_instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+O", None, QtGui.QApplication.UnicodeUTF8))
        self.actionQuit.setText(QtGui.QApplication.translate("MainWindow", "Quit", None, QtGui.QApplication.UnicodeUTF8))
        self.actionQuit.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Q", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRun_Simulation.setText(QtGui.QApplication.translate("MainWindow", "Run Simulation...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRun_Simulation.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+R", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCompile_Instrument.setText(QtGui.QApplication.translate("MainWindow", "Compile Instrument", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCompile_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Shift+R", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMcstas_User_Manual.setText(QtGui.QApplication.translate("MainWindow", "mcstas User Manual", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMcstas_Web_Page.setText(QtGui.QApplication.translate("MainWindow", "mcstas Web Page", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAbout.setText(QtGui.QApplication.translate("MainWindow", "About...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionAbout.setShortcut(QtGui.QApplication.translate("MainWindow", "F1", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMcstas_Component_Manual.setText(QtGui.QApplication.translate("MainWindow", "mcstas Component Manual", None, QtGui.QApplication.UnicodeUTF8))
        self.actionNew_Instrument.setText(QtGui.QApplication.translate("MainWindow", "New Instrument...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionNew_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+N", None, QtGui.QApplication.UnicodeUTF8))
        self.actionEdit_Instrument.setText(QtGui.QApplication.translate("MainWindow", "Edit...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionEdit_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+E", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument.setText(QtGui.QApplication.translate("MainWindow", "Close Instrument", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+W", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPlot.setText(QtGui.QApplication.translate("MainWindow", "Plot", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPlot.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+P", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave_As.setText(QtGui.QApplication.translate("MainWindow", "Save As...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave_As.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Shift+S", None, QtGui.QApplication.UnicodeUTF8))


''' Edit instrument window
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit. 
'''
class Ui_EditorWindow(object):
    def setupUi(self, EditorWindow):
        EditorWindow.setObjectName("EditorWindow")
        EditorWindow.resize(600, 800)
        self.centralwidget = QtGui.QWidget(EditorWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        EditorWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(EditorWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuInsert = QtGui.QMenu(self.menubar)
        self.menuInsert.setObjectName("menuInsert")
        self.menuSource = QtGui.QMenu(self.menuInsert)
        self.menuSource.setObjectName("menuSource")
        self.menuOptics = QtGui.QMenu(self.menuInsert)
        self.menuOptics.setObjectName("menuOptics")
        EditorWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(EditorWindow)
        self.statusbar.setObjectName("statusbar")
        EditorWindow.setStatusBar(self.statusbar)
        self.actionComponent_Browser = QtGui.QAction(EditorWindow)
        self.actionComponent_Browser.setObjectName("actionComponent_Browser")
        self.actionSource_Maxwell_3 = QtGui.QAction(EditorWindow)
        self.actionSource_Maxwell_3.setObjectName("actionSource_Maxwell_3")
        self.actionSource_Optimize = QtGui.QAction(EditorWindow)
        self.actionSource_Optimize.setObjectName("actionSource_Optimize")
        self.actionGuide = QtGui.QAction(EditorWindow)
        self.actionGuide.setObjectName("actionGuide")
        self.actionMirror = QtGui.QAction(EditorWindow)
        self.actionMirror.setObjectName("actionMirror")
        self.actionV_Selector = QtGui.QAction(EditorWindow)
        self.actionV_Selector.setObjectName("actionV_Selector")
        self.actionUndo = QtGui.QAction(EditorWindow)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtGui.QAction(EditorWindow)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCopy = QtGui.QAction(EditorWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionCut = QtGui.QAction(EditorWindow)
        self.actionCut.setObjectName("actionCut")
        self.actionPaste = QtGui.QAction(EditorWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionSelect_All = QtGui.QAction(EditorWindow)
        self.actionSelect_All.setObjectName("actionSelect_All")
        self.actionSave = QtGui.QAction(EditorWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionClose_Instrument_Editor = QtGui.QAction(EditorWindow)
        self.actionClose_Instrument_Editor.setObjectName("actionClose_Instrument_Editor")
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose_Instrument_Editor)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionSelect_All)
        self.menuSource.addAction(self.actionSource_Maxwell_3)
        self.menuSource.addAction(self.actionSource_Optimize)
        self.menuOptics.addSeparator()
        self.menuOptics.addAction(self.actionGuide)
        self.menuOptics.addAction(self.actionMirror)
        self.menuOptics.addAction(self.actionV_Selector)
        self.menuInsert.addAction(self.actionComponent_Browser)
        self.menuInsert.addSeparator()
        self.menuInsert.addAction(self.menuSource.menuAction())
        self.menuInsert.addAction(self.menuOptics.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuInsert.menuAction())

        self.retranslateUi(EditorWindow)
        QtCore.QMetaObject.connectSlotsByName(EditorWindow)

    def retranslateUi(self, EditorWindow):
        EditorWindow.setWindowTitle(QtGui.QApplication.translate("EditorWindow", "Instrument Editor", None, QtGui.QApplication.UnicodeUTF8))
        self.menuFile.setTitle(QtGui.QApplication.translate("EditorWindow", "File", None, QtGui.QApplication.UnicodeUTF8))
        self.menuEdit.setTitle(QtGui.QApplication.translate("EditorWindow", "Edit", None, QtGui.QApplication.UnicodeUTF8))
        self.menuView.setTitle(QtGui.QApplication.translate("EditorWindow", "View", None, QtGui.QApplication.UnicodeUTF8))
        self.menuInsert.setTitle(QtGui.QApplication.translate("EditorWindow", "Insert", None, QtGui.QApplication.UnicodeUTF8))
        self.menuSource.setTitle(QtGui.QApplication.translate("EditorWindow", "Source", None, QtGui.QApplication.UnicodeUTF8))
        self.menuOptics.setTitle(QtGui.QApplication.translate("EditorWindow", "Optics", None, QtGui.QApplication.UnicodeUTF8))
        self.actionComponent_Browser.setText(QtGui.QApplication.translate("EditorWindow", "Component Browser...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSource_Maxwell_3.setText(QtGui.QApplication.translate("EditorWindow", "Source_Maxwell_3...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSource_Optimize.setText(QtGui.QApplication.translate("EditorWindow", "Source_Optimize...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionGuide.setText(QtGui.QApplication.translate("EditorWindow", "Guide...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionMirror.setText(QtGui.QApplication.translate("EditorWindow", "Mirror...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionV_Selector.setText(QtGui.QApplication.translate("EditorWindow", "V_selector...", None, QtGui.QApplication.UnicodeUTF8))
        self.actionUndo.setText(QtGui.QApplication.translate("EditorWindow", "Undo", None, QtGui.QApplication.UnicodeUTF8))
        self.actionUndo.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+Z", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRedo.setText(QtGui.QApplication.translate("EditorWindow", "Redo", None, QtGui.QApplication.UnicodeUTF8))
        self.actionRedo.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+Shift+Z", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCopy.setText(QtGui.QApplication.translate("EditorWindow", "Copy", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCopy.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+C", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCut.setText(QtGui.QApplication.translate("EditorWindow", "Cut", None, QtGui.QApplication.UnicodeUTF8))
        self.actionCut.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+X", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPaste.setText(QtGui.QApplication.translate("EditorWindow", "Paste", None, QtGui.QApplication.UnicodeUTF8))
        self.actionPaste.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+V", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSelect_All.setText(QtGui.QApplication.translate("EditorWindow", "Select All", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSelect_All.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+A", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave.setText(QtGui.QApplication.translate("EditorWindow", "Save", None, QtGui.QApplication.UnicodeUTF8))
        self.actionSave.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+S", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument_Editor.setText(QtGui.QApplication.translate("EditorWindow", "Close Instrument Editor", None, QtGui.QApplication.UnicodeUTF8))
        self.actionClose_Instrument_Editor.setShortcut(QtGui.QApplication.translate("EditorWindow", "Ctrl+W", None, QtGui.QApplication.UnicodeUTF8))


''' Start simulation dialog widget
Auto-generated view created with QtCreator.
Generate from .ui source with pyside-uic. 
Do not edit.
'''
class Ui_dlgStartSim(object):
    def setupUi(self, dlgStartSim):
        dlgStartSim.setObjectName("dlgStartSim")
        dlgStartSim.resize(504, 386)
        self.verticalLayout_4 = QtGui.QVBoxLayout(dlgStartSim)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout = QtGui.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.gbxGrid = QtGui.QGroupBox(dlgStartSim)
        self.gbxGrid.setObjectName("gbxGrid")
        self.verticalLayout_2 = QtGui.QVBoxLayout(self.gbxGrid)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridLayout = QtGui.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.lblGridDummy = QtGui.QLabel(self.gbxGrid)
        self.lblGridDummy.setObjectName("lblGridDummy")
        self.gridLayout.addWidget(self.lblGridDummy, 0, 0, 1, 1)
        self.edtGridDummy2 = QtGui.QLineEdit(self.gbxGrid)
        self.edtGridDummy2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtGridDummy2.setObjectName("edtGridDummy2")
        self.gridLayout.addWidget(self.edtGridDummy2, 0, 3, 1, 1)
        self.lblGridDummy2 = QtGui.QLabel(self.gbxGrid)
        self.lblGridDummy2.setObjectName("lblGridDummy2")
        self.gridLayout.addWidget(self.lblGridDummy2, 0, 2, 1, 1)
        self.lblGridDummy3 = QtGui.QLabel(self.gbxGrid)
        self.lblGridDummy3.setObjectName("lblGridDummy3")
        self.gridLayout.addWidget(self.lblGridDummy3, 0, 4, 1, 1)
        self.edtGridDummy = QtGui.QLineEdit(self.gbxGrid)
        self.edtGridDummy.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtGridDummy.setObjectName("edtGridDummy")
        self.gridLayout.addWidget(self.edtGridDummy, 0, 1, 1, 1)
        self.edtGridDummy3 = QtGui.QLineEdit(self.gbxGrid)
        self.edtGridDummy3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtGridDummy3.setObjectName("edtGridDummy3")
        self.gridLayout.addWidget(self.edtGridDummy3, 0, 5, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout)
        self.verticalLayout.addWidget(self.gbxGrid)
        self.gbxSim = QtGui.QGroupBox(dlgStartSim)
        self.gbxSim.setObjectName("gbxSim")
        self.verticalLayout_3 = QtGui.QVBoxLayout(self.gbxSim)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.gridLayout_2 = QtGui.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.cbxSimTrace = QtGui.QComboBox(self.gbxSim)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cbxSimTrace.sizePolicy().hasHeightForWidth())
        self.cbxSimTrace.setSizePolicy(sizePolicy)
        self.cbxSimTrace.setObjectName("cbxSimTrace")
        self.cbxSimTrace.addItem("")
        self.cbxSimTrace.addItem("")
        self.gridLayout_2.addWidget(self.cbxSimTrace, 1, 0, 1, 1)
        self.cbxClustering = QtGui.QComboBox(self.gbxSim)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.MinimumExpanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cbxClustering.sizePolicy().hasHeightForWidth())
        self.cbxClustering.setSizePolicy(sizePolicy)
        self.cbxClustering.setObjectName("cbxClustering")
        self.cbxClustering.addItem("")
        self.cbxClustering.addItem("")
        self.cbxClustering.addItem("")
        self.gridLayout_2.addWidget(self.cbxClustering, 6, 0, 1, 1)
        self.edtNeutronCnt = QtGui.QLineEdit(self.gbxSim)
        self.edtNeutronCnt.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtNeutronCnt.setObjectName("edtNeutronCnt")
        self.gridLayout_2.addWidget(self.edtNeutronCnt, 1, 2, 1, 1)
        self.label_3 = QtGui.QLabel(self.gbxSim)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 6, 1, 1, 1)
        self.lineEdit = QtGui.QLineEdit(self.gbxSim)
        self.lineEdit.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 4, 2, 1, 1)
        self.label_5 = QtGui.QLabel(self.gbxSim)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 4, 1, 1, 1)
        self.label = QtGui.QLabel(self.gbxSim)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 2, 1, 1, 1)
        self.label_4 = QtGui.QLabel(self.gbxSim)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 1, 1, 1, 1)
        self.edtSteps = QtGui.QLineEdit(self.gbxSim)
        self.edtSteps.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtSteps.setObjectName("edtSteps")
        self.gridLayout_2.addWidget(self.edtSteps, 2, 2, 1, 1)
        self.checkBox = QtGui.QCheckBox(self.gbxSim)
        self.checkBox.setObjectName("checkBox")
        self.gridLayout_2.addWidget(self.checkBox, 3, 1, 1, 1)
        self.edtNodes = QtGui.QLineEdit(self.gbxSim)
        self.edtNodes.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.edtNodes.setObjectName("edtNodes")
        self.gridLayout_2.addWidget(self.edtNodes, 6, 2, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout_2)
        self.verticalLayout.addWidget(self.gbxSim)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_3 = QtGui.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btnStart = QtGui.QPushButton(dlgStartSim)
        self.btnStart.setDefault(True)
        self.btnStart.setObjectName("btnStart")
        self.horizontalLayout_3.addWidget(self.btnStart)
        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.btnCancel = QtGui.QPushButton(dlgStartSim)
        self.btnCancel.setObjectName("btnCancel")
        self.horizontalLayout_3.addWidget(self.btnCancel)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_4.addLayout(self.verticalLayout)

        self.retranslateUi(dlgStartSim)
        QtCore.QMetaObject.connectSlotsByName(dlgStartSim)

    def retranslateUi(self, dlgStartSim):
        dlgStartSim.setWindowTitle(QtGui.QApplication.translate("dlgStartSim", "Start simulation", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxGrid.setTitle(QtGui.QApplication.translate("dlgStartSim", "Instrument parameters (D=floating point, I=integer, S=string):", None, QtGui.QApplication.UnicodeUTF8))
        self.lblGridDummy.setText(QtGui.QApplication.translate("dlgStartSim", "lambda (D):", None, QtGui.QApplication.UnicodeUTF8))
        self.lblGridDummy2.setText(QtGui.QApplication.translate("dlgStartSim", "R (D):", None, QtGui.QApplication.UnicodeUTF8))
        self.lblGridDummy3.setText(QtGui.QApplication.translate("dlgStartSim", "R_curve (D):", None, QtGui.QApplication.UnicodeUTF8))
        self.gbxSim.setTitle(QtGui.QApplication.translate("dlgStartSim", "Simulation:", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxSimTrace.setItemText(0, QtGui.QApplication.translate("dlgStartSim", "Simulation", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxSimTrace.setItemText(1, QtGui.QApplication.translate("dlgStartSim", "Trace", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxClustering.setItemText(0, QtGui.QApplication.translate("dlgStartSim", "No clustering", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxClustering.setItemText(1, QtGui.QApplication.translate("dlgStartSim", "MPI clustering", None, QtGui.QApplication.UnicodeUTF8))
        self.cbxClustering.setItemText(2, QtGui.QApplication.translate("dlgStartSim", "SSH clustering", None, QtGui.QApplication.UnicodeUTF8))
        self.edtNeutronCnt.setText(QtGui.QApplication.translate("dlgStartSim", "1000000", None, QtGui.QApplication.UnicodeUTF8))
        self.label_3.setText(QtGui.QApplication.translate("dlgStartSim", "# nodes:", None, QtGui.QApplication.UnicodeUTF8))
        self.label_5.setText(QtGui.QApplication.translate("dlgStartSim", "Random seed:", None, QtGui.QApplication.UnicodeUTF8))
        self.label.setText(QtGui.QApplication.translate("dlgStartSim", "Steps:", None, QtGui.QApplication.UnicodeUTF8))
        self.label_4.setText(QtGui.QApplication.translate("dlgStartSim", "Neutron count:", None, QtGui.QApplication.UnicodeUTF8))
        self.edtSteps.setText(QtGui.QApplication.translate("dlgStartSim", "0", None, QtGui.QApplication.UnicodeUTF8))
        self.checkBox.setText(QtGui.QApplication.translate("dlgStartSim", "Gravity", None, QtGui.QApplication.UnicodeUTF8))
        self.btnStart.setText(QtGui.QApplication.translate("dlgStartSim", "Start", None, QtGui.QApplication.UnicodeUTF8))
        self.btnCancel.setText(QtGui.QApplication.translate("dlgStartSim", "Cancel", None, QtGui.QApplication.UnicodeUTF8))
