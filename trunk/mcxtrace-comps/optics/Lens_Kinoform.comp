/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Lens_Kinoform
*
* %
*
* Written by: Jana Baltser and Erik Knudsen
* 
* Date: January 2012
* Version: 1.0
* Release: McXtrace 0.1
* Origin: NBI
*
* %D
* KINOFORM. A model of a specific kinoform used by the BNL team during the APS beamtime.
* 	z: [0 0.002033m]
*	xmin=-0.0002634
*	xmax=0.0002634
*	y - height of the lens.
* the principles of the kinoform's operation are described here: http://neutrons.ornl.gov/workshops/nni_05/presentations/min050616_xray_evans-lutterodt_ken_nni05.pdf
*
* %P
* Input parameters:
* 
*
*
*******************************************************************************/

DEFINE COMPONENT Lens_Kinoform
DEFINITION PARAMETERS (string datafile="kinoform.txt", material_datafile="Si.txt",Re=2.8179402894e-5,Na=6.02214179e23)
SETTING PARAMETERS (yheight=1e-2,xwidth=5.268e-4,deltaN=0)
OUTPUT PARAMETERS (prms,mat_data)
/*STATE PARAMETERS (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */

SHARE
%{
  %include "read_table-lib"
  struct KL_struct{
    double *z_KL, *x_KL;
  }; 
  
  struct data{
    int Z;
    double Ar, rho;
    double *E, *mu, *f;
  };

//  const double Re=2.8179402894e-5;     /* Thomson Scattering length [Angstrom] */
//  const double Na=6.02214179e23;       /* Avogadro's number [atoms per gram-mole]*/ 
%}

DECLARE
%{
  struct KL_struct *prms;
  struct data *mat_data;
%}   
  
INITIALIZE
%{
  // parsing the geometrical dimensions file
  int status=0;
  t_Table T;
  if ( (status=Table_Read(&T,datafile,0))==-1){
    fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",datafile,NAME_CURRENT_COMP);
    exit(-1);
  }
  prms=calloc(1,sizeof(struct KL_struct));
  prms->z_KL=malloc(sizeof(double)*(T.rows+1));
  prms->x_KL=malloc(sizeof(double)*(T.rows+1));
  int i;
  for(i=0;i<T.rows;i++){
      prms->z_KL[i]=T.data[i*T.columns]; 
      prms->x_KL[i]=T.data[1+i*T.columns];               
      
  }
  Table_Free(&T);
  
  
  // parsing the material datafile
  int st=0;
  t_Table TT;
  if ( (st=Table_Read(&TT,material_datafile,0))==-1){
    fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",material_datafile,NAME_CURRENT_COMP);
    exit(-1);
  }
  char **header_parsed;
  header_parsed=Table_ParseHeader(TT.header,"Z","A[r]","rho",NULL);
  mat_data=calloc(1,sizeof(struct data));
  if (!mat_data->Z) mat_data->Z=strtol(header_parsed[0],NULL,10);
  if (!mat_data->Ar) mat_data->Ar=strtod(header_parsed[1],NULL);
  if (!mat_data->rho) mat_data->rho=strtod(header_parsed[2],NULL);
  mat_data->E=malloc(sizeof(double)*(TT.rows+1));
  mat_data->f=malloc(sizeof(double)*(TT.rows+1));
  mat_data->mu=malloc(sizeof(double)*(TT.rows+1));
  int nr;
  for(nr=0;nr<TT.rows;nr++){
      mat_data->E[nr]=TT.data[nr*TT.columns]; 
      mat_data->mu[nr]=TT.data[5+nr*TT.columns]*mat_data->rho*1e2;     /*mu is now in SI, [m^-1]*/          
      mat_data->f[nr]=TT.data[1+nr*TT.columns];
  }
  Table_Free(&TT);
%}

TRACE
%{
  double F,k,di;
  double kxN,kyN,kzN;
  double E, mu,f,rhoel,e,delta,beta,T;
  double x_tmp,z_int;
  int i,nr;
  k=sqrt(kx*kx+ky*ky+kz*kz);
  e=K2E*k; 

  // determining delta 
  
  while (e>mat_data->E[i]){
    i++; 
    if (mat_data->E[i]==-1){
      fprintf(stderr,"Photon energy (%g keV) is outside of the kinoform's material data\n",k); ABSORB;
    }
  } 
  E=(e-mat_data->E[i-1])/(mat_data->E[i]-mat_data->E[i-1]); 
  mu=(1-E)*mat_data->mu[i-1]+E*mat_data->mu[i];
  f=(1-E)*mat_data->f[i-1]+E*mat_data->f[i]; 
  rhoel= f*Na*(mat_data->rho*1e-24)/mat_data->Ar; 
 
  if (deltaN==0) {
      delta= 2.0*M_PI*Re*rhoel/(k*k); 
  } else delta=deltaN; 
  mu*=1e-10; // factor conversion from m^-1 to A^-1
  beta=mu/(2.0*k); 
  
  PROP_Z0;
  
  if (x> -xwidth/2 && x< xwidth/2 &&
      y> -yheight/2 && y< yheight/2){ 
	   /*Interpolation of Table Values*/ 
 
        while (fabs(x)>prms->x_KL[nr]){
	    nr++; 
	    if (nr<=1) nr=1;
	    if (nr>=1345) nr=1345;
	    if (prms->x_KL[nr]==-1){
		fprintf(stderr,"An error with parsing the kinoform dimensions' file\n"); ABSORB;
	    }
	}
    x_tmp=prms->x_KL[nr];z_int=prms->z_KL[nr];

    PROP_DL(z_int);
    SCATTER;
    
    F=((x*x)/(2*delta*z)) - (((2*delta-delta*delta)*z)/(2*delta));

    di=sqrt(x*x+(z-F)*(z-F)); // distance to the focal point with the subsequent calculation of a new k vector
    kxN=-(k*x)/di;
    kyN=0;
    kzN=(k*(F-z))/di;
    
    double knew_x,knew_y,knew_z;
    double NN,Nx,Ny,Nz,aa, aa1;
    
    NN=sqrt(kxN*kxN+kyN*kyN+kzN*kzN);
    Nx=kxN/NN;
    Ny=kyN/NN;
    Nz=kzN/NN; 
    
    aa=Nz;
    aa1=sqrt(1-aa*aa); 
    // Rotation of the incoming k vector by an angle alpha:
    
    if (x<0){
	    knew_x=aa*kx+aa1*kz;	// rotation around Y axis
	    knew_y=ky;
	    knew_z=-aa1*kx+aa*kz;	
    } else if (x>0){
      knew_x=-aa*kx+aa1*kz;
      knew_y=ky;
      knew_z=-aa1-aa*kz;
    }	
   
    kx=knew_x;
    ky=knew_y;
    kz=knew_z;
 
    
  } else  
  SCATTER;
 
    // transmission calculation
   T=exp(-2*M_PI*(beta/delta));  
   p*=T;

%}

MCDISPLAY
%{
  magnify("xy"); // zdepth=0.002033
  double zdepth=0.002033,w;
  w=xwidth/2;
  box(0,0,zdepth,w,yheight/2,zdepth);
%}

END
