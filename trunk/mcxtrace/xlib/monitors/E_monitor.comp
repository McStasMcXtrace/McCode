/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright (C), All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         Copenhagen Univeristy, Copenhagen, Denmark
*
* Component: E_monitor
*
* %I
* Written by: Erik Knudsen
* Based on neutron component written by Kristian Nielsen and Kim Lefmann
*
* Date: June 22, 2009
* Version: $Revision: $
* Origin: Risoe
* Release: McXtrace 0.1
*
* Energy-sensitive monitor.
*
* %D
* A square single monitor that measures the energy of the incoming x-rays.
*
* Example: E_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*                 Emin=1, Emax=50, nE=20, filename="Output.nrj")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* Emin:     Minimum energy to detect (keV)
* Emax:     Maximum energy to detect (keV)
* nE:       Number of energy channels (1)
* filename: Name of file in which to store the detector image (text)
* restore_xray: If set, the monitor does not influence the xray state (1)
*
* OUTPUT PARAMETERS:
*
* E_N:      Array of x.ray counts
* E_p:      Array of x-ray weight counts
* E_p2:     Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT E_monitor
DEFINITION PARAMETERS (nE=20, string filename=0)
SETTING PARAMETERS (xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, 
  xwidth=0, yheight=0, Emin, Emax, restore_xray=0)
OUTPUT PARAMETERS (E_N, E_p, E_p2)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 
DECLARE
%{
    double E_N[nE];
    double E_p[nE], E_p2[nE];
%}
INITIALIZE
  %{
    int i;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("E_monitor: %s: Null detection area !\n"
                   "ERROR      (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nE; i++)
    {
      E_N[i] = 0;
      E_p[i] = 0;
      E_p2[i] = 0;
    }
  %}
TRACE
  %{
    int i;
    double E;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      E = K2E*sqrt(kx*kx + ky*ky + kz*kz);

      i = floor((E-Emin)*nE/(Emax-Emin));
      if(i >= 0 && i < nE)
      {
        E_N[i]++;
        E_p[i] += p;
        E_p2[i] += p*p;
        SCATTER;
      }
    }
    if (restore_xray) {
      RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_1D(
        "Energy monitor",
        "Energy [keV]",
        "Intensity",
        "E", Emin, Emax, nE,
        &E_N[0],&E_p[0],&E_p2[0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
