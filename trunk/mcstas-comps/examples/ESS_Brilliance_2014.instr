/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: ESS_Brilliance_2012
*
* %Identification
* Written by: Peter Willendrup (pkwi@fysik.dtu.dk)
* Date: 20130425
* Origin: DTU Fysik
* Release: McStas 2.x
* Version: 0.2
* %INSTRUMENT_SITE: ESS
*
* This instrument produces the ESS 2012 cold brilliance.
*
* %Description
* This instrument produces the ESS 2012 updated cold brilliance. 
*
* The Brilliance_monitor is used to determine both the mean and peak brilliances, plus pulse-shapes for different wavelengths
*
* Example: ESS_Brilliance_2012 Detector: Brillmon_I=3.05e+16 (First detector output)
*
* %Parameters
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT ESS_Brilliance_2014(frac=1, power=5, flat=0, string srcdef="2014",Yheight=0.1, WidthC=0.2,WidthT=0.6,np=1,uniform=0, ISleft=0.5, angle=-1, lambdamin=0.2, lambdamax=20)

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
  //double lambdamin,lambdamax;
  int IsCold;
  double SrcX, SrcY, SrcZ;
  double Theta;
  double MonTransl;
  double XW, YH;
  char options1[256],options2[256];
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
  //  lambdamin=0.2;
  //  lambdamax=20;
  XW=1.05*(WidthC+2*WidthT);
  YH=1.05*Yheight;
  sprintf(options1,"user1 bins=201 limits=[-%g,%g]",XW/2,XW/2);
  sprintf(options2,"user1 bins=201 limits=[-%g,%g], user2 bins=201 limits=[-%g,%g]",XW/2,XW/2,YH/2,YH/2);
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE

  COMPONENT Source=ESS_moderator(yheight_t=Yheight,yheight_c=Yheight,width_c=WidthC ,width_t=WidthT,cyl_radius=0.0,dist=1,focus_xw=0.01,focus_yh=0.01,Lmin=lambdamin,Lmax=lambdamax, cold_frac=frac, sourcedef=srcdef, acc_power=power, planar=flat, n_pulses=np, uniform=uniform, isleft=ISleft, beamport_angle=angle)
  AT (0, 0, 0) RELATIVE Origin
EXTEND %{
  IsCold=cold;
  SrcX=x;SrcY=y;SrcZ=z;
  if (cold){
    Theta=(theta_tmp-PI/2)*cyl_radius;
  } else {
    Theta=0;
  }

  //printf("Source emission point width weight: %g %g %g %g\n",x,y,z,p);
%}

/* Cylindrical Monitor wrapping around the cyl. cold source - NOTE: Only monitors cold neutrons from cold moderator */
/* COMPONENT Cyl = Monitor_nD( */
/*   xwidth=2*Width, yheight=1.1*Yheight, filename="cyl.dat", */
/*   options="banana, theta limits=[-35 35] bins=101, auto y") */
/* WHEN (IsCold && !flat) AT (0,0,0) RELATIVE PREVIOUS */

/* /\* TOF-lambda montitor at 20cm *\/ */
/* COMPONENT TOFLmon = TOFLambda_monitor( */
/*     nL = 196, nt = 601, filename = "tofl", tmin = 0, */
/*     tmax = 20000, Lmin = lambdamin, Lmax = lambdamax, xwidth=1, yheight=1) */
/*   AT (0, 0, 0.2) RELATIVE Source */

/* PSD at 21 cm*/
/* COMPONENT PSDmon = PSD_monitor( */
/*    filename = "PSD", nx=101, ny=101, */
/*    xwidth=1.2*Width, yheight=1.2*Yheight) */
/*   AT (0, 0, 0.21) RELATIVE Source */

/* /\* Vertial linear PSD at 21.1cm *\/ */
/* COMPONENT PSDlinmonY = PSDlin_monitor(filename = "PSDlinY", nx=101,  */
/*    xwidth=2.2*Yheight, yheight=2.2*Width) */
/*   AT (0, 0, 0.211) RELATIVE Source */
/*   ROTATED(0,0,90) RELATIVE Source */

/* /\* Horz linear PSD at 21.11cm *\/ */
/* COMPONENT PSDlinmonX = PSDlin_monitor(filename = "PSDlinX", nx=101,  */
/*    xwidth=2.2*Width, yheight=2.2*Yheight) */
/*   AT (0, 0, 0.2111) RELATIVE Source */
/*   ROTATED(0,0,0) RELATIVE Source */

  COMPONENT MonND1 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, options=options1)
 AT (0, 0, 1) RELATIVE Source


  COMPONENT MonND2 = Monitor_nD(xwidth=XW, yheight=YH, user1=Theta, options="auto user1")
  WHEN(cold) AT (0, 0, 1) RELATIVE Source

  COMPONENT MonND3 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, user2=SrcY, options=options2)
 AT (0, 0, 1) RELATIVE Source

/* Brilliance monitor. Note use of geometry in srcarea definition */
COMPONENT Brillmon = Brilliance_monitor(
    nlam = 196, nt = 601, filename = "brill", t_0 = 0,
    t_1 =10000, lambda_0 = lambdamin, lambda_1 = lambdamax,
    Freq =14, toflambda=1,tofcuts=1, srcarea=(100*WidthC*100*Yheight))
  AT (0, 0, 1) RELATIVE Source

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END









