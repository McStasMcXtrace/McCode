/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test (rename also the example and DEFINE lines below)
*
* %Identification
* Written by: Your name (email)
* Date: Current Date
* Origin: Your institution
* Release: McStas CVS-080208
* Version: 0.2
* %INSTRUMENT_SITE: Tests_polarization
*
* Test the tabled magnetic field option
*
* %Description
* A test instrument to check that supplying a magnetic field as a vector field point cloud
* is working. The field referred to by the default input parameter MF is 10 \mu T along the z-axis
* at entry and flips to l0 \mu T along the negative z-axis halfway through
*
* Example: Test_pol_tabled.instr -n1e4 MF=flipfield.dat pol_6_I=0.665777
*   N.b. this example will not be run by autotest since it reuireq the presence of the file
*    flipfield.dat in the working directory.
*
* %Parameters
* Par1: [unit] Parameter1 description
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT Test_pol_tabled(string MF="flipfield.dat")

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
  printf("N.B. This example instrument requires that the file %s is present in the working directory\n",MF);
  printf("     If you get errors - check that this is so\n");
  printf("     The default file is located in the McStas data directory - on UNIX this is usually /usr/local/lib/mcstas-2.0/data.\n");
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE

COMPONENT src = Source_simple(
    radius = 0.02, dist = 5, focus_xw = 0.1, focus_yh = 0.1,
    lambda0 = 5, dlambda = 4.99)
  AT (0, 0, 0) RELATIVE Origin

COMPONENT setpol = Set_pol(
    px = 0, py = 1, pz = 0)
  AT (0, 0, 1) RELATIVE src


COMPONENT pol_0 = Pol_monitor(
    restore_neutron=1,xwidth=0.2, yheight=0.2, mx=0, my=1, mz=0)
AT(0,0,1) RELATIVE setpol
COMPONENT polx_0 = PolLambda_monitor(
    xwidth = 0.2, yheight = 0.2, restore_neutron = 1, mx = 1,
    my = 0, mz = 0, Lmin = 0, Lmax = 10, filename="polx_0")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT poly_0 = COPY (polx_0)(mx=0,my=1,mz=0,filename="poly_0")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_0 = COPY (polx_0)(mx=0,my=0,mz=1,filename="polz_0")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT lmon_0 = L_monitor(Lmin=0, Lmax=10,xwidth=0.2, yheight=0.2, filename="lmon_0")
AT(0,0,0) RELATIVE PREVIOUS


COMPONENT field = Pol_simpleBfield(
    xwidth=0.1, yheight=0.1, zdepth=1, filename=MF,
	Bx=0,By=1,Bz=0,fieldFunction=resampled_3to3_magnetic_field,
        Stepx=8,Stepy=8,Stepz=8)
AT(0,0,1) RELATIVE PREVIOUS
/*COMPONENT field = Pol_simpleBfield(*/
/*    xwidth=0.1, yheight=0.1, zdepth=1, filename=MF,*/
/*	Bx=0,By=0,Bz=1e-5,fieldFunction=const_magnetic_field)*/
/*AT(0,0,1) RELATIVE PREVIOUS*/

COMPONENT polx_1 = COPY(polx_0)(filename="polx_1")
AT(0,0,1e-6) RELATIVE PREVIOUS
COMPONENT poly_1 = COPY(poly_0)(filename="poly_1")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_1 = COPY(polz_0)(restore_neutron=0,filename="polz_1")
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT polx_2 = COPY(polx_0)(filename="polx_2")
AT(0,0,0.25) RELATIVE field
COMPONENT poly_2 = COPY(poly_0)(filename="poly_2")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_2 = COPY(polz_0)(restore_neutron=0,filename="polz_2")
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT polx_3 = COPY(polx_0)(filename="polx_3")
AT(0,0,0.5) RELATIVE field
COMPONENT poly_3 = COPY(poly_0)(filename="poly_3")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_3 = COPY(polz_0)(restore_neutron=0,filename="polz_3")
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT polx_4 = COPY(polx_0)(filename="polx_4")
AT(0,0,0.75) RELATIVE field
COMPONENT poly_4 = COPY(poly_0)(filename="poly_4")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_4 = COPY(polz_0)(restore_neutron=0,filename="polz_4")
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT polx_5 = COPY(polx_0)(filename="polx_5")
AT(0,0,1-1e-6) RELATIVE field
COMPONENT poly_5 = COPY(poly_0)(filename="poly_5")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_5 = COPY(polz_0)(restore_neutron=0,filename="polz_5")
AT(0,0,0) RELATIVE PREVIOUS


COMPONENT field_stop = Pol_simpleBfield_stop(magnet_comp_stop=field)
AT(0,0,1) RELATIVE field

COMPONENT polx_6 = COPY(polx_0)(filename="polx_6")
AT(0,0,1) RELATIVE field
COMPONENT poly_6 = COPY(poly_0)(filename="poly_6")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT polz_6 = COPY(polz_0)(restore_neutron=0,filename="polz_6")
AT(0,0,0) RELATIVE PREVIOUS
COMPONENT pol_6 = COPY(pol_0)
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT lmon_6 = COPY(lmon_0)(filename="lmon_6")
AT(0,0,0) RELATIVE PREVIOUS

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END
