/* Instrument: Test_Monitor_Sqw.instr
 *
 * %Identification
 * Written by: E. Farhi
 * Date: Jan 2004
 * Origin: ILL
 *
 * %INSTRUMENT_SITE: Tests_samples
 *
 * A test instrument for the S(q,w) sample, with furnace/container
 *
 * %Description
 * This instrument models a generic, tunable, neutron time-of-flight spectrometer.
 *
 * The incoming flux at the sample brings neutron with 'beam_wavelength' wavelength.
 * The energy resolution at the sample is given as 'beam_resolution_meV'.
 * The beam size at the sample is set to the sample cross section (e.g. ~2 x 5 cm).
 *
 * The sample geometry is either cylindrical ('sample_radius' and 'sample_height') 
 * or spherical ('sample_height=0'). The sample can be hollow when given a thickness
 * 'sample_thickness', or filled ('sample_thickness=0'). When in cylindrical geometry, 
 * it is surrounded by a container with thickness 'container_thickness'. The container
 * material is specified as a powder file name 'container' in the McStas PowderN format.
 * The sample scattering is characterised by its coherent and incoherent contributions
 * given as 'sample_coh' and 'sample_inc' file names in McStas Sqw format.
 *
 * The sample and its container are located inside a cylindrical cylinder with radius
 * 'environment_radius' and thickness 'environment_thickness'. The material is set from
 * the 'environment' file name in the McStas PowderN format (e.g. 'Al.laz').
 *
 * The detector has a cylindrical geometry, with a radius 'sample_detector_distance'
 * and tubes with height 'detector_height'. The detector covers a -30 to 140 deg angular range
 * with 2.54 cm tubes (the number of tubes is computed from the distance).
 * The direct beam (non scattered neutrons) is discarded.
 *
 * The detector produces both (angle,tof) and (q,w) data sets, for:
 *   total scattering
 *   coherent single scattering from sample
 *   incoherent single scattering from sample
 *   multiple scattering from sample
 *   scattering from the container and sample environment
 *
 * Known configurations:
 * ILL_IN4:
 *   beam_wavelength=2, beam_resolution_meV=0.5, 
 *   sample_detector_distance=2.0, detector_height=0.3
 * ILL_IN5:
 *   beam_wavelength=5, beam_resolution_meV=0.1, 
 *   sample_detector_distance=4.0, detector_height=3.0
 * ILL_IN6:
 *   beam_wavelength=4.1, beam_resolution_meV=0.1, 
 *   sample_detector_distance=2.48, detector_height=1.2
 * PSI_Focus:
 *   beam_wavelength=4.1, beam_resolution_meV=0.1, 
 *   sample_detector_distance=2.5, detector_height=1.2
 * FRM2_TOFTOF:
 *   beam_wavelength=3.0, beam_resolution_meV=0.3, 
 *   sample_detector_distance=4.0, detector_height=2.0
 * SNS_SEQUOIA:
 *   beam_wavelength=1.0, beam_resolution_meV=3.0, 
 *   sample_detector_distance=5.5, detector_height=1.2
 * SNS_ARCS:
 *   beam_wavelength=0.3, beam_resolution_meV=20.0, 
 *   sample_detector_distance=3.0, detector_height=1.46
 * NIST_DCS:
 *   beam_wavelength=3.0, beam_resolution_meV=0.2, 
 *   sample_detector_distance=4.0, detector_height=1.2
 * ISIS_MERLIN:
 *   beam_wavelength=1.0, beam_resolution_meV=2.4, 
 *   sample_detector_distance=2.5, detector_height=3.0
 * ISIS_LET: 
 *   beam_wavelength=4.0, beam_resolution_meV=0.1, 
 *   sample_detector_distance=3.5, detector_height=4.0
 *
 * %Example: Ei=4.94 Detector:  M_single_coh_I=4.92e-11
 * %Example: Ei=33 dE=1.07 dt=9.6e-6 Detector: M_single_coh_I=6.25e-10
 *
 * %Parameters
 * INPUT PARAMETERS:
 *  beam_wavelength:          incident neutron beam wavelength        [Angs]
 *  beam_resolution_meV:      incident energy range full width        [meV]
 *  sample_coh:               sample coherent Sqw data file or NULL   [str]
 *  sample_inc:               sample incoherent Sqw data file or NULL [str]
 *  sample_radius:            radius of sample (outer).               [m]
 *  sample_thickness:         thickness of sample. 0=filled           [m]
 *  sample_height:            height of sample.    0=sphere           [m]
 *  sample_detector_distance: distance from sample to detector        [m]
 *  container:                container material or NULL              [str]
 *  container_thickness:      container thickness                     [m]
 *  environment:              sample environment material or NULL     [str]
 *  environment_radius:       sample environment outer radius         [m]
 *  environment_thickness:    sample environment thickness            [m]
 *  detector_height:          detector tubes height                   [m]
 *  
 * %Link
 * The Isotropic_Sqw sample
 * %Link
 * The Samples_Isotropic_Sqw example instrument
 * %End
*/

DEFINE INSTRUMENT Test_Monitor_Sqw(
         beam_wavelength=1.55,
         beam_resolution_meV=0.1,
  string sample_coh="Rb_liq_coh.sqw", 
  string sample_inc="Rb_liq_inc.sqw",
         sample_thickness=1e-4,
         sample_height=0.0168,
         sample_radius=0.005,
  string container="Al.laz", 
         container_thickness=50e-6,
  string environment="Al.laz", 
         environment_radius=0.025, 
         environment_thickness=2e-3,
         detector_height=3, 
         sample_detector_distance=4.0)

DECLARE
%{
/* flags for detector */
 int flag_sample;      /* sample                scatt 1:coh, -1:inc, other multiple*/
 int flag_env;         /* container/environment scatt */

 double dt0, bins=100;
 double Ei=0;

%}

INITIALIZE
%{
  double ki=2*PI/beam_wavelength;         /* wavevector [Angs-1] */
  double vi=ki*K2V;                       /* velocity   [m/s] */
  double t0=sample_detector_distance/vi;  /* elastic travel time sample-detector (in-plane) [s] */
  Ei=VS2E*vi*vi;                          /* incident energy [meV] */
  
  /* compute the time spread at detector for the elastic line
   * set it for the incoming beam: dt = 1/2 t dE/E */
  /* time uncertainty for sample_detector_distance due to beam_resolution_meV */
  dt0 = 0.5*t0*beam_resolution_meV/Ei;
  
  /* compute the number of tubes along the cylindrical detector, for 1 inch tubes */
  bins = ceil((sample_detector_distance*(140+30)*PI/180)/2.54e-2);

  /* display some information for the user */

  printf("%s: lambda=%g [Angs], k=%g [Angs-1], v=%g [m/s], E=%g [meV]. Time=[%g %g %g]\n",
    NAME_CURRENT_COMP, beam_wavelength,ki,vi, Ei, t0*.75, t0, t0*1.5);
  printf("%s: sample is %s, with %s%s geometry.\n",
    NAME_CURRENT_COMP, 
    sample_coh, sample_thickness ? "hollow " : "", 
    sample_height ? "cylindrical" : "spherical");
  if (sample_height && container_thickness)
    printf("%s: container is %s (outer cylinder)\n", NAME_CURRENT_COMP, container);
  if (environment_thickness > 0)
    printf("%s: external environment is %s\n", NAME_CURRENT_COMP, environment);

  if (environment_thickness > 0 && sample_radius > environment_radius-environment_thickness)
    exit(printf("%s: sample radius %g is larger than sample environment %g\n",
      NAME_CURRENT_COMP, sample_radius, environment_radius-environment_thickness));
  if (container_thickness > 0 && environment_thickness > 0 && sample_height > 0
      && sample_radius+container_thickness+0.0001 > environment_radius-environment_thickness)
    exit(printf("%s: sample container radius %g is larger than sample environment %g\n",
      NAME_CURRENT_COMP, sample_radius+container_thickness+0.0001, environment_radius-environment_thickness));
%}

TRACE

COMPONENT a1 = Progress_bar(percent=5)
  AT (0,0,0) ABSOLUTE
EXTEND
%{
 flag_sample=flag_env=0;
%}

/* neutron source =========================================================== */
COMPONENT csource = Source_gen(
   radius   = 0.02, 
   focus_xw = 2*sample_radius, 
   focus_yh = sample_height ? sample_height : 2*sample_radius, 
   dist     = 2.88,
   E0       = Ei, 
   dE       = beam_resolution_meV/2,
   T1=300.0,I1=1)
AT (0,0,0) RELATIVE a1

COMPONENT SamplePos=Arm()
AT (0,0,2.88) RELATIVE a1

COMPONENT SampleIn =Monitor_nD(
  xwidth=2*sample_radius, yheight=sample_height, options="x y", bins=100)
AT (0,0,-fabs(environment_radius)-0.01) RELATIVE SamplePos
EXTEND %{
  /* Models a triangular time distribution from e.g. a chopper system, corresponding with
   * the instrument energy resolution.
   * We assume that in the real instrument, the chopper is close to sample.
   */
  t = randtriangle()*2*dt0;
  flag_sample=flag_env=0;
%}

/* sample position ========================================================== */
/* external shield */
COMPONENT Environment_in=Isotropic_Sqw(
  radius = environment_radius, yheight = 0.1, thickness=environment_thickness,
  Sqw_coh= environment,        concentric=1,  verbose=0)
  WHEN (environment_thickness > 0)
  AT (0, 0, 0) RELATIVE SamplePos
EXTEND %{
  if (SCATTERED) flag_env++;
%}

/* sample container */
COMPONENT Container_in=Isotropic_Sqw(
  radius = sample_radius+0.0001+container_thickness, yheight = sample_height, thickness=container_thickness,
  Sqw_coh=container,                          concentric=1,             verbose=0)
WHEN(sample_height && container_thickness > 0)
AT (0, 0, 0) RELATIVE SamplePos
EXTEND
%{
  if (SCATTERED) flag_env++;
%}

COMPONENT Sample_in=Isotropic_Sqw(
  radius = sample_radius, thickness= sample_thickness, yheight = sample_height,
  Sqw_coh= sample_coh,    Sqw_inc  = sample_inc,       p_interact=0.95, verbose=2)
AT (0, 0, 0) RELATIVE SamplePos
EXTEND
%{
  flag_sample=SCATTERED*(VarSqw.type == 'c' ? 1 : -1);
  
%}

COMPONENT Container_out=COPY(Container_in)(concentric=0)
WHEN(sample_height && container_thickness)
AT (0, 0, 0) RELATIVE SamplePos
EXTEND
%{
  if (SCATTERED) flag_env++;
%}

/* external shield */
COMPONENT Environment_out=COPY(Environment_in)(concentric=0)
WHEN (environment_thickness > 0)
AT (0, 0, 0) RELATIVE SamplePos
EXTEND %{
  if (SCATTERED) flag_env++;
%}

COMPONENT SampleOut = Arm()
AT (0, 0, 0) RELATIVE SamplePos

/* detectors ================================================================ */

/* S(q,w) monitors */
/* the incoming beam is recorded at index -7 from here */
COMPONENT Detector_nM = Monitor_Sqw(
  radius=sample_detector_distance, yheight=detector_height, bins=bins, index=-7)
  WHEN (flag_sample || flag_env)
  AT (0, 0, 0) RELATIVE PREVIOUS 

COMPONENT Detector_nM_coh = COPY(Detector_nM)(index=-8)
  WHEN (flag_sample == 1)
  AT (0, 0, 0) RELATIVE PREVIOUS

COMPONENT Detector_nM_inc = COPY(Detector_nM)(index=-9)
  WHEN (flag_sample == -1)
  AT (0, 0, 0) RELATIVE PREVIOUS

COMPONENT Detector_nM_multi = COPY(Detector_nM)(index=-10)
  WHEN fabs(flag_sample) > 1
  AT (0, 0, 0) RELATIVE PREVIOUS
  
COMPONENT Detector_nM_env = COPY(Detector_nM)(index=-11)
  WHEN (flag_env)
  AT (0, 0, 0) RELATIVE PREVIOUS
  
/* I(angle, tof) monitors */

COMPONENT M_total = Monitor_nD(
  radius=sample_detector_distance, yheight=detector_height, bins=bins, 
  options="angle limits=[-30 140], auto time")
  WHEN (flag_sample || flag_env)
  AT (0,0,0) RELATIVE SampleOut

/* single coherent */
COMPONENT M_single_coh = COPY(M_total) 
  WHEN (flag_sample == 1)
  AT (0,0,0) RELATIVE SampleOut

/* single incoherent */
COMPONENT M_single_inc = COPY(M_total) 
  WHEN (flag_sample == -1)
  AT (0,0,0) RELATIVE SampleOut

COMPONENT M_multi = COPY(M_total) 
  WHEN fabs(flag_sample) > 1
  AT (0,0,0) RELATIVE SampleOut

COMPONENT M_env_container = COPY(M_total) 
  WHEN (flag_env)
  AT (0,0,0) RELATIVE SampleOut

END

