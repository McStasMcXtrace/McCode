/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_simpleBfield
*
* %I
* Written by: Erik B Knudsen, Peter Christiansen and Peter Willendrup
* Date: July 2011
* Version: $Revision$
* Origin: RISOE
* Release: McStas 1.12
*
* Magnetic field component.
*
* %D
*
* Region with a definable magnetic field.
*
* The component is nestable. This means that it requires a
*
* // START MAGNETIC FIELD
* COMPONENT msf =
* Pol_simpleBfield(xwidth=0.08, yheight=0.08, zdepth=0.2, Bx=0, By=-0.678332e-4, Bz=0)
*      AT (0, 0, 0) RELATIVE armMSF
*
* // HERE CAN BE OTHER COMPONENTS INSIDE THE MAGNETIC FIELD
*
* // STOP MAGNETIC FIELD
* COMPONENT msf_stop = Pol_simpleBfield_stop(magnet_comp_stop=msf)
*      AT (0, 0, 0) RELATIVE armMSF
*
* In between the two component instances the propagation routine
* PROP_DT also handles spin propagation.
* The current algorithm used for spin propagation is:
* SimpleNumMagnetPrecession
* in pol-lib.
*
* Example: Pol_simpleBfield(xwidth=0.1, yheight=0.1, zdepth=0.2, Bx=0, By=1, Bz=0)
*          Pol_simpleBfield(xwidth=0.1, yheight=0.1, zdepth=0.2,
*            filename="bfield.dat", fieldFunction=table_magnetic_field)
*
* The magetic field may be given as any definable c-function with a specific footprint:
*   int func(double x, double y, double z, double t, double *bx, double *by, double *bz, void *data)
* where the magnetic field at coordinates (x,y,z, t) is returned in the variables 
* pointed to by bx,by, and bz. Additional parameters to be handed to the function
* should be handed to the function using the pointer data.
*
* Functions supplied by the system are:
* 1. const_magnetic_field: Constant field (Bx,By,Bz) within the region
* 2. rot_magnetic_field: Field is initially (0,By,0) but after a length of zdepth 
*      has rotated to (By,0,0)
* 3. majorana_magnetic_field: Field is initially (Bx,By,0) liearly transforms to 
*      (-Bx,By,0) after zdepth where By<<Bx
* 4. table_magnetic_field: The magnetic field is read from a text file where it is 
*      specified as a point cloud with N rows of 6 columns:
*      x y z Bx By Bz
*    the B field map is resampled with Stepx*Stepy*Stepz points. 
*    Use Stepx=Stepy=Stepz=0 to skip resampling and use the table as is.
* 5. resampled_3to3_magnetic_field
*
* Users may specify any other function with the required footprint to have any 
* other field. Note that coordinates refer the coordinate system defined by this 
* component.
*
* The magnetic field is turned on by an instance of this component, and turned 
* off by an instance of Pol_simpleBfield_stop. Anything in between is considered 
* inside the field.
*
* When using table_magnetic_field or resampled_3to3_magnetic_field as
* fieldFunction the input data is first resampled to speed up the interpolation.
* With table_magnetic_field only Stepx is used, and this defines the total number
* of points to use during resampling (should be at least the number of points 
* present in the input table).
* With resampled_3to3_magnetic_field both Stepx, Stepy and Stepz is used to
* determine the number of points to use in each individual dimension. Here the
* total number of resample points are the product Stepx*Stepy*Stepz (which again 
* should exceed the number of points in the input table).
*
* %P
* INPUT PARAMETERS:
*
* xwidth:  [m]       Width of opening.
* yheight: [m]       Height of opening.
* zdepth:  [m]       Length of field.
* Bx:      [T]       Parameter used for x composant of field.
* By:      [T]       Parameter used for y composant of field.
* Bz:      [T]       Parameter used for z composant of field.
* fieldFunction [pointer] Function describing the magnetic field.
* filename []        file where the magnetic field is tabulated.
* Stepx    []        Number of points in x to use during resampling (increases precision in x dimension)
* Stepy    []        Number of points in y to use during resampling (increases precision in y dimension)
* Stepz    []        Number of points in z to use during resampling (increases precision in z dimension)
*
* OUTPUT PARAMETERS:
*
* gz:             z-component of gravity (m/s/s)
* parPtr:         Pointer to component magnet parameters (pointer)
*
* %E
****************************************************************************/

DEFINE COMPONENT Pol_simpleBfield
DEFINITION PARAMETERS (fieldFunction=const_magnetic_field)
SETTING PARAMETERS (xwidth, yheight,zdepth,
                    Bx, By, Bz,
                    string filename="bfield.dat",
                    Stepx=100, Stepy=0, Stepz=0)
OUTPUT PARAMETERS(gz, magnet, parPtr)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
  %include "pol-lib"
  double fmax(double, double);
  double fmin(double, double);

  int table_magnetic_field(double x, double y, double z, double t, double *bx, double *by, double *bz, void *data){
    interpolate3x3( (treeNode *) data, x,y,z, bx, by, bz); /*for now just ignore time*/
  }

%}


DECLARE
%{
  /*   Larmor frequency and scalar product threshold*/
  double gz;
  void *parPtr;
  mcmagnet_field_info *magnet;
%}

INITIALIZE
%{
  double gx, gy;
  Coords localG = rot_apply(ROT_A_CURRENT_COMP, coords_set(0,-GRAVITY,0));

  if (fieldFunction==const_magnetic_field){
    double *t=malloc(3*sizeof(double));
    t[0]=Bx;
    t[1]=By;
    t[2]=Bz;
    parPtr=(void *)t;
  } else if (fieldFunction==rot_magnetic_field){
    double *t=malloc(2*sizeof(double));
    t[0]=By;
    t[1]=zdepth;
    parPtr=(void *)t;
  } else if (fieldFunction==majorana_magnetic_field){
    double *t=malloc(3*sizeof(double));
    t[0]=Bx;
    t[1]=By;
    t[2]=zdepth;
    parPtr=(void *)t;
  } else if (fieldFunction==table_magnetic_field){
    /*initialize the interpolation vertex structure*/
    vertex   **vertices=NULL;
    treeNode  *tree=NULL;
    int        r=-1;
    
    vertices=kdtree_loadPoints(filename, &r);
    if (vertices==NULL || r < 0) {
      fprintf(stderr, "%s: ERROR: Failed to read magnetic field table file %s (r=%d). Aborting\n",NAME_CURRENT_COMP, filename, r);
      exit(1);
    }
    printf("%s: Read %d rows from file %s.\n", NAME_CURRENT_COMP, r, filename);
    /*resampling to specified number of points*/
    if (Stepx || Stepy || Stepz) {
      vertex **vertices2=NULL;
      if (!Stepy) Stepy=1;
      if (!Stepz) Stepz=1;
      if (!Stepx) Stepx=1;
      Stepx = Stepx*Stepy*Stepz;
      int steps[] = { Stepx, 0, 0 };
      printf("%s: Resampling to %g points and building mesh.\n", NAME_CURRENT_COMP, Stepx);
      vertices2 = resample(vertices, r, steps);
      if (vertices2) {
        free(vertices);
        vertices  = vertices2;
      }
    } else {
      /* re-use table as is, but make sure it is sorted */
      printf("%s: Sorting mesh.\n", NAME_CURRENT_COMP);
      qsort(vertices, r, sizeof(vertex*), x_compare);
      Stepx = r;
      
      /* save current B field table */
      char tmp_path[256];
      
      snprintf(tmp_path, 256, "%s%c%s.Bxyz", mcdirname ? mcdirname : ".", MC_PATHSEP_C, filename);
      dump_table(vertices, Stepx, tmp_path);
    }
    printf("%s: Adding mesh to k-d tree.\n", NAME_CURRENT_COMP);
    tree = kdtree_addToTree(vertices, 0, Stepx-1, 0);
    
    free(vertices);
    parPtr=(void *) tree;
  } else if (fieldFunction==resampled_3to3_magnetic_field){
    /* initialize the interpolation data */
    resampled_opts *opts = calloc(1, sizeof(resampled_opts));
    if (Stepx && !Stepy) Stepy=Stepx;
    if (Stepx && !Stepz) Stepz=Stepx;
    opts->steps[0] = Stepx;
    opts->steps[1] = Stepy;
    opts->steps[2] = Stepz;
    opts->table_path = filename;
    opts->between = betweenG;
    parPtr = (void*) opts;
  }

  coords_get(localG, &gx, &gy, &gz);
  if(!mcgravitation)
    gz = 0;

  if ((xwidth<=0) || (yheight<=0) || (zdepth<=0)) {
    fprintf(stderr, "Pol_filter: %s: Null or negative volume!\n"
	    "ERROR      (xwidth, yheight, zdepth). Exiting\n",
	    NAME_CURRENT_COMP);
    exit(1);
  }
%}

TRACE
%{
  //enter
  PROP_Z0;
  /*terminate neutrons which miss the component*/
  if (2*x>xwidth || 2*x<-xwidth || 2*y>yheight || 2*y<-yheight){
    ABSORB;
  }
  mcmagnet_push(fieldFunction,&(ROT_A_CURRENT_COMP),&(POS_A_CURRENT_COMP),0,parPtr);
//  mcmagnet_print_stack();
%}

MCDISPLAY
%{
  magnify("xy");
  rectangle(0,0,0,xwidth,yheight,0);
%}

END
