/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2011, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: TOF2Q_cylPSD_monitor
*
* %I
* Written by: Anette Vickery, derived from Lefmann TOF_cylPSD
* Date: October 2000
* Version: $Revision$
* Origin: Risoe
* Release: McStas 1.12c
* Modified by: Anette Vickery, October 9, 2012
*
* Cylindrical (2pi) Time-of-flight to Q monitor.
* Calculates Q from TOF and known nominal grazing angle theta:
* E = VS2E*(L_flight/(t-T_zero))*(L_flight/(t-T_zero));
*    Q=2*sqrt(E/2.072)*sin(theta);
*
* %P
* INPUT PARAMETERS:
*
* radius:   Cylinder radius (m)
* yheight:   Cylinder height (m)
* nQ:    Number of Q bins (1)
* ny:    Number of y bins (1)
* yheight: Height of cylinder (m)
* ymin:  Minimum value of y monitored (m)
* ymax:  Maximum value of y monitored (m)
* Qmin: Beginning of Q-range
* Qmax: End of Q-range
* T_zero: Beginning of time window (s)
* L_flight: Nominal flightpath moderator--detector
* theta: Nominal grazing angle 
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* TOF_N:    Array of neutron counts
* TOF_p:    Array of neutron weight counts
* TOF_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT TOF2Q_cylPSD_monitor
DEFINITION PARAMETERS (nQ, string filename, ny)
SETTING PARAMETERS (radius, yheight,  Qmin, Qmax, ymin=0, ymax=0, T_zero, L_flight, restore_neutron=0,theta)
OUTPUT PARAMETERS (TOF_N, TOF_p, TOF_p2)
DECLARE
  %{
    double TOF_N[nQ][ny];
    double TOF_p[nQ][ny];
    double TOF_p2[nQ][ny];
  %}
INITIALIZE
  %{
    int i,j;
	if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }
//    tt_0=t_0*1e-6;
//    tt_1=t_1*1e-6;
    for (i=0; i<nQ; i++)
      for (j=0; j<ny; j++)
      {
        TOF_N[i][j] = 0;
        TOF_p[i][j] = 0;
        TOF_p2[i][j] = 0;
      }

  %}
TRACE
  %{
    int i,j;
    double cyl_t0,cyl_t1,dt,phi;
    double E,Q;

    if(!cylinder_intersect(&cyl_t0, &cyl_t1, x,y,z,vx,vy,vz, radius, yheight))
     /* No hit */
      ABSORB;
    if(cyl_t0>0)  /* Neutron hits cylinder from the outside */
      ABSORB;
    dt=cyl_t1;
    PROP_DT(dt);
    if(y>=yheight/2 || y<= -yheight/2)
      ABSORB;  /* Neutron hits cylinder ends; no detectors here */
 
    E = VS2E*(L_flight/(t-T_zero))*(L_flight/(t-T_zero));

    /*i = floor((t-tt_0)*nt/(tt_1-tt_0));               Bin number */
      j = floor((x - ymin)*ny/(ymax - ymin));
// printf("--------------- E = %g meV ---------------  \n",E);
// printf("--------------- sqrt4 = %g meV ---------------  \n",sqrt(4));
// printf("--------------- lambda = %g Å ---------------  \n",2*PI/sqrt(E/2.072));
     Q=2*sqrt(E/2.072)*sin(theta);
     // printf("--------------- Q = %g Å ---------------  \n",Q);
     i = floor((Q-Qmin)*nQ/(Qmax-Qmin));

      TOF_N[i][j]++;
      TOF_p[i][j] += p;
      TOF_p2[i][j] += p*p;
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "Cylindrical TOF2E PSD monitor",
        "TOF2Q [Ang^-1]",
        "Y position [cm]",
        Qmin, Qmax, ymin*100.0, ymax*100.0,
        nQ, ny,
        &TOF_N[0][0],&TOF_p[0][0],&TOF_p2[0][0],
        filename);
  %}

MCDISPLAY
%{
  magnify("y");
  circle("xz", 0,0,0,radius);
%}

END




















































