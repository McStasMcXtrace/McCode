/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Divlambda_monitor
*
* %I
* Written by: Kristian Nielsen
* Date: 1999
* Version: $Revision: 1.20 $
* Origin: Risoe
* Release: McStas 1.6
*
* Divergence/wavelength monitor.
*
* %Description
* 2D detector for intensity as a function of both horizontal divergence
* and wavelength.
*
* Example: Divlambda_monitor(nL=20, nh=20, filename="Output.div",
*           xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*           maxdiv_h=2, Lmin=2, Lmax=10)
*
* %Parameters
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* nL:       Number of bins in wavelength (1)
* nh:       Number of bins in divergence (1)
* maxdiv_h: Maximal horizontal divergence detected (degrees)
* Lmin:     Minimum wavelength detected (AA)
* Lmax:     Maximum wavelength detected (AA)
* filename: Name of file in which to store the detector image (string)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* Div_N:    Array of neutron counts
* Div_p:    Array of neutron weight counts
* Div_p2:   Array of second moments
*
* %End
*******************************************************************************/

DEFINE COMPONENT DivLambda_monitor
DEFINITION PARAMETERS (nL=20, nh=20)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, maxdiv_h=2, Lmin, Lmax, restore_neutron=0)
OUTPUT PARAMETERS (Div_N, Div_p, Div_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 
DECLARE
  %{
    double Div_N[nL][nh];
    double Div_p[nL][nh];
    double Div_p2[nL][nh];
  %}
INITIALIZE
  %{
    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("Divlambda_monitor: %s: Null detection area !\n"
                   "ERROR              (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nL; i++)
     for (j=0; j<nh; j++)
     {
      Div_N[i][j] = 0;
      Div_p[i][j] = 0;
      Div_p2[i][j] = 0;
     }
  %}
TRACE
  %{
    int i,j;
    double div;
    double lambda;

    PROP_Z0;
    lambda = (2*PI/V2K)/sqrt(vx*vx + vy*vy + vz*vz);
    if (x>xmin && x<xmax && y>ymin && y<ymax &&
        lambda > Lmin && lambda < Lmax)
    {
      div = RAD2DEG*atan2(vx,vz);
      if (div < maxdiv_h && div > -maxdiv_h)
      {
        i = floor((lambda - Lmin)*nL/(Lmax - Lmin));
        j = floor((div + maxdiv_h)*nh/(2.0*maxdiv_h));
        Div_N[i][j]++;
        Div_p[i][j] += p;
        Div_p2[i][j] += p*p;
        SCATTER;
      }
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "Wavelength-divergence monitor",
        "Wavelength [AA]",
        "divergence [deg]",
        Lmin, Lmax, -maxdiv_h, maxdiv_h,
        nL, nh,
        &Div_N[0][0],&Div_p[0][0],&Div_p2[0][0],
        filename);
  %}

MCDISPLAY
  %{
    magnify("xy");
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
%}

END
