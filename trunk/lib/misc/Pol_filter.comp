/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_filter
*
* %I
* Written by: Peter Christiansen
* Date: July 2006
* Version: $Revision: 1.1 $
* Origin: Risoe
* Release: McStas 1.10
*
* Polarisation filter (unphysical).
*
* %D A square single UNPHYSICAL components that polarises the beam along a 
* given normalized vector (fx, fy, fz).
* The probability for the incoming spin to be parallel to f-vector is:
*  Pup=(1+mx*fx+fy*sy+fz*sz)/2, Pdown=1.0-Pup
*
* Transmission probability T=Tup*Pup + Tdown*Pdown
* Outgoing polarization vector = (Tup*Pup - Tdown*Pdown)/T*(fx, fy, fz)
*
* THIS COMPONENT IS USEFUL FOR TESTING POLARIZATION COMPONENTS.
* 
* Example: Pol_filter(xw=0.1, yh=0.1, fx=0, fy=-1, fz=0, Tup=1, Tdown=0)
*
* %P
* INPUT PARAMETERS:
*
* xw:       Width/diameter of detector (m). 
* yh:       Height of detector (m). 
* fx:       X-component of filter vector (can be negative) (1)
* fy:       Y-component of filter vector (can be negative) (1)
* fz:       Z-component of filter vector (can be negative) (1)
* Tup:      Transmission probability for spins parallel to f-vector (1)
* Tdown:    Transmission probability for spins anti-parallel to f-vector (1)
*
* OUTPUT PARAMETERS:
*
* %E
*******************************************************************************/

DEFINE COMPONENT Pol_filter
DEFINITION PARAMETERS (xw=0, yh=0, Tup=1, Tdown=0)
SETTING PARAMETERS (fx=0, fy=0, fz=0)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
POlARISATION PARAMETERS (sx,sy,sz)
     
DECLARE
%{
  %}

INITIALIZE
%{
  if (fx==0 && fy==0 && fz==0) {
    printf("Pol_filter: %s: NULL vector defined!\n"
	   "ERROR      (fx, fy, fz). Exiting",
           NAME_CURRENT_COMP);
    exit(0);
  }
  
  if ((xw<=0) || (yh <= 0)) {
    printf("Pol_filter: %s: Null detection area !\n"
	   "ERROR      (xwidth,yheight). Exiting",
           NAME_CURRENT_COMP);
    exit(0);
  }
  
  if (Tup<0 || Tup > 1 || Tdown<0 || Tdown > 1) {
    printf("Pol_filter: %s: Wrong transmission probability!\n"
	   "ERROR      (Tup, Tdown). Exiting",
           NAME_CURRENT_COMP);
    exit(0);
  }
  
  NORM(fx, fy, fz);
  
  %}

TRACE
%{
  double Pup, Pdown, Ptrans, Pol_out;
  
  PROP_Z0;
  if (inside_rectangle(x, y, xw, yh)) {
    
    Pup = (1.0+scalar_prod(fx, fy, fz, sx, sy, sz))/2.0;
    Pdown = 1.0-Pup;
    
    /* transmission probability */
    Ptrans  = Pup*Tup + Pdown*Tdown;
    
    if(Ptrans==0) {
      
      ABSORB;
    }
    
    p *= Ptrans;

    /* outgoing polarisation along (fx, gy, fz) */
    Pol_out = (Pup*Tup - Pdown*Tdown)/Ptrans;
    
    sx = Pol_out * fx;
    sy = Pol_out * fy;
    sz = Pol_out * fz;
    
    SCATTER;
  }
  
  %}

MCDISPLAY
%{
  magnify("xy");
  rectangle("xy", 0, 0, 0, xw, yh);
  %}

END
