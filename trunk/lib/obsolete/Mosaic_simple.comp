/*******************************************************************************
*
* McStas, version 1.2
*         Maintained by Kristian Nielsen and Kim Lefmann,
*         Copyright (C) Risoe National Laboratory 1999
*
* Component: Mosaic_simple
*
* Flat, infinitely thin mosaic crystal, useful as a monochromator or analyzer.
* The mosaic is isotropic gaussian, with a given FWHM perpendicular to the
* scattering vector.
* For an unrotated monochromator component, the crystal plane lies in the y-z
* plane (ie. parallel to the beam).
*
* INPUT PARAMETERS:
*
* zmin:    Lower z-bound of crystal (m)
* zmax:    Upper z-bound of crystal (m)
* ymin:    Lower y-bound of crystal (m)
* ymax:    Upper y-bound of crystal (m)
* mosaic:  Mosaic (FWHM) (arc minutes)
* R0:      Maximum reflectivity (1)
* Qx:      X coordinate of scattering vector (AA-1)
* Qy:      X coordinate of scattering vector (AA-1)
* Qz:      X coordinate of scattering vector (AA-1)
*
*******************************************************************************/

DEFINE COMPONENT Mosaic_simple
DEFINITION PARAMETERS (zmin, zmax, ymin, ymax, mosaic, R0, Qx, Qy, Qz)
SETTING PARAMETERS ()
OUTPUT PARAMETERS (X,W,Q,mos_rms)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)

DECLARE
%{
  /* ToDo: Define these arrays only once for all instances. */
  /* Values for Gauss quadrature. Taken from Brice Carnahan, H. A. Luther and
     James O Wilkes, "Applied numerical methods", Wiley, 1996, page 103. */
  double X[] = {-0.987992518020485, 0.937273392400706, 0.848206583410427,
                0.724417731360170, 0.570972172608539, 0.394151347077563,
                0.201194093997435, 0, 0.201194093997435,
                0.394151347077563, 0.570972172608539, 0.724417731360170,
                0.848206583410427, 0.937273392400706, 0.987992518020485};
  double W[] = {0.030753241996117, 0.070366047488108, 0.107159220467172,
                0.139570677926154, 0.166269205816994, 0.186161000115562,
                0.198431485327111, 0.202578241925561, 0.198431485327111,
                0.186161000115562, 0.166269205816994, 0.139570677926154,
                0.107159220467172, 0.070366047488108, 0.030753241996117};
  double Q;                     /* Length of scattering vector */
  double q0ux, q0uy, q0uz;      /* Unit vector parrallel to nominal Q */
  double mos_rms;               /* root-mean-square of mosaic, in radians */
#define GAUSS(x,mean,rms) \
  (exp(-((x)-(mean))*((x)-(mean))/(2*(rms)*(rms)))/(sqrt(2*PI)*(rms)))
%}

INITIALIZE
%{
  Q = sqrt(Qx*Qx + Qy*Qy + Qz*Qz);
  q0ux = Qx/Q;
  q0uy = Qy/Q;
  q0uz = Qz/Q;
  mos_rms = MIN2RAD*mosaic/sqrt(8*log(2));
%}

TRACE
%{
  double y1,z1,t1,dt,kix,kiy,kiz,ratio,order,q0x,q0y,q0z,k,q0,theta;
  double bx,by,bz,kux,kuy,kuz,ax,ay,az,phi;
  double cos_2theta,k_sin_2theta,cos_phi,sin_phi,kfx,kfy,kfz,q_x,q_y,q_z;
  double delta,p_reflect,total,c1x,c1y,c1z,width,tmp;
  int i;

  if(vx != 0.0 && (dt = -x/vx) >= 0.0)
  {                             /* Moving towards crystal? */
    y1 = y + vy*dt;             /* Propagate to crystal plane */
    z1 = z + vz*dt;
    t1 = t + dt;
    if (z1>zmin && z1<zmax && y1>ymin && y1<ymax)
    {                           /* Intersect the crystal? */
      kix = V2K*vx;             /* Initial wave vector */
      kiy = V2K*vy;
      kiz = V2K*vz;
      /* Get reflection order and corresponding nominal scattering vector q0
         of correct length and direction. Only the order with the closest
         scattering vector is considered */
      ratio = -2*(kix*Qx + kiy*Qy + kiz*Qz)/(Q*Q);
      order = floor(ratio + .5);
      if(order == 0.0)
        order = ratio < 0 ? -1 : 1;
      /* Order will be negative when the neutron enters from the back, in
         which case the direction of Q0 is flipped. */
      if(order < 0)
        order = -order;
      /* Make sure the order is small enough to allow Bragg scattering at the
         given neutron wavelength */
      k = sqrt(kix*kix + kiy*kiy + kiz*kiz);
      kux = kix/k;              /* Unit vector along ki */
      kuy = kiy/k;
      kuz = kiz/k;
      if(order > 2*k/Q)
        order--;
      if(order > 0)             /* Bragg scattering possible? */
      {
        q0x = order*Qx;
        q0y = order*Qy;
        q0z = order*Qz;
        if(ratio < 0)
        {
          q0x = -q0x; q0y = -q0y; q0z = -q0z;
        }
        q0 = order*Q;
        theta = asin(q0/(2*k)); /* Actual bragg angle */
        /* Make MC choice: reflect or transmit? */
        delta = asin(-(kux*q0x + kuy*q0y + kuz*q0z)/q0) - theta;
        p_reflect = R0*exp(-delta*delta/(2*mos_rms*mos_rms));
        if(rand01() < p_reflect)
        {                       /* Reflect */
          cos_2theta = cos(2*theta);
          k_sin_2theta = k*sin(2*theta);
          /* Get unit normal to plane containing ki and most probable kf */
          vec_prod(bx, by, bz, kix, kiy, kiz, q0x, q0y, q0z);
          NORM(bx,by,bz);
          bx *= k_sin_2theta;
          by *= k_sin_2theta;
          bz *= k_sin_2theta;
          /* Get unit vector normal to ki and b */
          vec_prod(ax, ay, az, bx, by, bz, kux, kuy, kuz);
          /* Compute the total scattering probability at this ki */
          total = 0;
          width = 5*mos_rms;
          c1x = kix*(cos_2theta-1);
          c1y = kiy*(cos_2theta-1);
          c1z = kiz*(cos_2theta-1);
          for(i = 0; i < (sizeof(X)/sizeof(double)); i++)
          {
            phi = width*X[i];
            cos_phi = cos(phi);
            sin_phi = sin(phi);
            q_x = c1x + cos_phi*ax + sin_phi*bx;
            q_y = c1y + cos_phi*ay + sin_phi*by;
            q_z = c1z + cos_phi*az + sin_phi*bz;
            tmp = (q_x*q0x + q_y*q0y + q_z*q0z)/
	          (sqrt(q_x*q_x + q_y*q_y + q_z*q_z)*q0);
	    delta = tmp < 1 ? acos(tmp) : 0; /* Avoid rounding errors */
            p_reflect = GAUSS(delta,0,mos_rms);
            total += W[i]*p_reflect;
          }
          total *= width;
          /* Choose point on Debye-Scherrer cone. Use the double
             crystal mosaic (since the scattering angle is two times
             the Bragg angle), and correct for any error by adjusting
             the neutron weight later */
          phi = 2*mos_rms*randnorm();
          /* Compute final wave vector kf and scattering vector q = ki - kf */
          cos_phi = cos(phi);
          sin_phi = sin(phi);
          q_x = c1x + cos_phi*ax + sin_phi*bx;
          q_y = c1y + cos_phi*ay + sin_phi*by;
          q_z = c1z + cos_phi*az + sin_phi*bz;
          tmp = (q_x*q0x + q_y*q0y + q_z*q0z)/
	        (sqrt(q_x*q_x + q_y*q_y + q_z*q_z)*q0);
	  delta = tmp < 1 ? acos(tmp) : 0; /* Avoid rounding errors */
          p_reflect = GAUSS(delta,0,mos_rms);
          x = 0;
          y = y1;
          z = z1;
          t = t1;
          vx = K2V*(kix+q_x);
          vy = K2V*(kiy+q_y);
          vz = K2V*(kiz+q_z);
          p *= p_reflect/(total*GAUSS(phi,0,2*mos_rms));
        } /* End MC choice to reflect or transmit neutron */
      } /* End bragg scattering possible */
    } /* End intersect the crystal */
  } /* End neutron moving towards crystal */
%}

MCDISPLAY
%{
  double len = 0.5*sqrt((ymax-ymin)*(ymax-ymin) + (zmax-zmin)*(zmax-zmin));
  magnify("zy");
  multiline(5, 0.0, (double)ymin, (double)zmin,
               0.0, (double)ymax, (double)zmin,
               0.0, (double)ymax, (double)zmax,
               0.0, (double)ymin, (double)zmax,
               0.0, (double)ymin, (double)zmin);
  line(0, 0, 0,                 /* Draw Q0 vector */
       (double)Qx/Q*len, (double)Qy/Q*len, (double)Qz/Q*len);
%}

END
