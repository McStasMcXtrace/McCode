/*******************************************************************************
*
* McStas, the neutron ray-tracing package: Powder1.comp
*         Copyright 1997-2001 Risoe National Laboratory, Roskilde, Denmark
*
* %I
* Written by: E.M.Lauridsen, N.B.Christensen, A.B.Abrahamsen
* Date: 4.2.98
* Version: $Revision: 1.10 $
* Origin: McStas 1.5
*
* General powder sample with a single scattering vector.
*
* %P
*
* INPUT PARAMETERS
*       
* d_phi0    : Focussing angle corresponding to the vertical dimensions
*             of the detector placed at the right distance (deg) 
* radius    : Radius of sample in (x,z) plane (m)       
* h         : Height of sample y direction (m)
* pack      : Packing factor (1)
* Vc        : Volume of unit cell (AA^3)
* sigma_a   : Absorption cross section per unit cell at 2200 m/s (fm^2)
*
* q         : Scattering vector of reflection (AA^-1)
* j         : Multiplicity of reflection (1)
* F2        : Structure factor of reflection (fm^2)
* DW        : Debye-Waller factor of reflection (1)
* target_x  : 
* target_y  : position of target to focus at (m)
* target_z  :
*
* Variables calculated in the component
*
* my_s      : Attenuation factor due to scattering (m^-1)
* my_a      : Attenuation factor due to absorbtion (m^-1)
*
* %L
* <A HREF="http://neutron.risoe.dk/mcstas/components/Powder1/">Old
* description</A>, with explanation of focusing.
* %L
* <A HREF="http://neutron.risoe.dk/mcstas/components/tests/powder/">
* Test results</A> (not up-to-date).
*
* %E
*******************************************************************************/

DEFINE COMPONENT Powder1
DEFINITION PARAMETERS ()
SETTING PARAMETERS (d_phi0, radius, h, pack, Vc, sigma_a, j, q, F2, DW,
		    target_x, target_y, target_z)
OUTPUT PARAMETERS (my_s_v2, my_a_v, q_v)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
DECLARE
%{
  double my_s_v2, my_a_v, q_v;
%}
INITIALIZE
%{
  my_a_v = sigma_a/Vc*2200;           /* Is not yet divided by v */
  my_s_v2 = PI*PI*PI*pack*j*F2*DW/(Vc*Vc*V2K*V2K*q);  
                                      /* Is not yet divided by v^2 */
  q_v = q*K2V;
%}                                                                             
TRACE
%{
  double t0, t1, v, l_full, l, l_1, dt, d_phi, theta, my_s;
  double aim_x, aim_y, aim_z, axis_x, axis_y, axis_z;
  double arg, tmp_vx, tmp_vy, tmp_vz, vout_x, vout_y, vout_z;

  if(cylinder_intersect(&t0, &t1, x, y, z, vx, vy, vz, radius, h))
  {
    if(t0 < 0)
      ABSORB;
    /* Neutron enters at t=t0. */
    v = sqrt(vx*vx + vy*vy + vz*vz);
    l_full = v * (t1 - t0);             /* Length of full path through sample */
    dt = rand01()*(t1 - t0) + t0; /* Time of scattering */
    PROP_DT(dt);                /* Point of scattering */
    l = v*dt;                   /* Penetration in sample */

    /* Choose point on Debye-Scherrer cone */
    d_phi = d_phi0*DEG2RAD/2.0*randpm1();
    p *= d_phi0/360.0;
    arg = q_v/(2.0*v);
    if(arg > 1)
      ABSORB;                   /* No bragg scattering possible*/
    theta = asin(arg);          /* Bragg scattering law */

    aim_x = target_x-x;         /* Vector pointing at target (anal./det.) */
    aim_y = target_y-y;
    aim_z = target_z-z;
    vec_prod(axis_x, axis_y, axis_z, vx, vy, vz, aim_x, aim_y, aim_z);
    rotate(tmp_vx, tmp_vy, tmp_vz, vx, vy, vz, 2*theta, axis_x, axis_y, axis_z);
    rotate(vout_x, vout_y, vout_z, tmp_vx, tmp_vy, tmp_vz, d_phi, vx, vy, vz);
    vx = vout_x;
    vy = vout_y;
    vz = vout_z;

    if(!cylinder_intersect(&t0, &t1, x, y, z, 
                           vout_x, vout_y, vout_z, radius, h))
    {
      /* Strange error: did not hit cylinder */
      printf("FATAL ERROR: Did not hit cylinder from inside.\n");
      exit(1);
    }
    l_1 = v*t1;

    my_s = my_s_v2/(v*v);
    p *= l_full*my_s*exp(-(my_a_v/v+my_s)*(l+l_1));
  }
  else
    ABSORB;
%}

MCDISPLAY
%{
  magnify("xyz");
  circle("xz", 0,  h/2.0, 0, radius);
  circle("xz", 0, -h/2.0, 0, radius);
  line(-radius, -h/2.0, 0, -radius, +h/2.0, 0);
  line(+radius, -h/2.0, 0, +radius, +h/2.0, 0);
  line(0, -h/2.0, -radius, 0, +h/2.0, -radius);
  line(0, -h/2.0, +radius, 0, +h/2.0, +radius);
%}
END
