/*******************************************************************************
*
* McStas, version 1.6-ILL
*         Maintained by Kristian Nielsen and Kim Lefmann,
*         Risoe National Laboratory, Roskilde, Denmark
*
* Component: FermiChopper.
*
* %Identification
*
* Written by: 	Markus Poehlmann     <Markus.Poehlmann@ph.tum.de>
*		Christian Carbogno   <carbogno@ph.tum.de>
*             	and Helmut Schober   <schober@ill.fr> 
*              
* Origin:     ILL Grenoble / TU Muenchen
* Version:    2.0 (May 2002)  
*
* Models a fermi chopper with optional supermirror coated blades
* supermirror facilities may be disabled by setting m = 0, R0=0
*  
* %Parameters
* INPUT PARAMETERS:
*
* Geometrical chopper constants:
*
* rad:     (m)    	chopper cylinder radius
* ymin     (m)    	lower y bound of cylinder
* ymax     (m)    	upper y bound of cylinder
* Nslit    (1)    	number of chopper slits  
* slit:    (m)    	Length of the short blades
* w        (m)    	width of one chopper slit
*
* nu:      (Hz)   	chopper frequency
*
* Supermirror constants:
*
* m:       (1)    	m-value of material. Zero means completely absorbing.
* alpham:  (AA)   	Slope of reflectivity
* Qc:      (AA-1) 	Critical scattering vector
* Wi:      (AA-1) 	Width of supermirror cut-off
* R0:      (1)    	Low-angle reflectivity
*
* Constants to reset time of flight:
* Vi:      (m/s)  	velocity of prototype neutron
* dist:    (m)    	Distance(chopper-source)
*
* Example values: m=4 Qc=0.02 W=300^-1 alpha=6.49 R0=1
*
* %End
*******************************************************************************/

DEFINE COMPONENT FermiChopper
DEFINITION PARAMETERS (dist, rad, nu, ymin, ymax, w, Nslit, alpham, Qc, m, Wi, R0, Vi,slit)
SETTING PARAMETERS ()
OUTPUT PARAMETERS(cylinder, cylinder2, Treffer, interactiol, interactior, reflect, seccountl, seccountr, intpolcountl, intpolcountr, errcountl, errcountr, infinite, breakedl, breakedr, nout, topbot, nn, ntrans) 
STATE PARAMETERS (x, y, z, vx, vy, vz, t, s1, s2, p)
DECLARE
%{
           

/**************************COUNTER VARIABLES***********************************/

  int cylinder;           	//neutrons interacting with the cylinder 
  int cylinder2;          	//neutrons interacting with the cylinder and entering the megaslit

  int Treffer; 	       	//neutrons hitting the slits
  int n1[200];	  	//how many neutrons entering each slit
  int n_2[200];	  	//how many neutrons leaving each slit

  int *interactio;
  int interactiol,interactior; 	//interactions with left/right blades

  int reflect;	       		//reflections (overall)

  int *nnref[3];
  int nnrefl[3], nnrefr[3];     	//reflections: left blade, right blade 

  int *nnabs[3];
  int nnabsl[3], nnabsr[3];     	//absorptions: left blade, right blade   

  int *seccount, *intpolcount, *errcount;
  int seccountl,seccountr;	 		//Secant method used
  int intpolcountl,intpolcountr; 		//IntPol method used
  int errcountl, errcountr; 		//errors by numerical methode	

  int loops[3];		//how often happen how many reflections
  int infinite;		//infinite loops breaked up

  int *breaked;
  int breakedl,breakedr;  //neutrons leaving because they're hitting the wall outside the packet
  int nout;	       	//neutrons absorbed, because of hitting the wall between slits and exit
  int topbot;		//leaving the chopper from his top or bottom		
 
  int nn;                 //total transmitted neutrons
  int ntrans;             //transmitted neutrons, not reflected



/********************CALCULATION VARIABLES**************************************/ 

/*****************Interaction with slitpacket***************************/
  double slitl; 	//length of the slits
  double f1,f2;		//distance to slitpacket entrance/exit

/*********Variables for calculating interaction with blades*******************/
  double m1,m2;		//slope of the tangents
  double b1,b2;		//y-intersection of tangent
  		       
/*************Reflections***********************************************/
  double tref, W;		
  int	 n,n2,n3,n4;

/******variables used for calculating new velocities after reflection*****/
  double q;
  double vper, vpar;
  double arg;

/**********Multiple Reflections************************************************/
  int loopcounter; 	//How many reflections happen?
  int reflcounter; 	//loopcounter mod 3

/******************************Time variables**********************************/
  double t3;		//interaction time
  double dt,dt1;	//interaction interval
  double t1,t2; 	//cylinderintersect

/**************************** Variables for finally section*********************/
  int grenze;

/***************************** other variables ********************************/
  double omega, t0;	//chopper rotation


/*****************DECLARING FUNCTIONS******************************************/

/************ORTHOGONAL TRANSFORMATION INTO ROTATING FRAME***********************/

/************X - component********************/
double xstrich(double X, double Z, double T){
	double result=0;
	result = X*cos(omega*(T-t0))+Z*sin(omega*(T-t0));
	return(result);
	}

/************Z - component********************/
double zstrich(double X, double Z, double T){
	double result=0;
	result = Z*cos(omega*(T-t0))-X*sin(omega*(T-t0));
	return(result);
	}

/****************************NUMERICAL METHODS*****************************************/

/****************************SECANT METHOD FOR...**************************************/

/****************************...X-component********************************************/
double xsecant(double x, double z, double vx, double vz, double t, double dt, double d){
	
	double t1       =  0;
	double t2       =  dt;	
	double f1       =  xstrich(x,z,t)-d;
	double f2       =  xstrich(x+vx*t2,z+vz*t2,t+t2)-d;
	double sign;
	double dt1      = 1;
	double counter  = 0; 

	while ((fabs(dt1) > 0.0000001) && (counter < 1000)){
		counter++;
	   	dt1     =  (t2-t1)*f2/(f2-f1);
	        t2      =  t1;
		f1      =  f2;
		t1      += dt1;
		f2      =  xstrich(x+vx*(t1),z+vz*(t1),t+t1)-d;
		}

	sign = (xstrich(x+vx*(t1-0.0000002),z+vz*(t1-0.0000002),t+t1-0.0000002)-d)*(xstrich(x,z,t)-d);

	if(sign < 0){ 
		t1 = -1;
		}

	if(counter >= 1000){
		t1=-1;
		}
	
	return(t1);
	};


/****************************...Z-component********************************************/
double zsecant(double x, double z, double vx, double vz, double t, double dt, double d){
	
	double t1       =  0;
	double t2       =  dt;	
	double dt1      = 1;
	double counter  = 0; 
	double sign;

	double f1       =  zstrich(x,z,t)-d;
	double f2       =  zstrich(x+vx*t2,z+vz*t2,t+t2)-d;
	
	while ((fabs(dt1) > 0.0000001) && (counter < 1000)){
		counter++;
	   	dt1     =  (t2-t1)*f2/(f2-f1);
	        t2      =  t1;
		f1      =  f2;
		t1      += dt1;
		f2      =  zstrich(x+vx*(t1),z+vz*(t1),t+t1)-d;
		}

	if(counter >= 1000){
		t1=-1;
		}
	
	return(t1);
	};

	
/****************************INTERPOLATION METHOD FOR...**************************************/

/****************************...X-component***************************************************/
double xinterpolation(double x, double z, double vx, double vz, double t, double dt, double d){

	double counter = 0;
	double sign,f3,t3,t1,t2,dt1=dt;

	double f1       =  xstrich(x,z,t)-d;
	double f2       =  xstrich(x+vx*dt,z+vz*dt,t+dt)-d;
		
	t1=0;
	t2=dt;
	t3=0;
	f3=1;

	while ((fabs(f3)>0.0000001)&&(counter<1000)){
		counter++;
		t3 = (t1+t2)*0.5;
		f3 = xstrich(x+(vx*(t3)),z+(vz*(t3)),t+t3)-d;
		f2 = xstrich(x+(vx*(t2)),z+(vz*(t2)),t+t2)-d;
		if(f2*f3<0){
			t1=t3;
			}
		else{
			t2=t3;
			} 
		}

	sign = (xstrich(x+vx*(t3-0.0000002),z+vz*(t3-0.0000002),t+t3-0.0000002)-d)*(xstrich(x,z,t)-d);

	if(sign < 0){ 
		t3 = xinterpolation(x,z,vx,vz,t,t3,d);
		}
	
	if(counter >= 1000){
		t3=-1;
		}
	
	return(t3);
	};


/****************************...Z-component***************************************************/
double zinterpolation(double x, double z, double vx, double vz, double t, double dt, double d){

	double counter = 0;
	double f3,f2,f1,t3,t1,t2;
	
	t1=0;
	t2=dt;
	t3=0;
	f3=1;

	while ((fabs(f3)>0.0000001)&&(counter<1000)){
		counter++;
		t3 = (t1+t2)*0.5;
		f3 = zstrich(x+(vx*(t3)),z+(vz*(t3)),t+t3)-d;
		f2 = zstrich(x+(vx*(t2)),z+(vz*(t2)),t+t2)-d;
		if(f2*f3 < 0){
			t1=t3;
			}
		else{
			t2=t3;
			} 
		}

	if(counter >= 1000){
		t3=-1;
		}

	return(t3);
	};
%}

INITIALIZE
%{

/**********************INITIALIZE FUNCTIONS************************************/

  double zstrich(double X, double Z, double T);
  double xstrich(double X, double Z, double T);

  double xinterpolation(double x, double z, double vx, double vz, double t, double dt, double d);
  double zinterpolation(double x, double z, double vx, double vz, double t, double dt, double d);

  double xsecant(double x, double z, double vx, double vz, double t, double dt, double d);
  double zsecant(double x, double z, double vx, double vz, double t, double dt, double d); 

 
/************************* INITIALIZE COUNTERS ********************************/

  int i;
  
  ntrans   	= 0;
  cylinder 	= 0;
  cylinder2	= 0;
  reflect  	= 0;
  Treffer  	= 0;
  nn       	= 0;
  nout		= 0;
  infinite	= 0;
  topbot	= 0;

  for (i=0;i<3;i++){
 	loops[i] 	= 0;
	nnrefl[i] 	= 0;
	nnrefr[i] 	= 0;
	nnabsr[i] 	= 0;
	nnabsl[i] 	= 0;
	}

  errcountl	= 0;
  errcountr	= 0;
  intpolcountl	= 0;
  intpolcountr	= 0;
  seccountl	= 0;
  seccountr	= 0;
  breakedl	= 0;
  breakedr	= 0;
  interactiol	= 0;
  interactior	= 0;
  
  loopcounter	= 0;	
  reflcounter	= 0;

/************************ CALCULATION CONSTANTS *******************************/
  omega    = 2*PI*nu;
  t0       = dist/Vi;

%}

TRACE
%{

/************** test, if the neutron interacts with the cylinder **************/

  if (cylinder_intersect (&t1, &t2, x, y, z, vx, vy, vz, rad, ymax-ymin)){
   		
	if (t1 <= 0) ABSORB;     //Neutron started inside the cylinder
    	
	dt=t2-t1;               //total time of flight inside the cylinder 
 	PROP_DT (t1);           //Popagates neutron to entrance of the cylinder

	
  	if(dt > fabs((0.5/omega*2*PI)))
		{
		printf("Frequency too low, the alghorhythms won't work! Therefore this neutron will be 			absorbed\n");
		ABSORB;
		}
	
/***Checks to see if neutron enters or leaves from top or bottom of cylinder.***/

	if ( ((x*x + z*z) < (rad*rad)) ||
	   ((((x+vx*dt)*(x+vx*dt) + (z+vz*dt)*(z+vz*dt))) < (rad*rad)) )
   		ABSORB;

   	cylinder++;             //adjusting interaction counter
  	
	
/************* checking wether the neutron can enter the chopper *************/
	if(fabs(xstrich(x,z,t))>=Nslit*w/2){
		ABSORB;
		}

	cylinder2++;		//adjusting interaction counter

/*************************PROPAGATE TO SLIT PACKET*****************************/	

			
	/*Checking on which side of the Chopper the Neutron enters******/

	if(zstrich(x,z,t)<0){
		slitl = -0.5*slit;
		}
	else{	
		slitl = 0.5*slit;
		}
	
	
	/****Checking if the Neutron will hit the slits*****/
	f1  =   zstrich(x,z,t)-slitl;
	f2  =	zstrich(x+vx*dt,z+vz*dt,t+dt)-slitl;

	if (f2*f1>0){
		ABSORB;
		}

	/****Calculating where/when Neutron hits the slits*******/
	t3 = zsecant(x,z,vx,vz,t,dt,slitl);

	if((t3 < 0)||(t3 > dt)){
		t3 = zinterpolation(x,z,vx,vz,t,dt,slitl);
		if((t3 < 0)||(t3 > dt)){
			printf("Entering problem\n");
			}
		}
			
	/********Propagating whole system to that point****/
	PROP_DT(t3);
	dt -=t3;

	/*Checking if neutron hits the slits*/
	if(fabs(xstrich(x,z,t)) >= Nslit*w/2){
		ABSORB;
		}
	
	/****Calculating where/when Neutron leaves the slits*******/
	f1  =   zstrich(x,z,t)+slitl;
	f2  =	zstrich(x+vx*dt,z+vz*dt,t+dt)+slitl;

	if (f1*f2>0){
		dt=2*(sqrt((2*slitl)*(2*slitl)+w*w))/Vi; // 2 *ideal time set
		}
	else{	
		dt1 = zsecant(x,z,vx,vz,t,dt,-slitl);
		if((dt1 < 0) || (dt1 > dt)){
			dt1 = zinterpolation(x,z,vx,vz,t,dt,-slitl);
			if((dt1 <= 0) || (dt1 > dt)){
				printf("Outgoing problem\n");
				}
			}
		dt=dt1;
	
		}

/*********************PROPAGATION INSIDE THE SLIT PACKET****************/
		
	/***********Which slit was hit?******************/
	n = Nslit - (int) ((Nslit/2) - xstrich(x,z,t)/w);
	n1[n-1]++;	//adjusting interaction counter
	Treffer++;	//adjusting interaction counter


/*********************BEGIN LOOP FOR MULTIPLE REFLECTIONS***********************************/

	loopcounter=0;
	reflcounter=0;
	for(;;){
		
		//Infinite loops shall be stopped and an error message be displayed
		if (loopcounter>=100){
			infinite++;//adjusting interaction counter
			printf("Infinite loop, neutron absorbed!\n");
			ABSORB;
			}
		
	/*Calculate most probable time for interaction with blades by using tangents*/
		m1 = xstrich(vx,vz,t) + omega * zstrich(x,z,t);
		m2 = xstrich(vx,vz,t+dt) + omega * zstrich(x+vx*dt,z+vz*dt,t+dt);

		b1 = xstrich(x,z,t) - m1*t;
		b2 = xstrich(x+vx*dt,z+vz*dt,t+dt) - m2*(t+dt);

		t3 = ((b2-b1)/(m1-m2))-t;
		
		/*If method with tangens doesn't succeed, just take the middle of the interval*/
		if((t3 < 0)||(t3 > dt)){
			t3=dt*0.5;
			}		

		/**Calculate different positions for the neutron to determine interaction.**/

		//...at the end of the slit:
		n2 = Nslit - (int) ((Nslit/2) - xstrich(x+(vx*dt),z+(vz*dt),t+dt)/w); 

		//...at the before calculated t3:
		n3 = Nslit - (int) ((Nslit/2) - xstrich(x+(vx*t3),z+(vz*t3),t+t3)/w);
		

		/*Does the neutron stay in the same slit?*/
		if((n2!=n)||(n3!=n)){
		
		/*Choosing the first time it isn't in the slit anymore*/	
			if(n3!=n){
				n2=n3;	
				dt = t3;
				}

		     	loopcounter++;	//adjusting interaction counter

		/*More than 3 reflections shall be counted as 3 or more reflections*/
		     	if(loopcounter>3){
				reflcounter=3;
				}
             	     	else{
				reflcounter=loopcounter;
				}
  
		/*******Will there be hit the right or the left blade?*******************/
		/************Setting distances and pointer to counters*******************/

			if(n2 > n){		//right
				interactio 	= &interactior;
				nnref[0]	= &(nnrefr[0]);
				nnref[1]	= &(nnrefr[1]);
				nnref[2]	= &(nnrefr[2]);
				nnabs[0]	= &(nnabsr[0]);
				nnabs[1]	= &(nnabsr[1]);
				nnabs[2]	= &(nnabsr[2]);
				seccount 	= &seccountr;
				intpolcount	= &intpolcountr;
				errcount	= &errcountr;
				breaked		= &breakedr;

				W = (n-0.5*Nslit)*w;

				}
		     	else{			//left
				interactio 	= &interactiol;
				nnref[0]	= &(nnrefl[0]);
				nnref[1]	= &(nnrefl[1]);
				nnref[2]	= &(nnrefl[2]);
				nnabs[0]	= &(nnabsl[0]);
				nnabs[1]	= &(nnabsl[1]);
				nnabs[2]	= &(nnabsl[2]);
				seccount 	= &seccountl;
				intpolcount	= &intpolcountl;
				errcount	= &errcountl;
				breaked		= &breakedl;

				W = (n-(0.5*Nslit)-1)*w;

				}	
			
			(*interactio)++;	//adjusting interaction counter

		/************ABSORB to save calculation time********************/
			if(m==0){
				(*(nnabs[reflcounter-1]))++;	//adjusting interaction counter
				ABSORB;
				}


/***********************WHEN DOES IT HIT THE BLADE?******************************************/			

			/************SECANT METHOD**********************************/

			(*seccount)++;			//adjusting interaction counter

			tref = xsecant(x,z,vx,vz,t,dt,W);

			/*******INTERPOLATION USED WHEN SECANT METHOD FAILS*********/

			if ((tref <= 0.0000001) || (tref > dt)){
				(*intpolcount)++;	//adjusting interaction counter

				tref = xinterpolation(x,z,vx,vz,t,dt,W);
				}

			/*Check for errors in calculation*******/
			if ((tref < 0) || (tref > dt)){
				(*errcount)++;		//adjusting interaction counter
				printf("Reflecting IP Problem!\n");
				ABSORB;
				}
				
			/*Propagate whole system to that point*/
			PROP_DT(tref);

			/*Propagate neutron back to his slit if he left it accidentally*/

			n4 = Nslit - (int) ((Nslit/2) - xstrich(x,z,t)/w);

			while (n4 != n){
				PROP_DT(-0.0000000001);
				n4 = Nslit - (int) ((Nslit/2) - xstrich(x,z,t)/w);
				}

		/*********Check if this point is inside the slit packet************/
			if(fabs(zstrich(x,z,t)) > fabs(slitl)){

				loopcounter--;		//adjusting interaction counter
				reflcounter--;
	              		(*interactio)--;	//adjusting interaction counter
				(*breaked)++;		//adjusting interaction counter
				
				break;
				}

/*******************************REFLECTION ALGORHYTHM***************************************/							
			vper    = xstrich(vx,vz,t); 	//perpendicular velocity (to blade)
			vpar    = zstrich(vx,vz,t);	//parallel velocity (to blade)
			q       = MS2AA*(fabs(vper));
      		
			if (q > Qc){
				arg = (q-m*Qc)/Wi;

       				if (arg < 10.0){
					p *= 0.5*(1-tanh(arg))*(1-alpham*(q-Qc));
					}
				else{
        				(*nnabs[reflcounter-1])++;/*adjusting interaction counter*/						ABSORB;
       					}
      			      	}
							
			if (R0 != 0.0){
       				p *= R0;
				reflect++;			//adjusting interaction counter
				(*nnref[reflcounter-1])++;	//adjusting interaction counter

				vper *= (-1);	 //Mirroring perpendicular velocity

				/**************SET NEW VELOCITIES***********/
				mcnlvx = vper*cos(omega*(t-t0)) -  vpar*sin(omega*(t-t0));
		        	mcnlvz = vper*sin(omega*(t-t0)) +  vpar*cos(omega*(t-t0));

				SCATTER;
				}
      			else{
			     	(*nnabs[reflcounter-1])++;	//adjusting interaction counter
				ABSORB;
      				}
			
								
			/****Recalculating when Neutron will leave the slitpacket*******/
			f1  =   zstrich(x,z,t)+slitl;
			f2  =	zstrich(x+vx*dt,z+vz*dt,t+dt)+slitl;

			if (f1*f2>0){
				dt = 2*(sqrt((2*slitl)*(2*slitl)+w*w))/Vi;// 2 *ideal time set
				}
			else{	
				dt1 = zsecant(x,z,vx,vz,t,dt,-slitl);
				if((dt1 < 0) || (dt1 > dt)){
					dt1=zinterpolation(x,z,vx,vz,t,dt,-slitl);
					}
				dt=dt1;
				}
			}
		else{
			break;
			}
		}
/**********************************END OF THE FOR LOOP**********************************************/

	/* Outgoing Slit Counter */
	n = Nslit - (int) ((Nslit/2) - xstrich(x,z,t)/w);
	n_2[n-1]++;		//adjusting interaction counter

	/****New time of cylinder intersection will be calculated**********/
	cylinder_intersect (&t1, &t2, x, y, z, vx, vy, vz, rad, ymax-ymin);

	if (t1>0){
		printf("Neutrons are leaving chopper in the wrong direction! \n");
		}

	if (t2<=0){
		printf("Neutrons are leaving chopper without any control\n");
		}		

/************************PROPAGATE TO CYLINDER SURFACE****************************/	
	PROP_DT(t2);

	/*****Checking if the neutron left the cylinder by his top or bottom******/
	if  ((x*x + z*z) < (rad*rad) ){
		topbot++;	//adjusting interaction counter
		ABSORB;
		}


	/*****Checking if neutron hits chopper exit**************/
	if(fabs(xstrich(x,z,t))>=Nslit*w/2){
		nout++;		//adjusting interaction counter
		ABSORB;
		}

	nn++;		//adjusting interaction counter


	if(loopcounter>3) printf("More than 3 reflections!\n");
	
	/*How many reflections happened?*/
	switch(reflcounter){
		case 0:			//No reflection
			ntrans++;	//adjusting interaction counter
			break;
		case 1:			//One reflection
			loops[0]++;	//adjusting interaction counter
			break;
		case 2:			//Two reflections
			loops[1]++;	//adjusting interaction counter
			break;
		case 3:			//Three or more reflections
			loops[2]++;	//adjusting interaction counter
			break;
		}

	/****Aluminium Transmission coefficents******/
      		
	p = p*0.9;          //finite cross section

  	}

  else ABSORB;

/************************TIME OF FLIGHT RESET************************/
  mcnlt = mcnlt - (((int)(mcnlt/(1/(2*nu))))*(1/(2*nu)));
		

%}

FINALLY
%{
/*Initialize Files*/

FILE *header;
int i;

header = fopen("Header.dat","w");

/* HEADER.DAT WRITING */


fprintf(header,"*********** This is the result from FermiChopper.comp: ***********  \n\n\n");
fprintf(header,"\t INTERACTIONS:\n\n");
fprintf(header,"number of neutrons interacting with cylinder:     %i\n", cylinder);
fprintf(header,"number of neutrons hitting the big slit:          %d\n", cylinder2);
fprintf(header,"number of neutrons hitting one of the slits:      %d\n\n", Treffer);

fprintf(header,"number of interactions with blades (overall):	  %d\n", interactiol+interactior);
fprintf(header,"number of interactions with left blades(overall):  %d\n", interactiol);
fprintf(header,"number of interactions with right blades(overall): %d\n\n", interactior);

fprintf(header,"\t REFLECTIONS:\n\n");
fprintf(header,"number of successful reflections (overall):       %d\n\n", reflect);

fprintf(header,"number of successful primary reflections at left blades : %d\n", nnrefl[0]);
fprintf(header,"number of successful secondary reflections at left blades : %d\n", nnrefl[1]);
fprintf(header,"number of successful more than secondary reflections at left blades : %d\n\n", 													nnrefl[2]);
fprintf(header,"number of successful primary reflections at right blades : %d\n", nnrefr[0]);
fprintf(header,"number of successful secondary reflections at right blades : %d\n", nnrefr[1]);
fprintf(header,"number of successful more than secondary reflections at right blades : %d\n\n", 												nnrefr[2]);
fprintf(header,"\t ABSORPTIONS:\n\n");

fprintf(header,"number of absorbed neutrons at blades(overall) :		  %d\n\n", 							nnabsl[0]+nnabsl[1]+nnabsl[2]+nnabsr[0]+nnabsr[1]+nnabsr[2]);

fprintf(header,"number of absorbed neutrons at left blades (primary) :      %d\n", nnabsl[0]);
fprintf(header,"number of absorbed neutrons at left blades (secondary) :      %d\n", nnabsl[1]);
fprintf(header,"number of absorbed neutrons at left blades (more than secondary) : %d\n\n", nnabsl[2]);

fprintf(header,"number of absorbed neutrons at right blades (primary) :      %d\n", nnabsr[0]);
fprintf(header,"number of absorbed neutrons at right blades (secondary) :      %d\n", nnabsr[1]);
fprintf(header,"number of absorbed neutrons at right blades (more than secondary) : %d\n\n", nnabsr[2]);

fprintf(header,"number of absorbed neutrons between slits and exit:  %d\n\n", nout);
fprintf(header,"number of absorbed neutrons because of an infinite loop:  %d\n\n", infinite);
fprintf(header,"number of absorbed neutrons because leaving the chooper from top or bottom:  %d\n\n", topbot);


fprintf(header,"\tDATA OF TRANSMITTED NEUTRONS:\n\n");

fprintf(header,"number of transmitted neutrons (overall):         %d\n", nn);
fprintf(header,"number of transmitted neutrons (not reflected):   %d\n\n", ntrans);

fprintf(header,"number of neutrons reflected once :     		  %d\n", loops[0]);
fprintf(header,"number of neutrons reflected twice :     		  %d\n", loops[1]);
fprintf(header,"number of neutrons reflected more times :  		  %d\n\n", loops[2]);

fprintf(header,"number of 'breaking the algorhytm' neutrons on right blade:  	  %d\n", breakedr);
fprintf(header,"number of 'breaking the algorhytm' neutrons on left blade:  	  %d\n\n", breakedl);

fprintf(header, "Secant/Picard Method used / Errors at right blade\t %i \t %i \t %i\n", seccountr,	intpolcountr, errcountr);
fprintf(header, "Secant/Picard Method used / Errors at left blade\t %i \t %i \t %i\n\n", seccountl, intpolcountl, errcountl);

fprintf(header,"\tDETAILS: SLITS:\n\n");
fprintf(header, "\t\t Entering \t\t Outgoing\n");
for(i=0; i<Nslit; i++) 
	fprintf(header, "Slit number %i \t\t %i \t\t %i \n", i+1, n1[i],n_2[i]);


/*Closing Data Files*/

fclose(header);

%}

MCDISPLAY
%{
  magnify("xz");
  circle("xz", 0,ymax,0,rad);
  circle("xz", 0,0   ,0,rad);
  circle("xz", 0,ymin,0,rad);
  line( 0  ,ymin,-rad, 0  ,ymax,-rad);
  line( 0  ,ymin, rad, 0  ,ymax, rad);
  line(-rad,ymin, 0  ,-rad,ymax, 0  );
  line( rad,ymin, 0  , rad,ymax, 0  );
%}
END
