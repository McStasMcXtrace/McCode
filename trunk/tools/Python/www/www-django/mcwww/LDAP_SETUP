=======================
LDAP setup instructions
=======================
9-10-14 (Debian 7.5) Virtual Neutrons for Teaching elearn1
==========================================================
Author: Mark Lewis
------------------
-----
Notes
-----
- There has been a complete migration to the Online Configuration version of LDAP so anything you find online talking about slapd.conf is moot. 
  EVEN THOUGH there will be a slapd.conf dumped somewhere on your system, just ignore it.
- Setting up the DB requires two users, the user that alters how the DB works and the user who alters the content.
     db_admin  : cn=admin,cn=config
     usr_admin : cn=admin,<MACHINE DOMAIN>
- The Backend and Database global scope are in : /etc/ldap/slapd.d/cn=config.ldif                        (db_admin)
  The Database operation management are in     : /etc/ldap/slapd.d/cn=config/olcDatabase={0}config.ldif  (db_admin)
  The Database content and DIT are in          : /etc/ldap/slapd.d/cn=config/olcDatabase={1}hdb.ldif     (usr_admin)
- The .ldif files are run from a predefined build script, LDAPBuilder but you can apply them all manually IF YOU CHOOSE:
  If a command begins with # use root privs.
  If a command begins with $ it doesn't matter.
- If you run into serious problems you can purge and reinstall ldap-utils and slapd and start again. This is the simplest way to clear the database, however, LDAP _may_ leave some
  backup files in your system and rooting these out is a bit of work. An example delete.ldif for clearing the DB is provided in the ../../LDAP/LDIFs folder. Use the correct privileges
  to delete from the correct DB.

-----------
preparation
-----------
- What we are aiming to do is get to a DIT to look like this: (unfortunately there's no handy tool to look at the LDAP DB tree)

 dn: <MACHINE DOMAIN>               => (SUFFIX)                         	       
 ├── dn: ou=person,SUFFIX 	    => (PERSON)			       	       
 │   ├── dn: cn=entry_1,PERSON				   
 │   ├── dn: cn=entry_...,PERSON			
 │   ├── dn: cn=entry_N,PERSON				
 │   └── DummyUser					
 ├── dn: ou=groups,SUFFIX 	    => (GROUPS)			
 │   ├── dn: cn=courseStaff,GROUPS			
 │   │	  ├── member: first_dn_of_ou=person,SUFFIX_entry
 │   │	  ├── member: ...				
 │   │	  └── member: last_dn_of_ou=person,SUFFIX_entry	
 │   ├── dn: cn=itStaff,GROUPS				
 │   │	  ├── member: first_dn_of_ou=person,SUFFIX_entry
 │   │	  ├── member: ...				
 │   │	  └── member: last_dn_of_ou=person,SUFFIX_entry	
 │   └── dn: cn=Students,GROUPS				
 │   	  ├── member: first_dn_of_ou=person,SUFFIX_entry
 │        ├── member: ...				
 │ 	  └── member: last_dn_of_ou=person,SUFFIX_entry	
 └── dn: ou=access,SUFFIX 	    => (ACCESS)				       									   	
 	   └── dn: cn=moodle,ACCESS				       									   	

- You'll need the the distinguished name (dn) of the machine that you are setting the LDAP up on, this can be found thus:
  	 $ cat /etc/hosts
	   127.0.0.1	localhost
	   127.0.1.1	<machine name>.<machine domain>	<machine name>
    <MACHINE DOMAIN> is aquired by:
      infront of <machine domain> put 'dc='
      replace each '.' in  <machine domain> with ',dc=' (it's ok if there are no '.'s)
    dn="<MACHINE DOMAIN>"
  <MACHINE DOMAIN> is needed later for filling in the files that will modify your LDAP DB.
- Install all the relevent packages:
    #apt-get -f install ldap-utils slapd openssl python mediawiki mediawiki-extensions-ldap mysql- nginx
    #apt-get purge apache2
- Upon LDAP and slapd being installed you'll be prompted to set these up with an _admin password_, remember what you input.
- Find and dl the latest version of Moodle, the interface with LDAP should change with LDAP version, but we use latest stable.
- Build the directory tree above, make temp files in each of the directories because mistakes will be made along the way and you'll want to have some backups.

|======================|
| LDAPBuilder.py setup | : With scary warnings!
|======================|
- If you don't know how to edit a .py script (even though this is *very* simple editing) you should probably not be doing this setup as LDAP is a bit of a pain.
- The python LDAPBuilder script contains user defined information. This _NEEDS_ to be set by you before it is run (it can be run without but will fail, and you'll
  need to set it and re-run it (not a big deal, but worthy of /facepalm as I have stated to do it here)).
- At the bottom of the file there is a class which contains data about your LDAP DB admin setup. You have/will input the data, set correct values where you have
  <THINGS IN CAPITALS>, yes this is mildly vague, please don't continue if you can't work this out, get someone else to be a sys admin.
- If you do not want to set up an initial set of Students/Users comment out the line:
     	  bob.insertPopulation()
  the dummy and access users will still be inserted. (They are neccesary, please leave them in.)

|============|
| LDAP SETUP | 
|============|

---------------------------------------------
---------------------------------------------
- Step One : Adding the olcRootPW attribute -
---------------------------------------------
---------------------------------------------
NB:
===
- Do NOT (under any circumstances other than 'I want to rebuild this whole database when I am done setting it up') manually write to any of the .ldifs in /etc/ldap/slapd.d or its subdirectories.
- The .ldif modification files are in ../../LDAP/LDIFs, you need to change some of them, and if you make a mistake you will need to build new ones based on them to effect modifications in your
  current configuration of the database. It's ok to make mistakes or you won't learn.
===
- First we need to build the LDIF file that will allow us to insert a line INTO olcDatabase={0}config.ldif without the correct authority (because we don't have it yet!)
  -----	   	   	     	       	    	       	     	      	   				   -------
- $slappasswd 
    New password: <ADMIN_pwd>
    Re-enter new password: <ADMIN_pwd>
  <slappasswd_output>                                           <---- This ----\
									       |
- ROOTPW.ldif							     	       g
  -----------							    	       o
  dn: olcDatabase={0}config,cn=config					       e
  changetype: modify							       s
  add: olcRootPW							       |
  olcRootPW: <slappasswd_output>				<---- here ----/

- HANDLED IN THE BUILD SCRIPT
- you can manually apply this file with:
- #ldapadd -Y EXTERNAL -H ldapi:/// -f ROOTPW.ldif

----------------------------------------------------------
----------------------------------------------------------
- Step Two : Building the Directory Interface Tree (DIT) -
----------------------------------------------------------
----------------------------------------------------------
NB:
===
- ou is 'organisational unit', you _can_ choose these branch names to match your preferences. person, groups, and, access make sense to me.
- <OPTIONAL> means you must can this yourself, but there's some defaults in the .ldifs that are acceptable.
- <MACHINE DOMAIN> means you have to put it equal to your machines domain name.
- Any passwords you put in here should be treated like the root password above - with slappasswd.
- The dn of the moodle bind user is used by moodle to authenticate so either write it down or remember which file it is in when you set moodle up.
===
- Next is updating the main frontend DB : olcDatabase={1}hdb.ldif with the structure neccessary for our application (VNT McStas, moodle, mediawiki LDAP authentication combination)
- Edit the LDIF containing the DIT and a couple of entries to allow access for moodle, mediawiki and for group creation.

- DITbuild.ldif (the '|' is a page boundary!)
  -------------
  #====================#							|      #======================#
  # Make Main Branches #							|      # Add moodle Bind User #
  #====================#							|      #======================#
  dn: ou=person,dc=<MACHINE DOMAIN>						|      dn: cn=<OPTIONAL>,ou=access,dc=<MACHINE DOMAIN>
  objectclass: organizationalunit						|      objectclass: inetOrgPerson
  ou: person   									|      cn: <OPTIONAL>
  description: Branch containing inetorgperson entries				|      sn: bind user
  	       	      		 	       					|      uid: MoodleBindUser
  dn: ou=groups,dc=fysik,dc=dtu,dc=dk						|      userpassword: <OPTIONAL>
  objectclass: organizationalunit						|      mail: lewis@fysik.dtu.dk
  ou: groups									|      ou: access
  description: organisationalunit Groups {Student|courseStaff|itStaff}		|
  	       			  	 					|      #==========================#
  dn: ou=access,dc=fysik,dc=dtu,dc=dk						|      # Making ou=groups Subtree #
  objectclass: organizationalunit						|      #==========================#
  ou: access   									|      dn: cn=Student,ou=groups,dc=fysik,dc=dtu,dc=dk
  description: Single User Moodle Bind Branch					|      objectclass: groupofnames
  	       	      	   	       						|      cn: Student
  #===============#								|      description: Student Group, minimal privileges
  # Add DummyUser #								|      member: cn=DummyUser,ou=person,dc=fysik,dc=dtu,dc=dtu,dc=dk
  #===============#								|
  dn: cn=DummyUser,ou=person,dc=fysik,dc=dtu,dc=dk				|	dn: cn=itStaff,ou=groups,dc=fysik,dc=dtu,dc=dk
  objectclass: inetOrgPerson							|	objectclass: groupofnames
  cn: DummyUser									|	cn: itStaff
  sn: Placeholder								|	description: IT Staff Group, DB management privileges
  uid: DU									|	member: cn=DummyUser,ou=person,dc=fysik,dc=dtu,dc=dtu,dc=dk
  userpassword: <OPTIONAL> 							|
  mail: lewis@fysik.dtu.dk							|	dn: cn=courseStaff,ou=groups,dc=fysik,dc=dtu,dc=dk
  description: DummyUser:							|	objectclass: groupofnames
   - Fake user with zero privs. 						|	cn: courseStaff
   - Made to initiate group branches.						|	description: Teaching Staff, Student management privileges
   - Restricted Member of all groups. 						|	member: cn=DummyUser,ou=person,dc=fysik,dc=dtu,dc=dtu,dc=dk
  ou: person   	   								|

- HANDLED IN THE BUILD SCRIPT
- you can manually apply this file with:
- $ldapadd -x -D "cn=admin,dc=fysik,dc=dtu,dc=dk" -f structure_state_build.ldif -w <admin_pwd>

-------------------------------------------------
-------------------------------------------------
- Step Three : Adding Access Control Directives -
-------------------------------------------------
-------------------------------------------------
NB:
===
- same key and advice as above. 
- The order of declarations is IMPORTANT, for example, if the DummyUser is restricted AFTER the staff information it would
  have the same access rights as the Student (as the student is declared first). STRONGEST SECURITY FIRST is the rule.
  If you are changing this you may make the system more easily hackable, so be careful!!
- This is an edit of the backend (config) database, the ROOTPW needs to have been set up correctly.
===
- The DummyUser, moodle bind user, and groups need specific accesses. DummyUser, for example should *not* be able to do anything
  as it is used in a script and its password is passed around as plain text, thus easily sniffable.
- EDIT the LDIF containing the lines to add to olcDatabase={0}config.ldif:

- ACLbuild.ldif
  -------------
  #=================#									|  -
  # Dummy and Admin #									|  #===================#
  #=================#									|  # Student Editables #
  dn: olcDatabase={0}config,cn=config							|  #===================#
  changetype: modify									|  add: olcAccess
  delete: olcAccess									|  olcAccess: {2}to attrs=cn,mail,description
  olcAccess: to *									|  by self write
    by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage		|  by group.exact="cn=Student,dc=<MACHINE DOMAIN>" read
    by * break							      			|  by group.exact="cn=itStaff,dc=<MACHINE DOMAIN>" write
  -      										|  by group.exact="cn=courseStaff,dc=<MACHINE DOMAIN>" write
  add: olcAccess									|  -
  olcAccess: {0}to *									|  #===================#
    by dn="cn=DummyUser,ou=people,dc=<MACHINE DOMAIN>" none				|  # Staff Information #
    by dn="cn=moodle bind user,ou=access,dc=<MACHINE DOMAIN>" read			|  #===================#
    by dn="cn=admin,dc=<MACHINE DOMAIN>" manage		      				|  add: olcAccess
  -    					 						|  olcAccess: {3}to attrs=telephoneNumber,roomNumber
  #===========#										|  by group.exact="cn=Student,dc=<MACHINE DOMAIN>" read
  # Passwords #										|  by group.exact="cn=itStaff,dc=<MACHINE DOMAIN>" write
  #===========#										|  by group.exact="cn=courseStaff,dc=<MACHINE DOMAIN>" write
  add: olcAccess									|
  olcAccess: {1}to attrs=userPassword,shadowLastChange					|
    by self write	 								|
    by anonymous auth									|

- HANDLED IN THE BUILD SCRIPT
- you can manually apply this file with:
- $ldapadd -x -D "cn=admin,cn=config" -f DB_state_build.ldif -w <ADMIN_pwd>

-------------------------------------------------------
-------------------------------------------------------
- Step Four : Adding entities, putting them in groups -
-------------------------------------------------------
-------------------------------------------------------
- Populate this .ldif with the entities that you want to have in your DB. This is the file that you'll have to copy, paste adn fill in the most.
  Unless you have access to a database of users and write a parser which would be REALLY HELPFUL IN THE LONG RUN. ^_^
- This is the simplest and most commonly used step - adding LDAP entities.

- user_population_build.ldif
  --------------------------
  #===================#						|  dn: cn=<STAFFNAME 2>,ou=person,dc=<MACHINE DOMAIN>
  # Adding test users #						|  objectclass: inetOrgPerson
  #===================#						|  cn: <STAFFNAME 2>
  dn: cn=<STUDENTNAME>,ou=person,dc=fysik,dc=dtu,dc=dk		|  displayName: <NAME>
  objectclass: inetOrgPerson					|  sn: <SURNAME>
  cn: <STUDENTNAME>						|  uid: <UID>
  displayName: <NAME 2>						|  userpassword: <PASSWORD>
  sn: <NAME 1> 							|  mail: 
  uid: <UID>							|  telephoneNumber: 
  userpassword: <PASSWORD>					|  departmentNumber:
  mail: <EMAIL ADD>						|  roomNumber:
  description: <OPTIONAL>					|  description: <OPTIONAL>
  employeeNumber: <OPTIONAL>  					|  ou: person
  ou: person	  						|  
      								|  #================#
  dn: cn=<STAFFNAME 1>,ou=person,dc=fysik,dc=dtu,dc=dk		|  # Groupify Users #
  objectclass: inetOrgPerson					|  #================#
  cn: <STAFFNAME 1>						|  dn: cn=courseStaff,ou=groups,dc=<MACHINE DOMAIN>
  displayName: <NAME>						|  changetype: modify
  sn: <SURNAME>							|  add: member
  uid: <UID>							|  member: cn=<STAFFNAME 1>,ou=person,dc=<MACHINE DOMAIN>
  userpassword: <PASSWORD>					|  
  mail: 							|  dn: cn=Student,ou=groups,dc=<MACHINE DOMAIN>
  mail: 							|  changetype: modify
  telephoneNumber: 						|  add: member
  departmentNumber: 						|  member: cn=<STUDENTNAME>,ou=person,dc=<MACHINE DOMAIN>
  roomNumber:  							|  
  description: <OPTIONAL>					|  dn: cn=itStaff,ou=groups,dc=<MACHINE DOMAIN>
  employeeNumber: <STAFFID>    					|  changetype: modify
  ou: person	  						|  add: member
      								|  member: cn=<STAFFNAME 2>,ou=person,dc=<MACHINE DOMAIN>
----------------------------------------
----------------------------------------
- Step Five : Running the build Script -
----------------------------------------
----------------------------------------
- Goto the ../../LDAP directory. This is where the LDIFs and LDAPBuilder that should have been edited by this point are located.
- In a terminal run:
    #python LDAPBuilder.py
- You should get a bunch of positive messages if I've/you've written/done everything correctly:
       adding olcRootPW to olcDatabase={0}config
       ldap_initialize( ldapi:///??base )
       SASL/EXTERNAL authentication started
       SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
       SASL SSF: 0
       add olcRootPW:
	   {SSHA}T64Q3dryX5B9pgVempq7QOsXovY4Rsl8
       modifying entry "olcDatabase={0}config,cn=config"
       modify complete

       Done. If successful please:
       REMEMBER TO REMOVE THE olcRootPW DIRECTIVE WHEN ALL {0} OR config DB MANIPULATION IS DONE.

       Building tree in olcDatabase={1}hdb
       cn=admin,dc=mcdomain
       LDIFs/DITbuild.ldif
       Building access control in olcDatabase={1}hdb
       cn=admin,cn=config
       LDIFs/ACLbuild.ldif
       
  


|=====|
| END |
|=====|

|==============|
| MOODLE SETUP |
|==============|
- Put the moodle directory into your www-root directory (wherever you have pointed nginx to go to find its websites. You didn't do that? Read up on how to use nginx, I am not doing that here
                                                         there are multiple warnings at the top which should scare you away if you are not proficient at (or doggedly determined at learning 
							 how to) hacking away at something to get it to work.)
- In your browser you want to goto <ip>:<port>/moodle and the first administration and setup page should come up. LDAP Authentication os configured in:
     Site Administration -> Plugins -> Authentication -> Manage Authentication
- Allow the LDAP server and set it up, we need to chjange some fields:
    LDAP Server Settings :
      	 	Host URL : In here you should put in any of the addresses which are held in SLAPD_SERVICES variable in /etc/default/slapd
    Bind settings    	 :
      Distinguished name : You should have set up the bind user in a similar way to the way I did above (it works). Put that dn here.
                Password : Whatever you set the password as.
    User lookup settings :
    	         Context : Which ever context your user entities are held in eg. ou=person,dc=<MACHINE DOMAIN>
   	  User Attribute : You can use things other than the cn as a login, uid in my case.
	     ObjectClass : inetorgperson
- The rest can be left alone. Try to login with one of your entities, it should work. :) 

|=================|
| MEDIAWIKI SETUP |
|=================|
- You got the distro version of mediawiki at the beginning....---^
- Put a link to the mediawiki folder in your www-root folder (nginx thingies again, oh yes)
- Open your second favourite browser and goto <ip>:<port>/mediawiki, HORAY MEDIAWIKI!!
- mysql is fairly simple and stackoverflow searching will help. Set it up (@ top of this file I tell you to get mysql) and make yourself a user account.
- Open a terminal and run:
     $mysql -u <sql_usr> -p
     mysql> CREATE DATABASE media ;
     mysql> GRANT ALL ON mediawiki.* TO <msql_usr> ;
     mysql> exit ;
- Go through the mediawiki setup in the browser - media wiki is very nicely documented so have a look on their website. I got you this far (hopefully).