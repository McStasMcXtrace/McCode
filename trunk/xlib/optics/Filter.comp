/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Filter
*
* %I
* Written by: Erik Knudsen
* Date: Jan 24, 2011
* Version: $Revision: 1.0$
* Origin: Risoe
* Release: McXtrace 0.9
*
* Block of a attenuating material
* 
* %D
* A rectangular block of attenuating material. Attenuation is computed through
* the effective length travelled within the material. No scattering is modelled at present.
*
* %P
* INPUT PARAMETERS
*
* xwidth: Width of block. (m) 
* yheight: Height of block. (m)
* zdepth:  Thickness of block. (m)
material_datafile: file where the material parameters for the lens may be found. Format is similar to what may be found off the NISP website. [Be.txt] 
*
* %E
*******************************************************************************/
DEFINE COMPONENT Filter
DEFINITION PARAMETERS (string material_datafile="Be.txt")
SETTING PARAMETERS (xwidth,yheight,zdepth) 
OUTPUT PARAMETERS (prms)
STATE PARAMETERS (x,y,z,kx,ky,kz,phi,Ex,Ey,Ez,p)

SHARE
%{
  %include "read_table-lib"
  struct mat_prms {
    int Z;
    double At, rho;
    double *E,*mu;
  };
%}

DECLARE
%{
  double xmax,xmin,ymax,ymin;

  struct mat_prms *prms;

%}

INITIALIZE
%{
  const double RE=2.8179402894e-15;
  const double NA=6.02214179e23;
  int status=0;
 
  if(!xwidth || !yheight){
    fprintf(stderr,"%s: Lens has zero effective area\n",NAME_CURRENT_COMP);
    exit(0);
  }
  xmax=xwidth/2.0;
  xmin=-xmax;
  ymax=yheight/2.0;
  ymin=-ymax;

  t_Table t;
  if ( (status=Table_Read(&t,material_datafile,0))==-1){
    fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",material_datafile,NAME_CURRENT_COMP);
    exit(-1);
  }
  char **header_parsed;
  header_parsed=Table_ParseHeader(t.header,"Z","A[r]","rho","sigma[a]");
  prms=calloc(1,sizeof(struct mat_prms));
  if (!prms->At) prms->At=strtod(header_parsed[1],NULL);
  if (!prms->Z) prms->Z=strtol(header_parsed[0],NULL,10);
  if (!prms->rho) prms->rho=strtod(header_parsed[2],NULL);
  prms->E=malloc(sizeof(double)*(t.rows+1));
  prms->mu=malloc(sizeof(double)*(t.rows+1));

  int i;
  for (i=0;i<t.rows;i++){
    prms->E[i]=t.data[i*t.columns]*1e3;
    prms->mu[i]=t.data[5+i*t.columns]*prms->rho*1e2;     /*mu is now in SI, [m^-1]*/ 
  }

  prms->E[t.rows]=-1.0;
  prms->mu[t.rows]=-FLT_MAX;
  
  Table_Free(&t);
%}

TRACE
%{
  double e,mu;
  double l0,l1;
  if (box_intersect(&l0,&l1,x,y,z,kx,ky,kz,xwidth,yheight,zthick)){
    PROP_DL(l0);
    /*table interpolation*/
    while (e>prms->E[i]){
      i++;
      if (prms->E[i]==-1){
        fprintf(stderr,"Photon energy (%g keV) is outside the filter's material data\n",k); ABSORB;
      }
    }
    E=(e-prms->E[i-1])/(prms->E[i]-prms->E[i-1]);
    mu=(1-E)*prms->mu[i-1]+E*prms->mu[i];
    mu= 1e-10*mu;  /*factor conversion from m^-1 to A^-1*/
    
    l1-=l0; 
    p*=exp(-mu*l1);
    PROP_DL(l1);
  }
%}


MCDISPLAY
%{
  magnify("xy");
  box(0,0,0,xwidth,yheight,zdepth);
%}
END
