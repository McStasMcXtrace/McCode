/************************************************
*
* %I
* Written by: Erik Knudsen
* Date: September 25th, 2009
* Version: $Revision$
* Origin: Risoe
* Release: McXtrace 0.1alpha
*
* A curved mirror
*
* %D
*
* %P
* radius: [m]   Radius of curvature.
* length: [m]   Length of the unbent mirror.
*
* %E
***********************************************************************/

DEFINE COMPONENT Mirror_curved
DEFINITION PARAMETERS ()
SETTING PARAMETERS ( radius=1, length=0.2)
OUTPUT PARAMETERS()
STATE PARAMETERS (x,y,z,kx,ky,kz,phi,Ex,Ey,Ez,p)

DECLARE
%{
%}

INITIALIZE
%{
  /*put more checks on theinput parameters*/

%}

TRACE
%{
  double dl,alpha,n,nx,nz,s;


  /*do we hit the mirror within range?*/
  PROP_Z0;
  if (solve_2nd_order(&dl,kx*kx+kz*kz,2*(x*kx+z*kz+radius*kx),x*x+2*x*radius+z*z))
  {
    /*correction for only solving in xz-plane*/
    dl*=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz)/scalar_prod(kx,0,kz,kx,0,kz));
//    printf("pt0:%g %g %g %g %g %g...%g,%g,%g\n",x,y,z,kx,ky,kz,alpha,s,dl);

    PROP_DL(dl);
    //if(z<0)
    alpha=asin(z/radius);
    //printf("pt1:%g %g %g %g %g %g...%g,%g,%g\n",x,y,z,kx,ky,kz,alpha,s,dl);
    if (length<radius*alpha){
      ABSORB;
      //restore_xray(&x,&y,&z,&kx,&ky,&kz,&phi,&Ex,&Ey,&Ez,&p);
    }else{
      SCATTER;
      /*reflection*/
      nx=-radius-x;
      nz=-z;
      n=sqrt(nx*nx+nz*nz);
      nx/=n;
      nz/=n;
 //     printf("pt2:%g %g %g %g %g %g...%g,%g\n",x,y,z,kx,ky,kz,alpha,s);

      s=scalar_prod(kx,0,kz,nx,0,nz);
      kx=kx-2*s*nx;
      kz=kz-2*s*nz;
   //   printf("pt3:%g %g %g %g %g %g...%g,%g,   %g,%g\n",x,y,z,kx,ky,kz,nx,nz, alpha,s);
    }
  }
%}

MCDISPLAY
%{
  circle("xz",-radius,0,0,radius);
%}

END
