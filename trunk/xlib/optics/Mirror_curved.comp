/************************************************
*
* %I
* Written by: Erik Knudsen
* Date: September 25th, 2009
* Version: $Revision$
* Origin: Risoe
* Release: McXtrace 0.1alpha
*
* A curved mirror
*
* %D
* mirror is in the yz-plane curved towards positive x if radius is positive
* 
* %P
* radius: [m]   Radius of curvature.
* length: [m]   Length of the unbent mirror.
* coating: []   Name of file containing the material data (i.e. f1 and f2) for the coating
* width: [m]    width of the mirror
*
* %E
***********************************************************************/

DEFINE COMPONENT Mirror_curved
  DEFINITION PARAMETERS (string coating="Be.txt")
  SETTING PARAMETERS ( radius=1, length=0.2, width=0.2, R0=1)
OUTPUT PARAMETERS(prms,prmsp)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

DECLARE
%{
#include <complex.h>
  %include "read_table-lib"
  struct {
    int Z;
    double At, rho;
    t_Table T;
  } prms,*prmsp;
%}

INITIALIZE
%{
  int status;

  if (coating && ! R0){
    if ( coating && (status=Table_Read(&(prms.T),coating,0))==-1){
      fprintf(stderr,"Error(%s): Could not parse file \"%s\"\n",NAME_CURRENT_COMP,coating);
      exit(-1);
    }
    char **header_parsed;
    header_parsed=Table_ParseHeader(prms.T.header,"Z","A[r]","rho","Z/A","sigma[a]",NULL);
    if(header_parsed[2]){prms.rho=strtod(header_parsed[2],NULL);}
    if(header_parsed[0]){prms.Z=strtod(header_parsed[0],NULL);}
    if(header_parsed[1]){prms.At=strtod(header_parsed[1],NULL);}
    prmsp=&prms;
  }else{
    if (R0<0 || R0>1){
      fprintf(stderr,"Error(%s) reflectivity (%g) is specified but is not in [0:1]\n",NAME_CURRENT_COMP,R0);
      exit(-1);
    }
    prmsp=NULL;
  }

%}

TRACE
%{
  double l0,l1,dl,alpha,n,nx,nz,s,k,knx,kny,knz;

  /*do we hit the mirror within range?*/
  //PROP_Z0;
  k=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz));
  knx=kx/k;kny=ky/k;knz=kz/k;
  if (solve_2nd_order(&l0,&l1, knx*knx+knz*knz,2*(x*knx+z*knz-radius*knx),x*x-2*x*radius+z*z))
  {
    if (l0<0 && l1>0){
      dl=l1;
    }else if(l1<0 && l0>0){
      dl=l0;
    }else if( l0>0 && l1>0){
      if (fabs(z+knz*l0) <length/2.0  && fabs(x+knx*l0)<fabs(radius)) {
      /*this means that the first positive match is on the mirror z-wise
        - this should be picked. This would work even if mirror is hit from behind*/
        dl=l0;
      }else{
        dl=l1;
      }
    }

    /*correction for only solving in xz-plane*/
    dl*=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz)/scalar_prod(kx,0,kz,kx,0,kz));

    PROP_DL(dl);
    alpha=asin(z/radius);
    if (length<radius*alpha){
      //ABSORB;
      RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }else{
      SCATTER;
      /*reflection*/
      nx=radius-x;
      nz=-z;
      n=sqrt(nx*nx+nz*nz);
      nx/=n;
      nz/=n;
      
      s=scalar_prod(kx,0,kz,nx,0,nz);
      kx=kx-2*s*nx;
      kz=kz-2*s*nz;
      

      if (prmsp && !R0){
        /*compute reflectivity from material data*/

        /*adjust p according to reflectivity*/
        double Qc,Q,f1,f2,delta,beta,na,e,k2,rho;
        /*length of wavevector transfer may be compute from s and n_ above*/
        Q=fabs(2*s*sqrt(nx*nx+nz*nz));

        /*interpolate in material data*/
        k2=scalar_prod(kx,ky,kz,kx,ky,kz);
        e=K2E*sqrt(k2);
        f1=Table_Value(prms.T,e,1); 

        /*the conversion factor in  the end is to transform the atomic density from cm^-3 to AA^-3
          -> therefore we get Q in AA^-1*/
        na=NA*prms.rho/prms.At*1e-24;
        Qc=4*sqrt(M_PI*na*RE*f1);
        
        if (Q>Qc){ 
          complex double qp;
          double q,b_mu,R;

          q=Q/Qc;
          /*delta=na*r0*2*M_PI/k2*f1;*/  
          f2=Table_Value(prms.T,e,2); 
          /*beta=na*r0*2*M_PI/k2*f2;*/
          /*b_mu=beta*(2*k)^2 / Qc^2*/
          b_mu=4*M_PI*na*RE*f2/(Qc*Qc);
          if(q==1){
            qp=sqrt(b_mu)*(1+I);
          }else if (q<1) {
            double qi=sqrt( (q-1)/2 + sqrt( (q-1)*(q-1)/4 + b_mu*b_mu) );
            qp=b_mu/qi + qi*I;
          }else{
            double qi=sqrt( (1-q)/2 + sqrt( (1-q)*(1-q)/4 + b_mu*b_mu) );
            qp=b_mu/qi + qi*I;
          }
          /*and from this compute the reflectivity*/
          R=cabs((q-qp)/(q+qp));
          p*=R;
          /*now also set the phase*/
          phi+=carg((q-qp)/(q+qp));
        }
      }else{
        /*R0 !=0 -> use that for reflectivity*/
        p*=R0;
      }
    }
  }
%}

MCDISPLAY
%{
  double x0,y0,z0,x1,y1,z1,alpha;
  int N=20;

  y0=width/2.0;
  y1=-y0;

  alpha=-(length/2.0)/fabs(radius);
  x0=radius*(1-cos(alpha));
  z0=radius*sin(alpha);
  line(x0,y0,z0,x0,y1,z0);
  while (alpha<(length/2.0/fabs(radius))){
    alpha+=length/N/fabs(radius);
    x1=radius*(1-cos(alpha));
    z1=radius*sin(alpha);
    line(x0,y0,z0,x1,y0,z1);
    line(x0,y1,z0,x1,y1,z1);
    x0=x1;z0=z1;
    line(x0,y0,z0,x0,y1,z0);
  }
%}

END
