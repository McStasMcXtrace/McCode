/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Lens_simple
*
* %I
* Written by: Erik Knudsen
* Date: June 16, 2009
* Version: $Revision: 1.0$
* Origin: Risoe
* Release: McXtrace 0.1
*
* Rectangular/circular slit
*
* %D
* Models an infinitely thin refractive lens, with focal_length f and 
* a numerical transmission of 0<T<=1
* the lens plane is in the X-Y plane at Z=0
*
* %P
* INPUT PARAMETERS
*
* xwidth: Width of lens. Overrides xmin,xmax. (m)
* yheight:Height of lens. Overrides ymin,ymax. (m)
* focal_length: Focal length of the lens. If >0 the lens is in focusing mode, <0 divergent (m)
*
* Optional parameters:
* T: Transmission efficieny of the lens. (1)
*
* %E
*******************************************************************************/
DEFINE COMPONENT Lens_simple
DEFINITION PARAMETERS ()
SETTING PARAMETERS (xwidth,yheight,T=1,focal_length) 

OUTPUT PARAMETERS ()
STATE PARAMETERS (x,y,z,kx,ky,kz,phi,Ex,Ey,Ez,p)

INITIALIZE
%{
  if(!xwidth || !yheight){
    fprintf(stderr,"%s: Lens has zero area\n",NAME_CURRENT_COMP);
    exit(0);
  }
  xmax=xwidth/2.0;
  xmin=-xmax;
  ymax=yheight/2.0;
  ymin=-ymax;
%}

TRACE
%{
  double nx,ny.nz,rnx,rny,rnz;  
  double sp,theta;

  PROP_Z0;
  if (x >xmin && x<xmax && y>ymin && y<ymax){
    SCATTER;
    if(T=0) 
      ABSORB;
    else
      p*=T;
    
    /*change direction towards focal pt.*/
    /*rotation is around the vector n given by k_xy and z-axis.*/
    vec_prod(kx,ky,0,0,0,focal_length,nx,ny,nz);
    NORM(nx,ny,nz);
    /*rotation angle is given by the x and y coordinates and the focal length*/
    theta=atan(sqrt(x*x+y*y)/fabs(f));
    sp=scalar_prod(nx,ny,nz,kx,ky,kz);
    vec_prod(kx,ky,kz,nx,ny,nz,rcnx,rcny,rcnz);
    /*update k-vector using rotation formula*/
    kx= rx*cos(theta)+ sp*nx*(1-cos(theta)) + sin(theta)*rcnx;
    ky= ry*cos(theta)+ sp*ny*(1-cos(theta)) + sin(theta)*rcny;
    kz= rz*cos(theta)+ sp*nz*(1-cos(theta)) + sin(theta)*rcnz;
  }
  else{
    ABSORB;
  }
%}

MCDISPLAY
%{
  magnify("xy");
  rectangle(0,0,0,xwidth,yheight);
%}

END
