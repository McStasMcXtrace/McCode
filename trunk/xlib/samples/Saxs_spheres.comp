/*******************************************************************************
*
* McXtrace, Xray-tracing package
*         Copyright 1997-2003, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Saxs_spheres
*
* %I
* Written by: E. Knudsen, P. Willendrup, K. Lefmann, L. Arleth
* Date: 28.10.2010
* Version: $Revision: beta$
* Origin: Risoe
* Release: McXtrace 1.0
*
* Sample for Small Angle X-ray Scattering - hard spheres in thin solution, mono disperse.
*
* %D
* Sample for use in a SAXS instrument, models hard, monodisperse spheres in thin solution.
*   The shape of the sample may be a filled box with dimensions 
*   xwidth, yheight, zdepth, a cylinder with dimensions radius and yheight,
*   a filled sphere with radius.
*
* Example: Saxs_spheres(R = 100, Phi = 1e-3, Delta_rho = 0.6, sigma_abs = 50, xwidth=0.01, yheight=0.01, zdepth=0.005)
*
* %P
*
* INPUT PARAMETERS
*
* R:         Radius of scattering hard spheres (AA)
* Phi:       Particle volume fraction (1)
* Delta_rho: Excess scattering length density (fm/AA^3)
* sigma_abs: Absorption cross section density at 2200 m/s (m^-1)
* radius:    Outer radius of sample in (x,z) plane for cylinder/sphere [m]
* xwidth:    horiz. dimension of sample, as a width (m)
* yheight:   vert . dimension of sample, as a height for cylinder/box (m)
* zdepth:    depth of sample (m)
* target_index: Relative index of component to focus at, e.g. next is +1 [1]
* focus_xw:  horiz. dimension of a rectangular area [m]
* focus_yh:  vert.  dimension of a rectangular area [m]
* focus_aw:  horiz. angular dimension of a rectangular area [deg]
* focus_ah:  vert.  angular dimension of a rectangular area [deg]
* focus_r:   Detector (disk-shaped) radius (m)
*
* Optional parameters:
* target_x:
* target_y:   position of target to focus at [m]
* target_z:
*
* Variables calculated in the component
*
* my_s: Attenuation factor due to scattering (m^-1)
* my_a: Attenuation factor due to absorbtion (m^-1)
*
* %Link
* The test/example instrument <a href="../examples/SANS.instr">SANS.instr</a>.
%L
* Some alternative implementations exist as contributed components.
* %E
*******************************************************************************/

DEFINE COMPONENT Saxs_spheres
DEFINITION PARAMETERS ()
SETTING PARAMETERS (R=100, Phi=1e-3, Delta_rho=0.6, sigma_abs=0, 
xwidth=0, yheight=0, zdepth=0, radius=0,
target_x = 0, target_y = 0, target_z = 6, int target_index=0, 
focus_xw=0, focus_yh=0, focus_aw=0, focus_ah=0,  focus_r=0)
OUTPUT PARAMETERS (my_s_v2, my_a_v, shape)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 
DECLARE
%{
  double my_s_pre, my_a_v, q_v, q, shape;
%}
INITIALIZE
%{
  shape=-1; /* -1:no shape, 0:cyl, 1:box, 2:sphere  */
  if (xwidth && yheight && zdepth)  shape=1; /* box */
  else if (radius > 0 && yheight)   shape=0; /* cylinder */
  else if (radius > 0 && !yheight)  shape=2; /* sphere */

  if (shape < 0) 
    exit(fprintf(stderr,"Saxs_spheres: %s: sample has invalid dimensions.\n"
                        "ERROR     Please check parameter values.\n", NAME_CURRENT_COMP));
  
  /* now compute target coords if a component index is supplied */
  if (!target_index && !target_x && !target_y && !target_z) target_index=1;
  if (target_index)
  {
    Coords ToTarget;
    ToTarget = coords_sub(POS_A_COMP_INDEX(INDEX_CURRENT_COMP+target_index),POS_A_CURRENT_COMP);
    ToTarget = rot_apply(ROT_A_CURRENT_COMP, ToTarget);
    coords_get(ToTarget, &target_x, &target_y, &target_z);
  }

  if (!(target_x || target_y || target_z)) {
    printf("Saxs_spheres: %s: The target is not defined. Using direct beam (Z-axis).\n",
      NAME_CURRENT_COMP);
    target_z=1;
  }
  /*this set to 1 for now - should be taken from dabax database or NIST*/
  my_a_v = sigma_abs;

  my_s_pre = Phi * 4*PI*R*R*R/3 * Delta_rho*Delta_rho;

%}
TRACE
%{
  double l0, l1, v, l_full, l, l_1, dt, d_phi, theta, my_s;
  double aim_x=0, aim_y=0, aim_z=1, axis_x, axis_y, axis_z;
  double arg, tmp_vx, tmp_vy, tmp_vz, vout_x, vout_y, vout_z;
  double f, solid_angle, vx_i, vy_i, vz_i, qx, qy, qz;
  char   intersect=0;

  /* Intersection neutron trajectory / sample (sample surface) */
  if (shape == 0)
    intersect = cylinder_intersect(&l0, &l1, x, y, z, kx, ky, kz, radius, yheight);
  else if (shape == 1)
    intersect = box_intersect(&l0, &l1, x, y, z, kx, ky, kz, xwidth, yheight, zdepth);
  else if (shape == 2)
    intersect = sphere_intersect(&l0, &l1, x, y, z, kx, ky, kz, radius);
  if(intersect)
  {
    if(l0 < 0){
      fprintf(stderr,"photon already inside sample %s - absorbing\n",NAME_CURRENT_COMP);
      ABSORB;
    }
    /* Xray enters at l=l0. */
    k = sqrt(kx*kx + ky*ky + kz*kz);
    l_full = (l1 - l0);             /* Length of full path through sample */
    dl = rand01()*(l1 - l0) + l0; /* Time of scattering */
    PROP_DL(dl);                  /* Point of scattering */
    l = (dl-l0);                /* Penetration in sample */

    kx_i=kx;
    ky_i=ky;
    kz_i=kz;
    if ((target_x || target_y || target_z)) {
      aim_x = target_x-x;       /* Vector pointing at target (anal./det.) */
      aim_y = target_y-y;
      aim_z = target_z-z;
    }
    if(focus_aw && focus_ah) {
      randvec_target_rect_angular(&kx, &ky, &kz, &solid_angle,
        aim_x, aim_y, aim_z, focus_aw, focus_ah, ROT_A_CURRENT_COMP);
    } else if(focus_xw && focus_yh) {
      randvec_target_rect(&kx, &ky, &kz, &solid_angle,
        aim_x, aim_y, aim_z, focus_xw, focus_yh, ROT_A_CURRENT_COMP);
    } else {
      randvec_target_circle(&kx, &ky, &kz, &solid_angle, aim_x, aim_y, aim_z, focus_r);
    }
    NORM(kx, ky, kz);
    kx *= k;
    ky *= k;
    kz *= k;
    qx = (kx_i-kx);
    qy = (ky_i-ky);
    qz = (kz_i-kz):
    q = sqrt(qx*qx+qy*qy+qz*qz);

    f = 3 * (sin(q*R) - q*R*cos(q*R))/(q*R*q*R*q*R);

    p *= l_full*solid_angle/(4*PI)*my_s_pre*f*f*exp(-my_a_v*(l+l1));
    SCATTER;
  }
%}

MCDISPLAY
%{
  magnify("xyz");
  if (shape == 0) {	/* cylinder */
    circle("xz", 0,  yheight/2.0, 0, radius);
    circle("xz", 0, -yheight/2.0, 0, radius);
    line(-radius, -yheight/2.0, 0, -radius, +yheight/2.0, 0);
    line(+radius, -yheight/2.0, 0, +radius, +yheight/2.0, 0);
    line(0, -yheight/2.0, -radius, 0, +yheight/2.0, -radius);
    line(0, -yheight/2.0, +radius, 0, +yheight/2.0, +radius);
  }
  else if (shape == 1) { 	/* box */
    box(0,0,0,xwidth,yheight,zdepth);
  }
  else if (shape == 2) {	/* sphere */
    circle("xy", 0,  0.0, 0, radius);
    circle("xz", 0,  0.0, 0, radius);
    circle("yz", 0,  0.0, 0, radius);        
  }
%}
END
