/*****************************************************************************
* McXtrace, x-ray tracing package
*         Copyright (C) Risoe National Laboratory, Roskilde, Denmark
*
* Component: PowderN
*
* %I
* Written by: P. Willendrup, L. Chapon, K. Lefmann, A.B.Abrahamsen, N.B.Christensen, E.M.Lauridsen.
* Date: 4.2.98
* Version: $Revision: 1.54 $
* Origin: McStas release
* Modified by: KL, KN 20.03.98   (rewrite)
* Modified by: KL,    28.09.01   (two lines)
* Modified by: KL,    22.05.03   (background)
* Modified by: KL, PW 01.05.05   (N lines)
* Modified by: PW, LC 04.10.05   (Merge with Chapon Powder_multi)
* Modified by: PW, KL 05.06.07   (Concentricity)
* Modified by: EF,    17.10.08   (added any shape sample geometry)
* Modified for X-ray use: EK, 28.10.10
*
* General powder sample (N lines, single scattering, incoherent scattering)
*
* %D
* General powder sample with
*         many scattering vectors
*         possibility for intrinsic line broadening
*         incoherent backgorund ratio is specified by user.
*         No multiple scattering. No secondary extinction.
*
* Based on Powder1/Powder2/Single_crystal.
* Geometry is a powder filled cylinder or a box.
* Incoherent scattering is only provided here to account for a background
* The efficient is highly improved when restricting the vertical scattering
* range on the Debye-Scherrer cone (with 'd_phi').
* The unit cell volume Vc may also be computed when giving the density,
* the atomic/molecular weight and the number of atoms per unit cell.
*
* <b>Sample shape:</b>
* Sample shape may be a cylinder, a sphere, a box or any other shape.
*   box/plate:       xwidth x yheight x zdepth (thickness=0)
*   hollow box/plate:xwidth x yheight x zdepth and thickness>0
*   cylinder:        radius x yheight (thickness=0)
*   hollow cylinder: radius x yheight and thickness>0
*   sphere:          radius (yheight=0 thickness=0)
*   hollow sphere:   radius and thickness>0 (yheight=0)
*   any shape:       geometry=OFF_file
*
*   The complex geometry option handles any closed non-convex polyhedra.
*   It computes the intersection points of the xray with the object  
*   transparently, so that it can be used like a regular sample object.
*   It supports the OFF and NOFF file format but not COFF (colored faces). 
*   Such files may be generated from XYZ data using:
*     qhull < coordinates.xyz Qx Qv Tv o > geomview.off 
*   and viewed with geomview or java -jar jroff.jar (see below).
*   The default size of the object depends of the OFF file data, but its 
*   bounding box may be resized using xwidth,yheight and zdepth.
*
* If you use this component and produce valuable scientific results, please
* cite authors with references bellow (in <a href="#links">Links</a>).
*
* Example: PowderN(reflections = "c60.lau", d_phi = 15 , radius = 0.01,
*   yheight = 0.05, Vc = 1076.89, sigma_abs = 0, Delta_d=0, DW=1,
*   format=Crystallographica)
*
* <b>Powder definition file format</b>
* Powder structure is specified with an ascii data file 'reflections'.
* The powder data are free-text column based files.
* Lines begining by '#' are read as comments (ignored) but they may contain
* the following keywords (in the header):
*   #Vc           <value of unit cell volume Vc [Angs^3]>
*   #sigma_abs    <value of Absorption cross section [barns]>
*   #sigma_inc    <value of Incoherent cross section [barns]>
*   #Debye_Waller <value of Debye-Waller factor DW>
*   #Delta_d/d    <value of Detla_d/d width for all lines>
* These values are not read if entered as component parameters (Vc=...)
*
* The signification of the columns in the numerical block may be
* set using the 'format' parameter. Built-in formats are:
*   format=Crystallographica
*   format=Fullprof
*   format=Lazy
* and these specifications it is important NOT to use quotes, as shown.
*
* An other possibility to define other formats is to set directly
* the signification of the columns as a vector of indexes in the order
*   format={j,d,F2,DW,Delta_d/d,1/2d,q,F}
* Signification of the symbols is given below. Indexes start at 1.
* Indexes with zero means that the column is not present, so that:
*   Crystallographica={ 4,5,7,0,0,0,0,0 }
*   Fullprof         ={ 4,0,8,0,0,5,0,0 }
*   Lazy             ={17,6,0,0,0,0,0,13}
* Here again, NO quotes should be around the 'format' value.
*
* At last, the format may be overridden by direct definition of the
* column indexes in the file itself by using the following keywords
* in the header (e.g. '#column_j 4'):
*   #column_j     <index of the multiplicity 'j' column>
*   #column_d     <index of the d-spacing 'd' column [Angs]>
*   #column_F2    <index of the squared str. factor '|F|^2' column [b]>
*   #column_F     <index of the structure factor norm '|F|' column>
*   #column_DW    <index of the Debye-Waller factor 'DW' column>
*   #column_Dd    <index of the relative line width Delta_d/d 'Dd' column>
*   #column_inv2d <index of the 1/2d=sin(theta)/lambda 'inv2d' column>
*   #column_q     <index of the scattering wavevector 'q' column [Angs-1]>
*
* <b>Concentricity</b>
*
* PowderN assumes 'concentric' shape, i.e. can contain other components inside its
* optional inner hollow. Example, Sample in Al cryostat:
*
*
* COMPONENT Cryo = PowderN(reflections="Al.laz", radius = 0.01, thickness = 0.001,
*                          concentric = 1, p_interact=0.1)
* AT (0,0,0) RELATIVE Somewhere
*
* COMPONENT Sample = some_other_component(with geometry FULLY enclosed in the hollow)
* AT (0,0,0) RELATIVE Somewhere
*
* COMPONENT Cryo2 = COPY(Cryo)(concentric = 0)
* AT (0,0,0) RELATIVE Somewhere
*
*
* (The second instance of the cryostat component can also be written out completely
*  using PowderN(...). In both cases, this second instance needs concentric = 0.)
*
* %P
* INPUT PARAMETERS
* radius:   Outer radius of sample in (x,z) plane [m]
* xwidth:   Horiz. dimension of sample, as a width [m]
* yheight:  Height of sample y direction [m]
* zdepth:   Depth of box sample [m]
* thickness:Thickness of hollow sample. 
*                Negative value extends the hollow volume outside of the box/cylinder. [m]
* reflections: Input file for reflections.
*                Use only incoherent scattering if NULL or "" [string]
*
* Optional parameters:
* d_phi:    Angle corresponding to the vertical angular range
*             to focus to, e.g. detector height. 0 for no focusing [deg,0-180]
* pack:     Packing factor [1]
* Delta_d:  Global relative Delta_d/d spreading when the 'w' column
*             is not available. Use 0 if ideal. [Angs]
* format:   Name of the format, or list of column indexes
*             (see Description). [no quotes]
* p_inc:    Fraction of incoherently scattered xrays [1]
* p_transmit: Fraction of transmitted (only attenuated) xrays [1]
* p_interact: Fraction of events interacting with sample, e.g. 1-p_transmit-p_inc [1]
* concentric: Indicate that this component has a hollow geometry
*               and may contain other components. It should then be duplicated 
*               after the inside part (only for box, cylinder, sphere) [1] 
* geometry:   Name of an Object File Format (OFF) file for complex geometry. 
*               The OFF file may be generated from XYZ coordinates using qhull/powercrust [str]
* barns:    Flag to indicate if |F|^2 from 'reflections' is in barns or fm^2 
*             (barns=1 for laz, barns=0 for lau type files).[1]
* sigma_abs:Absorption cross section per unit cell at 2200 m/s [barns]
* sigma_inc:Incoherent cross section per unit cell [barns]
* Vc:       Volume of unit cell=nb atoms per cell/density of atoms [AA^3]
* DW:       Global Debey-Waller factor when the 'DW' column
*             is not available. Use 1 if included in F2 [1]
* weight:   Atomic/molecular weight of material [g/mol]
* density:  Density of material. rho=density/weight/1e24*N_A. [g/cm^3]
* nb_atoms: Number of sub-unit per unit cell, that is ratio of sigma for chemical formula to sigma per unit cell [1]
*
* %L
* “Validation of a realistic powder sample using data from DMC at PSI” Willendrup P, Filges U, Keller L, Farhi E, Lefmann K, Physica B-Cond Matt 385 (2006) 1032.  
* %L
* See also: Powder1, Powder2 and PowderN
* %L
* See <a href="http://icsd.ill.fr">ICSD</a> Inorganic Crystal Structure Database
* %L
* Cross sections for single elements: http://www.ncnr.nist.gov/resources/n-lengths/
* %L
* Cross sections for compounds:       http://www.ncnr.nist.gov/resources/sldcalc.html
* %L
* Web Elements                        http://www.webelements.com/
* %L
* Fullprof powder refinement:         http://www.ill.eu/sites/fullprof/index.html
* %L
* Crystallographica software:         http://www.crystallographica.com/
* %L
* Geomview and Object File Format (OFF) <http://www.geomview.org>
* %L
* Java version of Geomview (display only) jroff.jar <http://www.holmes3d.net/graphics/roffview/> 
* %L
* Powercrust/qhull <http://qhull.org>
*
* %E
*****************************************************************************/
DEFINE COMPONENT PowderN
DEFINITION PARAMETERS (format=Undefined)
     SETTING PARAMETERS (string reflections=0, string material=0, string geometry=0,
                    radius=0, yheight=0, xwidth=0, zdepth=0, thickness=0,
                    pack=1, Vc=0, sigma_abs=0, sigma_inc=0, Delta_d=0, p_inc=0.1, p_transmit=0.1,
                    DW=0, nb_atoms=1, d_phi=0, p_interact=0,
                    concentric=0, density=0, weight=0, barns=1)
OUTPUT PARAMETERS (line_info, Nq, my_s_k2, XsectionFactor,
  my_s_k2_sum, my_a_k, my_inc, my_q, my_w, columns, 
  radius_i, xwidth_i, yheight_i, zdepth_i, offdata)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 
SHARE
%{
  /* used for reading data table from file */
  %include "read_table-lib"
  %include "interoff-lib"
/* Declare structures and functions only once in each instrument. */
#ifndef POWDERN_DECL
#define POWDERN_DECL
/* format definitions in the order {j d F2 DW Dd inv2d q F} */
#ifndef Crystallographica
#define Crystallographica { 4,5,7,0,0,0,0,0 }
#define Fullprof          { 4,0,8,0,0,5,0,0 }
#define Lazy              {17,6,0,0,0,0,0,13 }
#define Undefined         { 0,0,0,0,0,0,0,0 }
#endif

  struct line_data
    {
      double F2;                  /* Value of structure factor */
      double q;                   /* Qvector */
      int j;                      /* Multiplicity */
      double DWfactor;            /* Debye-Waller factor */
      double w;                   /* Intrinsic line width */
    };

  struct abs_data
  {
    double E;       /*energy (in keV)*/
    double k;       /*wavenumber corresponding to E*/
    double sigma_a; /*absorption cross section for energy E*/
    double mu;      /*absoprtion coefficient for the energy E*/
  };
  struct line_info_struct
    {
      struct line_data *list;     /* Reflection array */
      int  count;                  /* Number of reflections */
      double Dd;
      double DWfactor;
      double V_0;
      double rho;
      double at_weight;
      double at_nb;
      double sigma_a;
      double sigma_i;
      char   compname[256];
      double flag_barns;
      int    shape; /* 0 cylinder, 1 box, 2 sphere, 3 OFF file */
      int    column_order[8]; /* column signification */
      int    flag_warning;
    };
    
  off_struct offdata;

  int read_abs_data(char *ABS_file, struct abs_data **abs)
  {
    t_Table table;
    char **parsing;
    int status,i;

    if (!ABS_file || !strlen(ABS_file) || !strcmp(ABS_file, "NULL")) {
      fprintf(stderr,"Warning: material file (%s) not found.\n",ABS_file);
      *abs=calloc(2,sizeof(struct abs_data));
      (*abs)[1].E=-1;
      (*abs)[1].k=-1;
      (*abs)[1].mu=-1;
    }else{
      if ( (status=Table_Read(&table,ABS_file,0))==-1){
        fprintf(stderr,"Error: %s Could not parse file \"%s\"\n",NAME_CURRENT_COMP,ABS_file);
        exit(-1);
      }
      parsing=Table_ParseHeader(table.header,"Z","A[r]","rho",NULL);
      *abs=calloc(table.rows+1,sizeof(struct abs_data));
      for (i=0;i<table.rows;i++){
        (*abs)[i].E=table.data[i*table.columns];
        (*abs)[i].k=(*abs)[i].E*E2K;
        // get from cox_76 abs_info.data[i].sigma_a=aba_info.data[i]*
        (*abs)[i].mu=table.data[i*table.columns + 7];
      }
      (*abs)[i].E=-1;
      (*abs)[i].k=-1;
      (*abs)[i].mu=-1;
      Table_Free(&table);
      return 1;
    }
  }

  int read_line_data(char *SC_file, struct line_info_struct *info)
  {
    struct line_data *list = NULL;
    int    size = 0;
    t_Table sTable; /* sample data table structure from SC_file */
    int    i=0;
    int    mult_count  =0;
    char   flag=0;
    double q_count=0, j_count=0, F2_count=0;
    char **parsing;
    int    list_count=0;

    if (!SC_file || !strlen(SC_file) || !strcmp(SC_file, "NULL")) {
      printf("PowderN: %s: Using incoherent elastic scattering only\n",
          info->compname);
      info->count = 0;
      return(0);
    }
    Table_Read(&sTable, SC_file, 1); /* read 1st block data from SC_file into sTable*/

    /* parsing of header */
    parsing = Table_ParseHeader(sTable.header,
      "Vc","V_0",
//      "sigma_abs","sigma_a ",
//      "sigma_inc","sigma_i ",
      "column_j",
      "column_d",
      "column_F2",
      "column_DW",
      "column_Dd",
      "column_inv2d", "column_1/2d", "column_sintheta/lambda",
      "column_q", /* 14 */
      "DW", "Debye_Waller",
      "Detla_d/d",
      "column_F ",
      "V_rho",
      "density",
      "weight",
      "nb_atoms","multiplicity",
      NULL);

    if (parsing) {
      if (parsing[0] && !info->V_0)     info->V_0    =atof(parsing[0]);
      if (parsing[1] && !info->V_0)     info->V_0    =atof(parsing[1]);
      if (parsing[2] && !info->sigma_a) info->sigma_a=atof(parsing[2]);
      if (parsing[3] && !info->sigma_a) info->sigma_a=atof(parsing[3]);
      if (parsing[4] && !info->sigma_i) info->sigma_i=atof(parsing[4]);
      if (parsing[5] && !info->sigma_i) info->sigma_i=atof(parsing[5]);
      if (parsing[6])                   info->column_order[0]=atoi(parsing[6]);
      if (parsing[7])                   info->column_order[1]=atoi(parsing[7]);
      if (parsing[8])                   info->column_order[2]=atoi(parsing[8]);
      if (parsing[9])                   info->column_order[3]=atoi(parsing[9]);
      if (parsing[10])                  info->column_order[4]=atoi(parsing[10]);
      if (parsing[11])                  info->column_order[5]=atoi(parsing[11]);
      if (parsing[12])                  info->column_order[5]=atoi(parsing[12]);
      if (parsing[13])                  info->column_order[5]=atoi(parsing[13]);
      if (parsing[14])                  info->column_order[6]=atoi(parsing[14]);
      if (parsing[15] && info->DWfactor<=0)    info->DWfactor=atof(parsing[15]);
      if (parsing[16] && info->DWfactor<=0)    info->DWfactor=atof(parsing[16]);
      if (parsing[17] && info->Dd <0)          info->Dd      =atof(parsing[17]);
      if (parsing[18])                  info->column_order[7]=atoi(parsing[18]);
      if (parsing[19] && !info->V_0)    info->V_0    =1/atof(parsing[19]);
      if (parsing[20] && !info->rho)    info->rho    =atof(parsing[20]);
      if (parsing[21] && !info->at_weight)     info->at_weight    =atof(parsing[21]);
      if (parsing[22] && info->at_nb <= 1)  info->at_nb    =atof(parsing[22]);
      if (parsing[23] && info->at_nb <= 1)  info->at_nb    =atof(parsing[23]);
      for (i=0; i<=23; i++) if (parsing[i]) free(parsing[i]);
      free(parsing);
    }

    if (!sTable.rows)
      exit(fprintf(stderr, "PowderN: %s: Error: The number of rows in %s "
       "should be at least %d\n", info->compname, SC_file, 1));
    else size = sTable.rows;
    Table_Info(sTable);
    printf("PowderN: %s: Reading %d rows from %s\n",
          info->compname, size, SC_file);
          
    if (info->column_order[0] == 4 && info->flag_barns !=0)
    printf("PowderN: %s: Powder file probably of type Crystallographica/Fullprof (lau)\n"
           "WARNING: but F2 unit is set to barns=1 (barns). Intensity might be 100 times too high.\n", 
           info->compname);
  if (info->column_order[0] == 17 && info->flag_barns == 0)
    printf("PowderN: %s: Powder file probably of type Lazy Pulver (laz)\n"
           "WARNING: but F2 unit is set to barns=0 (fm^2). Intensity might be 100 times too low.\n", 
           info->compname);
    /* allocate line_data array */
    list = (struct line_data*)malloc(size*sizeof(struct line_data));

    for (i=0; i<size; i++)
    {
      /*      printf("Reading in line %i\n",i);*/
      double j=0, d=0, w=0, q=0, DWfactor=0, F2=0;
      int index;

      if (info->Dd >= 0)      w         = info->Dd;
      if (info->DWfactor > 0) DWfactor  = info->DWfactor;

      /* get data from table using columns {j d F2 DW Dd inv2d q F} */
      /* column indexes start at 1, thus need to substract 1 */
      if (info->column_order[0] >0)
        j = Table_Index(sTable, i, info->column_order[0]-1);
      if (info->column_order[1] >0)
        d = Table_Index(sTable, i, info->column_order[1]-1);
      if (info->column_order[2] >0)
        F2 = Table_Index(sTable, i, info->column_order[2]-1);
      if (info->column_order[3] >0)
        DWfactor = Table_Index(sTable, i, info->column_order[3]-1);
      if (info->column_order[4] >0)
        w = Table_Index(sTable, i, info->column_order[4]-1);
      if (info->column_order[5] >0)
        { d = Table_Index(sTable, i, info->column_order[5]-1);
          d = (d > 0? 1/d/2 : 0); }
      if (info->column_order[6] >0)
        { q = Table_Index(sTable, i, info->column_order[6]-1);
          d = (q > 0 ? 2*PI/q : 0); }
      if (info->column_order[7] >0  && !F2)
        { F2 = Table_Index(sTable, i, info->column_order[7]-1); F2 *= F2; }

      /* assign and check values */
      j = (j > 0 ? j : 0);
      q = (d > 0 ? 2*PI/d : 0); /* this is q */
      DWfactor = (DWfactor > 0 ? DWfactor : 1);
      w = (w>0 ? w : 0); /* this is q and d relative spreading */
      F2 = (F2 >= 0 ? F2 : 0);
      if (j == 0 || q == 0) {
        printf("PowderN: %s: line %i has invalid definition\n"
               "         (mult=0 or q=0 or d=0)\n", info->compname, i);
        continue;
      }
      list[list_count].j = j;
      list[list_count].q = q;
      list[list_count].DWfactor = DWfactor;
      list[list_count].w = w;
      list[list_count].F2= F2;

      /* adjust multiplicity if j-column + multiple d-spacing lines */
      /* if  d = previous d, increase line duplication index */
      if (!q_count)     q_count = q;
      if (!j_count)     j_count = j;
      if (!F2_count)     F2_count = F2;
      if (fabs(q_count-q) < 0.0001*fabs(q)
       && fabs(F2_count-F2) < 0.0001*fabs(F2) && j_count == j) {
       mult_count++; flag=0; }
      else flag=1;
      if (i == size-1) flag=1;
      /* else if d != previous d : just passed equivalent lines */
      if (flag) {
        if (i == size-1) list_count++;
      /*   if duplication index == previous multiplicity */
      /*      set back multiplicity of previous lines to 1 */
        if (mult_count && list_count>0 &&
          (mult_count == list[list_count-1].j
          || (mult_count == list[list_count].j && i == size-1)) ) {
          printf("PowderN: %s: Set multiplicity to 1 for lines [%i:%i]\n"
                  "         (d-spacing %g is duplicated %i times)\n",
            info->compname, list_count-mult_count, list_count-1, list[list_count-1].q, mult_count);
          for (index=list_count-mult_count; index<list_count; list[index++].j = 1);
          mult_count   = 1;
          q_count = q;
          j_count = j;
          F2_count = F2;
        }
        if (i == size-1) list_count--;
        flag=0;
      }
      list_count++;
    } /* end for */
    printf("PowderN: %s: File %s done (%i valid lines).\n", info->compname, SC_file, list_count);
    Table_Free(&sTable);
    info->list  = list;
    info->count = list_count;

    return(list_count);
  }
#endif /* !POWDERN_DECL */

%}

DECLARE
%{
  struct line_info_struct line_info;
  struct abs_data *a_info;
  int Nq=0;
  double my_s_k2_sum=0;
  double my_a_k=0, my_inc=0;
  double *my_w,*my_q, *my_s_k2;
  int    columns[8] = format;
  double XsectionFactor;
  double radius_i=0, xwidth_i=0, yheight_i=0, zdepth_i=0;
  
  off_struct offdata;
%}
INITIALIZE
%{
  int i=0;
  struct line_data *L;
  line_info.Dd       = Delta_d;
  line_info.DWfactor = DW;
  line_info.V_0      = Vc;
  line_info.rho      = density;
  line_info.at_weight= weight;
  line_info.at_nb    = nb_atoms;
//  line_info.sigma_a  = sigma_abs;
//  line_info.sigma_i  = sigma_inc;
  line_info.flag_barns=barns;
  line_info.shape    = 0;
  line_info.flag_warning=0;
  for (i=0; i< 8; i++) line_info.column_order[i] = columns[i];
  strncpy(line_info.compname, NAME_CURRENT_COMP, 256);
  
  line_info.shape=-1; /* -1:no shape, 0:cyl, 1:box, 2:sphere, 3:any-shape  */
  if (geometry && strlen(geometry) && strcmp(geometry, "NULL") && strcmp(geometry, "0")) {
	  if (off_init(geometry, xwidth, yheight, zdepth, 0, &offdata)) {
      line_info.shape=3; thickness=0; concentric=0;
    }
  }
  else if (xwidth && yheight && zdepth)  line_info.shape=1; /* box */
  else if (radius > 0 && yheight)        line_info.shape=0; /* cylinder */
  else if (radius > 0 && !yheight)       line_info.shape=2; /* sphere */

  if (line_info.shape < 0) 
    exit(fprintf(stderr,"PowderN: %s: sample has invalid dimensions.\n"
                        "ERROR    Please check parameter values (xwidth, yheight, zdepth, radius).\n", NAME_CURRENT_COMP));
  if (thickness) {
    if (radius && (radius < fabs(thickness))) {
      fprintf(stderr,"PowderN: %s: hollow sample thickness is larger than its volume (sphere/cylinder).\n"
                     "WARNING  Please check parameter values. Using bulk sample (thickness=0).\n", NAME_CURRENT_COMP);
      thickness=0;
    }
    else if (!radius && (xwidth < 2*fabs(thickness) || yheight < 2*fabs(thickness) || zdepth < 2*fabs(thickness))) {
      fprintf(stderr,"PowderN: %s: hollow sample thickness is larger than its volume (box).\n"
                     "WARNING  Please check parameter values.\n", NAME_CURRENT_COMP);
    }
  }
  
  if (concentric && thickness==0) {
    printf("PowderN: %s:Can not use concentric mode\n"
           "WARNING     on non hollow shape. Ignoring.\n",
           NAME_CURRENT_COMP);
    concentric=0;
  }
    
  if (thickness>0) {
    if (radius>thickness) {
      radius_i=radius-thickness;
    } else {
      if (xwidth>2*thickness)  xwidth_i =xwidth -2*thickness; 
      if (yheight>2*thickness) yheight_i=yheight-2*thickness; 
      if (zdepth>2*thickness)  zdepth_i =zdepth -2*thickness;
    }
  } else if (thickness<0) {
    thickness = fabs(thickness);
    if (radius) {
      radius_i=radius;
      radius=radius_i+thickness;
    } else {
      xwidth_i =xwidth;
      yheight_i=yheight;
      zdepth_i =zdepth;
      xwidth   =xwidth +2*thickness; 
      yheight  =yheight+2*thickness; 
      zdepth   =zdepth +2*thickness;
    }
  }
  
  if (!yheight_i) {
    yheight_i = yheight;
  }
  if (p_interact) {
    if (p_interact < p_inc) { double tmp=p_interact; p_interact=p_inc; p_inc=tmp; }
    p_transmit = 1-p_interact-p_inc;
  }
  
  if (p_inc + p_transmit > 1) {
    fprintf(stderr,"PowderN: %s: You have requested an unmeaningful choice of the 'p_inc' and 'p_transmit' parameters (sum is %g, exeeding 1). Fixing.\n", 
                 NAME_CURRENT_COMP, p_inc+p_transmit);
    if (p_inc > p_transmit) p_transmit=1-2*p_inc;
    else p_transmit=1-2*p_inc; 
  } else if (p_inc + p_transmit == 1) {
    printf("PowderN: %s: You have requested all xrays be attenuated\n"
           "WARNING  or incoherently scattered!\n", NAME_CURRENT_COMP);
  }

  if (concentric) {
    printf("PowderN: %s WARNING: Concentric mode - remember to include the 'opposite' copy of this component !\n (The equivalent, 'opposite' comp should have concentric=0)\n", NAME_CURRENT_COMP);
    if (p_transmit == 0) {
      printf("PowderN: %s: Concentric mode and p_transmit==0 !?\n"
             "WARNING  Don't you want any transmitted xrays?\n", NAME_CURRENT_COMP);
    }
  }
  
  if (reflections && strlen(reflections) && strcmp(reflections, "NULL") && strcmp(reflections, "0")) {
    i = read_line_data(reflections, &line_info);
    if (i == 0)
      exit(fprintf(stderr,"PowderN: %s: reflection file %s is not valid.\n"
                        "ERROR    Please check file format (laz or lau).\n", NAME_CURRENT_COMP, reflections));
  }

  /* compute the scattering unit density from material weight and density */
  /* the weight of the scattering element is the chemical formula molecular weight 
   * times the nb of chemical formulae in the scattering element (nb_atoms) */
  if (!line_info.V_0 && line_info.at_nb > 0
    && line_info.at_weight > 0 && line_info.rho > 0) {
    /* molar volume [cm^3/mol] = weight [g/mol] / density [g/cm^3] */
    /* atom density per Angs^3 = [mol/cm^3] * N_Avogadro *(1e-8)^3 */
    line_info.V_0 = line_info.at_nb
      /(line_info.rho/line_info.at_weight/1e24*6.02214199e23);
  }
  
  /* the scattering unit cross sections are the chemical formula onces 
   * times the nb of chemical formulae in the scattering element */
  if (line_info.at_nb > 0) { 
    line_info.sigma_a *= line_info.at_nb; line_info.sigma_i *= line_info.at_nb;
  }

  if (line_info.V_0 <= 0)
    fprintf(stderr,"PowderN: %s: density/unit cell volume is NULL (Vc). Unactivating component.\n", NAME_CURRENT_COMP);
    
  if (line_info.V_0 && p_inc && !line_info.sigma_i) {
    printf("PowderN %s WARNING: You have requested statistics for incoherent scattering but not defined sigma_inc!\n", NAME_CURRENT_COMP);
  }

  if (line_info.flag_barns) { /* Factor 100 to convert from barns to fm^2 */
    XsectionFactor = 100;
  } else {
    XsectionFactor = 1;
  }
  
  if (line_info.V_0 && i) {
    L = line_info.list;

    Nq  = line_info.count;
    my_q = malloc(Nq*sizeof(double));
    my_w = malloc(Nq*sizeof(double));
    my_s_k2 = malloc(Nq*sizeof(double));
    if (!my_q || !my_w || !my_s_k2)
      exit(fprintf(stderr,"PowderN: %s: ERROR allocating memory (init)\n", NAME_CURRENT_COMP));
    for(i=0; i<Nq; i++)
    {
      my_s_k2[i] = 4*PI*PI*PI*pack*(L[i].DWfactor ? L[i].DWfactor : 1)
                 /(line_info.V_0*line_info.V_0)
                 *(L[i].j * L[i].F2 / L[i].q)*XsectionFactor;
      /* Is not yet divided by k^2 */
      /* Squires [3.103] */
      my_q[i] = L[i].q;
      my_w[i] = L[i].w;
    }
  }
  if (!read_abs_data(material,&a_info)){
    fprintf(stderr,"PowderN: %s Error reading absorption data from file %s - will proceed without absorption.\n",NAME_CURRENT_COMP,material);
  }
//  if (line_info.V_0) {
//    /* Is not yet divided by v */
//    my_abs = pack*line_info.sigma_a/line_info.V_0*2200*100;   // Factor 100 to convert from barns to fm^2
//    my_inc = pack*line_info.sigma_i/line_info.V_0*100;   // Factor 100 to convert from barns to fm^2
//
//    printf("PowderN: %s: Vc=%g [Angs] sigma_abs=%g [barn] sigma_inc=%g [barn] reflections=%s\n",
//      NAME_CURRENT_COMP, line_info.V_0, line_info.sigma_a, line_info.sigma_i, reflections && strlen(reflections) ? reflections : "NULL");
//  }

%}
TRACE
%{
  double l0, l1, l2, l3, k, k1,l_full, l, l_1, dl, alpha0, alpha, theta, my_s, my_s_n;
  double solid_angle, type;
  double arg, tmp_kx, tmp_ky, tmp_kz, kout_x, kout_y, kout_z, nx, ny, nz, my_abs, pmul=1;
  int    line;
  char   intersect=0;
  char   intersecti=0;
  
  if (line_info.V_0 && (Nq || my_inc)) {
    if (line_info.shape == 1) {
      intersect  = box_intersect(&l0, &l3, x, y, z, kx, ky, kz, xwidth, yheight, zdepth);
      intersecti = box_intersect(&l1, &l2, x, y, z, kx, ky, kz, xwidth_i, yheight_i, zdepth_i);
    } else if (line_info.shape == 0) {
      intersect  = cylinder_intersect(&l0, &l3, x, y, z, kx, ky, kz, radius, yheight);
      intersecti = cylinder_intersect(&l1, &l2, x, y, z, kx, ky, kz, radius_i, yheight_i);
    } else if (line_info.shape == 2) {
      intersect  = sphere_intersect  (&l0, &l3, x,y,z, kx,ky,kz, radius);
      intersecti = sphere_intersect  (&l1, &l2, x,y,z, kx,ky,kz, radius_i);
    } else if (line_info.shape == 3) {
      intersect  = off_intersect  (&l0, &l3, NULL, NULL, x,y,z, kx,ky,kz, offdata);
      intersecti = 0; 
    }
  }
  
  if(intersect && l3 >0) {
      
    if (concentric) {
      /* Set up for concentric case */
      /* 'Remove' the backside of this comp */
      if (!intersecti) {
        l1 = (l3 + l0) /2;
      }
      l2 = l1;
      l3 = l1;
      dl = -1.0*rand01(); /* In case of scattering we will scatter on 'forward' part of sample */
    } else {
      if (!intersecti) {
        l1 = (l3 + l0) /2;
        l2 = l1;
      }
      dl = randpm1(); /* Possibility to scatter at all points in line of sight */
    }
      
    /* X-ray enters at t=l0. */
    if(l0 < 0) l0=0; /* already in sample */
    if(l1 < 0) l1=0; /* already in inner hollow */
    if(l2 < 0) l2=0; /* already past inner hollow */
    k = sqrt(kx*kx + ky*ky + kz*kz);
    l_full =l3 - l2 + l1 - l0;

    /* Calculate total scattering cross section at relevant velocity */
    my_s_k2_sum=0;
    for(line=0; line<Nq; line++) {
      if (my_q[line] <= 2*k) {
        my_s_k2_sum+=my_s_k2[line];
      }
    }
     


 
    if (l3 < 0) {
      l3=0; /* Already past sample?! */
      if (line_info.flag_warning < 100) 
      printf("PowderN: %s: Warning: xray has already passed us? (Skipped).\n"
             "         In concentric geometry, this may be caused by a missing concentric=0 option in 2nd enclosing instance.\n", NAME_CURRENT_COMP);
      line_info.flag_warning++;
    } else {
      if (dl<0) { /* Calculate scattering point position */
        dl = fabs(dl)*(l1 - l0); /* 'Forward' part */
      } else {
        dl = dl * (l3 - l2) + (l2-l0) ; /* Possibly also 'backside' part */
      }
      
      my_s = my_s_k2_sum/(k*k);
      /* Total attenuation from scattering */

      /* Total attenuation from absorption */
      int ii=0;
      double delta;
      while(a_info[ii].k!=-1 && k>a_info[ii].k){
        ii++;
      }
      if (a_info[ii].k==-1) {
        my_abs=density*a_info[ii-1].mu;
      }else{
        delta=(k-a_info[ii-1].k)/(a_info[ii].k-a_info[ii-1].k);
        my_abs=density*( (1-delta)*a_info[ii-1].mu + delta*a_info[ii].mu );
      }
      //printf("myabs=%g, k=%g\n",my_abs,k);

      type = rand01();
      p_inc=0; /*is turned off till we fix the Compton scattering code*/
      /* How to handle this one? Transmit (1) / Incoherent (2) / Coherent (3) ? */
      if (type < p_transmit) {
        type = 1; 
        l = l_full; /* Passing through, full length */
        PROP_DL(l3); 
//      } else if (type >= p_transmit && type < (p_transmit + p_inc)) {
//        type = 2;
//        l = v*dt;       /* Penetration in sample */
//        PROP_DL(dl+l0); /* Point of scattering */
//        SCATTER;
      } else if (type >= p_transmit + p_inc) {
        type = 3;
        PROP_DL(dl+l0); /* Point of scattering */
        SCATTER;
      } else {
        exit(fprintf(stderr,"PowderN %s: DEAD - this shouldn't happen!\n", NAME_CURRENT_COMP));
      }
        
      if (type == 3) { /* Make coherent scattering event */
        if (line_info.count > 0) {
          /* choose line */
          if (Nq > 1) line=floor(Nq*rand01());  /* Select between Nq powder lines */
          else line = 0;
          if (my_w[line])
            arg = my_q[line]*(1+my_w[line]*randnorm())/(2.0*k);
          else
            arg = my_q[line]/(2.0*k);
          my_s_n = my_s_k2[line]/(k*k);
          if(fabs(arg) > 1)
            ABSORB;                   /* No bragg scattering possible*/
          theta = asin(arg);          /* Bragg scattering law */
          //printf("picked line %d my_s_n=%g ,theta=%g\n",line,my_s_n,theta);
              
          /* Choose point on Debye-Scherrer cone */
          if (d_phi)
          { /* relate height of detector to the height on DS cone */
            arg = sin(d_phi*DEG2RAD/2)/sin(2*theta);
            /* If full Debye-Scherrer cone is within d_phi, don't focus */
            if (arg < -1 || arg > 1) d_phi = 0;
            /* Otherwise, determine alpha to rotate from scattering plane
               into d_phi focusing area*/
            else alpha = 2*asin(arg);
          }
          if (d_phi) {
            /* Focusing */
            alpha = fabs(alpha);
            /* Trick to get scattering for pos/neg theta's */
            alpha0= 2*rand01()*alpha;
            if (alpha0 > alpha) {
              alpha0=PI+(alpha0-1.5*alpha);
            } else {
              alpha0=alpha0-0.5*alpha;
            }
          }
          else
            alpha0 = PI*randpm1();
              
          /* now find a nearly vertical rotation axis:
           * Either
           *  (k along Z) x (X axis) -> nearly Y axis
           * Or
           *  (k along X) x (Z axis) -> nearly Y axis
           */
          if (fabs(scalar_prod(1,0,0,kx/k,ky/k,kz/k)) < fabs(scalar_prod(0,0,1,kx/k,ky/k,kz/k))) {
            nx = 1; ny = 0; nz = 0;
          } else {
            nx = 0; ny = 0; nz = 1;
          }
          vec_prod(tmp_kx,tmp_ky,tmp_kz, kx,ky,kz, nx,ny,nz);
          
          /* k_out = rotate 'k' by 2*theta around tmp_k: Bragg angle */
          rotate(kout_x,kout_y,kout_z, kx,ky,kz, 2*theta, tmp_kx,tmp_ky,tmp_kz);
          
          /* tmp_k = rotate k_out by alpha0 around 'k' (Debye-Scherrer cone) */
          rotate(tmp_kx,tmp_ky,tmp_kz, kout_x,kout_y,kout_z, alpha0, kx, ky, kz);
          kx = tmp_kx;
          ky = tmp_ky;
          kz = tmp_kz;
          /* Since now scattered and new direction given, calculate path to exit */
          if (line_info.shape == 1) {
            intersect  = box_intersect(&l0, &l3, x, y, z, kx, ky, kz, xwidth, yheight, zdepth);
            if (!intersect) printf("%d %g %g %g %g %g %g %g %g\n",intersect,l0,l3,x,y,z,kx,ky,kz);
            intersecti = box_intersect(&l1, &l2, x, y, z, kx, ky, kz, xwidth_i, yheight_i, zdepth_i);
          } else if (line_info.shape == 0) {
            intersect  = cylinder_intersect(&l0, &l3, x, y, z, kx, ky, kz, radius, yheight);
            intersecti = cylinder_intersect(&l1, &l2, x, y, z, kx, ky, kz, radius_i, yheight_i);
          } else if (line_info.shape == 2) {
            intersect  = sphere_intersect  (&l0, &l3, x,y,z, kx,ky,kz, radius);
            intersecti = sphere_intersect  (&l1, &l2, x,y,z, kx,ky,kz, radius_i);
          } else if (line_info.shape == 3) {
            intersect  = off_intersect  (&l0, &l3, NULL, NULL, x,y,z, kx,ky,kz, offdata);
            intersecti = 0;
          }
          
          if (!intersect) {
            /* Strange error: did not hit cylinder */
            if (line_info.flag_warning < 100) 
              fprintf(stderr, "PowderN: %s: FATAL ERROR: Did not hit sample from inside (coh).\n", NAME_CURRENT_COMP);
            line_info.flag_warning++;
            ABSORB;
          }
          
          if (!intersecti) {
            l1 = (l3 + l0) /2;
            l2 = l1;
          }
          
          if (concentric && intersecti) {
            /* In case of concentricity, 'remove' backward wall of sample */
            l2 = l1;
            l3 = l1;
          }
          
          if(l0 < 0) l0=0; /* already in sample */
          if(l1 < 0) l1=0; /* already in inner hollow */
          if(l2 < 0) l2=0; /* already past inner hollow */
          

          l_1 = l3 - l2 + l1 - l0; /* Length to exit */
          
          pmul  = Nq*l_full*my_s_n*exp(-(my_abs+my_s)*(l+l_1))/(1-(p_inc+p_transmit));
          /* Correction in case of d_phi focusing - BUT only when d_phi != 0 */
          if (d_phi) pmul *= alpha/PI;
        } /* else transmit <-- No powder lines in file */
      }  /* Coherent scattering event */
//      else if (type == 2) {  /* Make incoherent scattering event */
      /*should be replaced by Compton scattering and/or TDS*/
//        if(d_phi) {
//          randvec_target_rect_angular(&vx, &vy, &vz, &solid_angle,
//                                      0, 0, 1,
//                                      2*PI, d_phi*DEG2RAD, ROT_A_CURRENT_COMP);
//        } else {
//          randvec_target_circle(&vx, &vy, &vz,
//                                &solid_angle, 0, 0, 1, 0);
//        }
//        v1 = sqrt(vx*vx+vy*vy+vz*vz);
//        vx *= v/v1;
//        vy *= v/v1;
//        vz *= v/v1;
//        
//        /* Since now scattered and new direction given, calculate path to exit */
//        if (line_info.shape == 1) {
//          intersect  = box_intersect(&l0, &l3, x, y, z, vx, vy, vz, xwidth, yheight, zdepth);
//          intersecti = box_intersect(&l1, &l2, x, y, z, vx, vy, vz, xwidth_i, yheight_i, zdepth_i);
//        } else if (line_info.shape == 0) {
//          intersect  = cylinder_intersect(&l0, &l3, x, y, z, vx, vy, vz, radius, yheight);
//          intersecti = cylinder_intersect(&l1, &l2, x, y, z, vx, vy, vz, radius_i, yheight_i);
//        } else if (line_info.shape == 2) {
//          intersect  = sphere_intersect  (&l0, &l3, x,y,z, vx,vy,vz, radius);
//          intersecti = sphere_intersect  (&l1, &l2, x,y,z, vx,vy,vz, radius_i);
//        } else if (line_info.shape == 3) {
//          intersect  = off_intersect  (&l0, &l3, NULL, NULL, x,y,z, vx,vy,vz, offdata);
//          intersecti = 0;
//        }
//        
//        if (!intersect) {
//          /* Strange error: did not hit cylinder */
//          if (line_info.flag_warning < 100) 
//            fprintf(stderr, "PowderN: %s: FATAL ERROR: Did not hit sample from inside (inc).\n", NAME_CURRENT_COMP);
//          line_info.flag_warning++;
//          ABSORB;
//        }  
//          
//        if (!intersecti) {
//          l1 = (l3 + l0) /2;
//          l2 = l1;
//        }
//          
//        if (concentric && intersecti) {
//          /* In case of concentricity, 'remove' backward wall of sample */
//          l2 = l1;
//          l3 = l1;
//        }
//          
//        if(l0 < 0) l0=0; /* already in sample */
//        if(l1 < 0) l1=0; /* already in inner hollow */
//        if(l2 < 0) l2=0; /* already past inner hollow */
//          
//
//        l_1 = v*(l3 - l2 + l1 - l0); /* Length to exit */
//        
//        pmul = l_full*my_inc*exp(-(my_a_v/v+my_s)*(l+l_1))/(p_inc);
//        pmul *= solid_angle/(4*PI);
//            
//      }  /* Incoherent scattering event */
      else if (type == 1) {
        /* Make transmitted (absorption-corrected) event */
        /* No coordinate changes here, simply change xray weight */
        pmul = exp(-(my_abs+my_s)*(l))/(p_transmit);
      }
      p *= pmul;
    } /* Neutron leaving since it has passed already */
  } /* else transmit non interacting xrays */
  
%}

FINALLY 
%{
  free(line_info.list);
  free(my_q);
  free(my_w);
  free(my_s_k2);
  if (line_info.flag_warning)
    fprintf(stderr, "PowderN: %s: Error message was repeated %i times with absorbed xrays.\n", 
      NAME_CURRENT_COMP, line_info.flag_warning);
    
%}

MCDISPLAY
%{
  if (line_info.V_0) {
    magnify("xyz");
    if (line_info.shape == 0) { /* cyl */
      circle("xz", 0,  yheight/2.0, 0, radius);
      circle("xz", 0, -yheight/2.0, 0, radius);
      line(-radius, -yheight/2.0, 0, -radius, +yheight/2.0, 0);
      line(+radius, -yheight/2.0, 0, +radius, +yheight/2.0, 0);
      line(0, -yheight/2.0, -radius, 0, +yheight/2.0, -radius);
      line(0, -yheight/2.0, +radius, 0, +yheight/2.0, +radius);
      if (thickness) {
        double radius_i=radius-thickness;
        circle("xz", 0,  yheight/2.0, 0, radius_i);
        circle("xz", 0, -yheight/2.0, 0, radius_i);
        line(-radius_i, -yheight/2.0, 0, -radius_i, +yheight/2.0, 0);
        line(+radius_i, -yheight/2.0, 0, +radius_i, +yheight/2.0, 0);
        line(0, -yheight/2.0, -radius_i, 0, +yheight/2.0, -radius_i);
        line(0, -yheight/2.0, +radius_i, 0, +yheight/2.0, +radius_i);
      }
    } else if (line_info.shape == 1) {  /* box */
      double xmin = -0.5*xwidth;
      double xmax =  0.5*xwidth;
      double ymin = -0.5*yheight;
      double ymax =  0.5*yheight;
      double zmin = -0.5*zdepth;
      double zmax =  0.5*zdepth;
      multiline(5, xmin, ymin, zmin,
                   xmax, ymin, zmin,
                   xmax, ymax, zmin,
                   xmin, ymax, zmin,
                   xmin, ymin, zmin);
      multiline(5, xmin, ymin, zmax,
                   xmax, ymin, zmax,
                   xmax, ymax, zmax,
                   xmin, ymax, zmax,
                   xmin, ymin, zmax);
      line(xmin, ymin, zmin, xmin, ymin, zmax);
      line(xmax, ymin, zmin, xmax, ymin, zmax);
      line(xmin, ymax, zmin, xmin, ymax, zmax);
      line(xmax, ymax, zmin, xmax, ymax, zmax);
      if (zdepth_i) {
        xmin = -0.5*xwidth_i;
        xmax =  0.5*xwidth_i;
        ymin = -0.5*yheight_i;
        ymax =  0.5*yheight_i;
        zmin = -0.5*zdepth_i;
        zmax =  0.5*zdepth_i;
        multiline(5, xmin, ymin, zmin,
                  xmax, ymin, zmin,
                  xmax, ymax, zmin,
                  xmin, ymax, zmin,
                  xmin, ymin, zmin);
        multiline(5, xmin, ymin, zmax,
                  xmax, ymin, zmax,
                  xmax, ymax, zmax,
                  xmin, ymax, zmax,
                  xmin, ymin, zmax);
        line(xmin, ymin, zmin, xmin, ymin, zmax);
        line(xmax, ymin, zmin, xmax, ymin, zmax);
        line(xmin, ymax, zmin, xmin, ymax, zmax);
        line(xmax, ymax, zmin, xmax, ymax, zmax);
      }
    } if (line_info.shape == 2) { /* sphere */
      if (radius_i) {
        circle("xy",0,0,0,radius_i);
        circle("xz",0,0,0,radius_i);
        circle("yz",0,0,0,radius_i);
      }
      circle("xy",0,0,0,radius);
      circle("xz",0,0,0,radius);
      circle("yz",0,0,0,radius);
    } else if (line_info.shape == 3) {	/* OFF file */
      off_display(offdata);
    }
  }
%}
END
