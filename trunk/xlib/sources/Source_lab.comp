/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Source_lab
*
* %I
*
* Written by: Erik Knudsen 
* Date: Octatober 2010
* Version: 1.0
* Release: McXtrace 1.0
* Origin: Risoe
*
* Laboratory X-ray Source.
*
* %D
* Model of a laboratory X-ray tube, Generating X-rays by bombarding a target by electrons.
* Given a input energy E0 of the electron beam, x-rays are emitted from the accesible emission lines
* The geometry of the tube is assumed to be:
*  The electron beam hits a slab of surface material surface at a at a right angle illuminating an area of x0 by z0.
*  A window is situated at the origin of the component, which is at an angle take_off wrt. the surface plane. 
*  The origin of the component is the centre of the exit window with the beam direction (Z) perpendicular to it
* The Bremsstrahlung emitted is modelled using the model of Kramer (1923) as restated in International
* Tables of Crystallography C 4.1
* Characteristic radiation is modelled by Gaussian energy profiles with line-energies from Bearden (1967), widths from
* Krause (1979) and intensity is taken from Honkim√§ki (1990) and x-ray data booklet.
* Currently absorption in the target is not taken into account.   
* 
*
* %P
* Input parameters:
* mu - absorption coefficient
* x0 [m] width of impinging electron beam
* z0 [m] height of impinging electron beam
* take_off [deg] Take off angle of beam centre
* dist [m] Distance between centre of illuminated target and exit window
* E0 [kV] Acceleration voltage of xray tube
* tube_current [A] Electron beam current
* Emax: [keV] Maximum energy to sample. Default (Emax=0) is to set it to E0.
* Emin: [keV] Minimum energy to sample.
* xwidth: [m] Width of exit window
* yheight: [m] Height of exit window
* frac: [] Fraction of statistic to use for Bremsstrahlung
* material_datafile: [] name of datafiel which describes the target material    
*
* %E
*******************************************************************************/

DEFINE COMPONENT Source_lab
DEFINITION PARAMETERS ()
SETTING PARAMETERS (x0=1e-3,z0=1e-3,E0=20,Emax=0,Emin=1,xwidth=5e-3,yheight=5e-3,
      take_off=6,dist=1,tube_current=1e-3, string material_datafile="Cu.txt", frac=0.5)
OUTPUT PARAMETERS (R_xray_gen,R_xray_geni, O_xray_gen, prms)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{
  %include "read_table-lib"
    
  /*here are some material data- currently only for Cu, Mo and W*/
  const struct xray_em_data{
    int Z;/*atom number*/
    double Ek;/*ionazation energy*/
    double w_k;/*flourescence yield*/
    int linec;
    double e[2];/*line energy*/
    double w[2];/*natural width of line*/
    double i[2];/*relative intensity*/
  } xray_mat_data[]={
    {29,8.979 ,0.407,2,{8.02783,8.04778},{2.11e-3,2.17e-3},{0.51,1.0}},
    {42,20.00 ,0.770,2,{17.3743,17.47934},{6.31e-3,6.49e-3},{0.52,1.0}},
    {74,69.525,0.945,2,{57.9817,59.31824},{44.9e-3,45.2e-3},{0.58,1.0}},
    {NULL}
  };

%}

DECLARE
%{
  Rotation R_xray_gen,R_xray_geni;
  Coords O_xray_gen;
  const double BKRAMER=2e-6; /*photons /keV /electron*/
  struct {
    int Z;
    double At,rho;
    t_Table T;
    struct xray_em_data *em_p;
    double Icont,Ichar;
  } prms; 
  double p_continous;
  double mu=0.2;
  double pmul;
%}

INITIALIZE
%{
  int status,ii;
  if (E0<=0){
    fprintf(stderr,"Error %s: Impinging electron energy (E0) must be >0, was %g\n",NAME_CURRENT_COMP, E0);
    exit(-1);
  }

  if (!Emax){/*if Emax is not set use the impinging electron energy*/
    Emax=E0;
  }
  if(Emin<=0){
    fprintf(stderr,"Error (%s): Emin must be > 0 (%g)\n",NAME_CURRENT_COMP,Emin);exit(-1);
  }
  if(Emax<Emin){
    fprintf(stderr,"Error (%s): Nonsensical emission energy interval [Emin,Emax]=[%g %g] at E0=%g\n",NAME_CURRENT_COMP,Emin,Emax,E0);
    exit(-1);
  }
 
  if ( (status=Table_Read(&(prms.T),material_datafile,0))==-1){
    fprintf(stderr,"Error %s: Could not parse file \"%s\"\n",NAME_CURRENT_COMP,material_datafile);
    exit(-1);
  }
  char **header_parsed;
  header_parsed=Table_ParseHeader(prms.T.header,"Z","A[r]","rho","Z/A","sigma[a]",NULL);
  if(header_parsed[2]){prms.rho=strtod(header_parsed[2],NULL);}
  if(header_parsed[0]){prms.Z=strtod(header_parsed[0],NULL);}
  if(header_parsed[1]){prms.At=strtod(header_parsed[1],NULL);}
  /*use the atom number to get at the right data structure*/  
  prms.em_p=&(xray_mat_data[0]);
  while (prms.Z!=prms.em_p->Z){
    prms.em_p++;
    if ((prms.em_p)==NULL){
      fprintf("Error: %s (Z=%d) anode not implemented yet. Aborting\n",material_datafile,prms.Z);
      exit(-1);
    }
  }
  
  /*Integrate the continuous spectrum and the characteristic so as to get the relative intenisities right*/
  prms.Icont=tube_current/CELE*BKRAMER*prms.Z*(E0*log(Emax)-E0*log(Emin) - Emax + Emin);
  /*check if E0 >Ek. If not, no characteristic emission can take place*/
  if (E0>prms.em_p->Ek){
    double Bk=1.2e-5*pow(prms.em_p->Ek,1.67)*exp(-0.077*prms.Z);
    prms.Ichar=tube_current/CELE*4*M_PI*(E0/prms.em_p->Ek-1)*Bk;
    double Ichar_tot=0;
    for (ii=0;ii<prms.em_p->linec;ii++){
      if(Emax>prms.em_p->e[ii]+5*prms.em_p->w[ii] && Emin<prms.em_p->e[ii]-5*prms.em_p->w[ii]){
        Ichar_tot+=prms.em_p->i[ii];
      }else{
        Ichar_tot+=prms.em_p->i[ii]*0.5*( erf(M_SQRT1_2*(Emax-prms.em_p->e[ii])/prms.em_p->w[ii]) - erf(M_SQRT1_2*(Emin-prms.em_p->e[ii])/prms.em_p->w[ii]) );
      }
    } 
    //printf("Bk,Ico,Ich,Icht,p_c=%g %g %g %g\n",Bk,prms.Icont,prms.Ichar,Ichar_tot,p_continous);
    p_continous=prms.Icont/(Ichar_tot+prms.Icont);
  }else{
    /*characteristic K-emission is not possible*/
    p_continous=prms.Icont;
    frac=1;
  }
  O_xray_gen=coords_set(0,0,-dist);
  rot_set_rotation(R_xray_gen,-take_off*DEG2RAD,0,0);
  rot_set_rotation(R_xray_geni,take_off*DEG2RAD,0,0);
  printf("O_xray_gen=%g %g %g\n",O_xray_gen.x,O_xray_gen.y,O_xray_gen.z);
%}

TRACE
%{
  double x1,y1,z1,x2,y2,z2,r,e,k,pdir;

  /* pick a point in the generating volume*/
  x1=rand01()*x0-x0/2.0;
  z1=rand01()*z0-z0/2.0;
  /* y is the absorption depth of the electron getting converted to an xray*/
  y1=log(rand01())*mu;

  double px,py,pz; 
  /* transform initial coords to ones relative to the exit window which is our reference point*/
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);

  /*set a scatter pt at the generation pt*/
  x=x1;y=y1;z=z1;
  SCATTER;

  /*randvec_target_rect_real computes a target point and a solid angle correction factor, hence the k-vector has to be computed from
    generation point and target point. The (0,0,1) location of the target is due to a silent assumption in randvec() that
    the target cannot be situated in the origin.*/
  randvec_target_rect_real(&px,&py,&pz,&pdir,0,0,1,xwidth,yheight, R_xray_gen,x1,y1,z1,2);
  /*k is parallell to the line between generation and target points*/
  kx=px-x1;
  ky=py-y1;
  kz=-z1;

  /*Now for wavelength selection*/
  r=rand01();
  //printf("brems %g %g\n",r,p_continous);
  if(r<frac){
    //printf("brems %g \n",r);
    /*bremsstrahlung*/
    double e=rand01()*(Emax-Emin)+Emin;
    k=e*E2K;
    pmul=tube_current/CELE*BKRAMER*prms.Z*(E0/e-1);
    /*correct for not having the full E-window*/
    pmul*=(Emax-Emin)/E0;
    /*correct for monte-carlo statistics*/
    pmul*=p_continous/frac;
  }else{
    struct xray_em_data *pt=prms.em_p;
    /*characteristic radiation*/
    /*first pick a possible line*/
    r=rand01()*pt->linec;
    int lineno=(int)floor(r);
    if (lineno==pt->linec) {
      lineno--;/*we might get overflow*/
    }
    pmul=pt->i[lineno]*prms.Ichar;
    k=E2K*(randnorm()*pt->w[lineno]+pt->e[lineno]);

    //printf("l# %d li %g le %g lw %g Na=%g\n",lineno,pt->i[lineno],pt->e[lineno],pt->w[lineno],Ichar);/*see honkimaeki1990*/
    /*correct for not having the full E-window if so*/

  }

  /*scale k accordingly*/
  NORM(kx,ky,kz);
  kx*=k;ky*=k;kz*=k;
  
  /*set the x-ray weight to whatever we computed just before and correct for only sampling the exit window*/
  p=pmul*pdir;
    
  /*remember to correct for absorption*/
  
  /*set a random phase - and propagate to the exit window*/
  phi=0;//rand01()*2*M_PI;
  PROP_Z0;
  SCATTER;
%}

MCDISPLAY
%{
  magnify("xy");
  double x1,y1,z1,x2,y2,z2,x0_2,z0_2;
  x0_2=x0/2.0;
  z0_2=z0/2.0;
  x1=-x0_2;y1=0;z1=-z0_2;
  x2=-x0_2;y2=0;z2= z0_2;
  printf("%g %g %g\n",x1,y1,z1);
  printf("%g %g %g\n",x2,y2,z2);
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  printf("%g %g %g\n",x1,y1,z1);
  printf("%g %g %g %g \n",x2,y2,z2,mu);
  line(x1,y1,z1,x2,y2,z2);

  x1=x0_2;y1=0;z1=z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x2,y2,z2,x1,y1,z1);
  
  x2=x0_2;y2=0;z2=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x1,y1,z1,x2,y2,z2);

  x1=-x0_2;y1=0;z1=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x2,y2,z2,x1,y1,z1);

  /*this is the mean penetration depth of electron that get converted to x-rays*/  
  x1=-x0_2;y1=-mu;z1=-z0_2;
  x2=-x0_2;y2=-mu;z2= z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x1,y1,z1,x2,y2,z2,5);
  x1=x0_2;y1=-mu;z1=z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x2,y2,z2,x1,y1,z1,5);
  x2= x0_2;y2=-mu;z2=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x1,y1,z1,x2,y2,z2,5);
  x1=-x0_2;y1=-mu;z1=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x2,y2,z2,x1,y1,z1,5);
  /* add another set of lines line at 2 mean penetration depth*/
  x1=-x0_2;y1=-2*mu;z1=-z0_2;
  x2=-x0_2;y2=-2*mu;z2= z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x1,y1,z1,x2,y2,z2,5);
  x1=x0_2;y1=-2*mu;z1=z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x2,y2,z2,x1,y1,z1,5);
  x2= x0_2;y2=-2*mu;z2=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x1,y1,z1,x2,y2,z2,5);
  x1=-x0_2;y1=-2*mu;z1=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  dashed_line(x2,y2,z2,x1,y1,z1,5);

  x1=-x0_2;y1=-2*mu;z1=-z0_2;
  x2=-x0_2;y2=0;z2=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x2,y2,z2,x1,y1,z1);
  x1=x0_2;y1=-2*mu;z1=-z0_2;
  x2=x0_2;y2=0;z2=-z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x2,y2,z2,x1,y1,z1);
  x1=-x0_2;y1=-2*mu;z1=z0_2;
  x2=-x0_2;y2=0;z2=z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x2,y2,z2,x1,y1,z1);
  x1=x0_2;y1=-2*mu;z1=z0_2;
  x2=x0_2;y2=0;z2=z0_2;
  mccoordschange(O_xray_gen,R_xray_gen,&x1,&y1,&z1,NULL,NULL,NULL,NULL,NULL,NULL);
  mccoordschange(O_xray_gen,R_xray_gen,&x2,&y2,&z2,NULL,NULL,NULL,NULL,NULL,NULL);
  line(x2,y2,z2,x1,y1,z1);


  /*now draw "exit" window*/
  rectangle("xy",0,0,0,xwidth,yheight);
%}

END
