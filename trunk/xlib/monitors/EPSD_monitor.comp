/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright (C), All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor
*
* %I
* Written by: Erik Knudsen
* Date: June 22, 2009
* Version: $Revision: $
* Origin: Risoe
* Release: McXtrace 0.1
*
* Position-sensitive monitor.
*
* %D
* Based on neutron component written by Kim Lefmann
* An n times m pixel PSD monitor, which only counts photons with energy in an interval
* given by Emin and Emax. The default energy interval is (almost) infinite. 
* This component may also be used as a beam
* detector.
*
* Example: EPSD_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, ny=90, filename="Output.psd")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* Emin:     Lower bound of energy interval (keV)
* Emax:     Upper bound of energy interval (keV)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* filename: Name of file in which to store the detector image (text)
* restore_xray: If set, the monitor does not influence the xray state (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of xray counts
* PSD_p:    Array of xray weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT EPSD_monitor
DEFINITION PARAMETERS (nx=90, ny=90, string filename=0, restore_xray=0)
SETTING PARAMETERS (xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, Emax=0, Emin=-1)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

DECLARE
  %{
    double PSD_N[nx][ny];
    double PSD_p[nx][ny];
    double PSD_p2[nx][ny];
  %}
INITIALIZE
  %{
    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            fprintf(stderr,"EPSD_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }
    if (Emax<Emin){
      fprintf(stderr,"EPSD_monitor: %s: Unmeaningful energy interval\n Aborting",NAME_CURRENT_COMP);
      exit(0);
    }
    if (Emax==0){
      Emax=FLT_MAX;
    }
    for (i=0; i<nx; i++){
      memset(PSD_N[i],0,sizeof(double)*ny);
      memset(PSD_p[i],0,sizeof(double)*ny);
      memset(PSD_p2[i],0,sizeof(double)*ny);
    }
  %}
TRACE
  %{
    int i,j;
    double e;

    PROP_Z0;
    e=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz))*K2E;
    if (x>xmin && x<xmax && y>ymin && y<ymax && e<Emax && e>Emin )
    {
      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));
      PSD_N[i][j]++;
      PSD_p[i][j] += p;
      PSD_p2[i][j] += p*p;
      SCATTER;
    }
    if (restore_xray) {
      RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }
  %}
SAVE
  %{
    DETECTOR_OUT_2D(
        "PSD monitor",
        "X position [m]",
        "Y position [m]",
        xmin xmax, ymin, ymax,
        nx, ny,
        &PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
