#!/bin/sh
#
# Simple script for setting up a mcstas distribution package.
#
# To be called with one input parameter - distribution tail filename, e.g.
#
# ./mkdist 1.7.3c -> ../mcstas-1.7.3c.tar.gz
#
# Assumes you have write access to ..
#
# PW, risoe, 20030123
#
#   This file is part of the McStas neutron ray-trace simulation package
#   Copyright (C) 1997-2006, All rights reserved
#   Risoe National Laborartory, Roskilde, Denmark
#   Institut Laue Langevin, Grenoble, France
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; version 2 of the License.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


# Create temporary workdir:
PW=`pwd`
TMPDIR=$PWD/..
DIST=$TMPDIR/mcstas-$1

if [ "y$2" = "ymcxtrace" ]; then
  CONFIGURE_IN=xconfigure.in
  MCCODE=mcxtrace
else
  CONFIGURE_IN=nconfigure.in
  MCCODE=mcstas
fi

# Copy current PW checkout to DIST
cp -rp $PW $DIST

# Create the doc's from tex - if a checkout is avail.
if [ -d $PW/../tex ] ;
then
  cd $PW/../tex
  ./build $1
  
  # copy the doc in DIST/lib/doc. Only use PDF files in distro.
  mv mcstas-$1-manual.pdf $DIST/lib/doc/mcstas-manual.pdf
  mv mcstas-$1-components.pdf $DIST/lib/doc/mcstas-components.pdf
fi

# Go in DIST, clean up CVS information
cd $DIST
echo "Clean up SVN info"
find . -name .svn -exec rm -rf \{\} \; 2> /dev/null
echo done...
# Remove other unneeded stuff
rm -rf support/Syntax-Highlight-Perl-1.0
rm -rf preCVStest*
# Make sure that all comps and instrs have unix linefeeds
echo "Apply dos2unix"
find . -name \*.comp  -exec dos2unix \{\} \;
find . -name \*.instr -exec dos2unix \{\} \;

# Put in new version info:
echo "Set version $1 and date"
find . -wholename './setversion' -prune -o -type d -prune -o -path ./src/McStasTest -exec ./setversion \{\} $1 \;
find . -wholename './setyear'    -prune -o -type d -prune -o -path ./src/McStasTest -exec ./setyear \{\} \;

sed 's/MCSTAS_VERSION/'$1'/' build.bat > build.bat.new
mv build.bat.new build.bat

cd support
sed 's/MCSTAS_VERSION/'$1'/' Win32/install/mcstas.nsi > Win32/install/mcstas.nsi.new
mv Win32/install/mcstas.nsi.new Win32/install/mcstas.nsi
sed 's/MCSTAS_VERSION/'$1'/' deb/control > deb/control.new
mv deb/control.new deb/control
cd ..

#sed 's/MCSTAS_VERSION/'$1'/' configure.in > configure.in.new
#mv configure.in.new configure.in

# Create the doc's from tex - if a checkout is avail.
if [ -d $PW/../tex ] ;
then
  # Create ps/pdf/html based install info
  cd doc/install_docs/tex
  latex install
  latex install
  whichdvipdf=`which dvipdf`
  if [ -e "$whichdvipdf" ] ;
  then
      echo "Generate install PDF files using dvipdf (better quality than ps2pdf)"
      dvipdf install.dvi install.pdf
  else
      echo "Generate install PDF files using ps2pdf"
      dvips -o install.ps install.dvi
      ps2pdf install.ps install.pdf
  # gzip install.ps
      rm *.ps *.ps.gz
  fi
  
  mkdir ../html
  latex2html -local_icons -dir ../html install.tex
  # clean up
  rm install.aux
  rm install.log
  cd $PW/doc/tutorial
  # Update the tutorial files
  ./update
  rm update
fi  
cd $DIST

# A bit ugly with seperate date commands..
MONTH=`date +"%b"`
DAY=`date +"%d"`
YEAR=`date +"%Y"`

cd src
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcstas.h > mcstas.h.tmp
mv mcstas.h.tmp  mcstas.h
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcformat.c > mcformat.c.tmp
mv mcformat.c.tmp  mcformat.c
cd ../doc/man
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcstas.1 > mcstas.1.tmp
mv mcstas.1.tmp  mcstas.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcrun.1 > mcrun.1.tmp
mv mcrun.1.tmp   mcrun.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcdoc.1  > mcdoc.1.tmp
mv mcdoc.1.tmp  mcdoc.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcgui.1  > mcgui.1.tmp
mv mcgui.1.tmp  mcgui.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcplot.1 > mcplot.1.tmp
mv mcplot.1.tmp  mcplot.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcdisplay.1 > mcdisplay.1.tmp
mv mcdisplay.1.tmp  mcdisplay.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcconvert.1 > mcconvert.1.tmp
mv mcconvert.1.tmp  mcconvert.1
sed 's/X.Y.Z, Month Day, Year/'$1' - '$MONTH'. '$DAY', '$YEAR'/' mcformat.1 > mcformat.1.tmp
mv mcformat.1.tmp  mcformat.1
cd ../../support
sed 's/@RELEASE@/'$1'/' deb/debcreate > deb/debcreate.new
mv deb/debcreate.new deb/debcreate
chmod a+x deb/debcreate
cd ..

# Create configure
autoconf -o ${CONFIGURE_IN%%.in} $CONFIGURE_IN
#chmod a+x configure
autoconf -o lib/tools/perl/mcstas_reconfigure lib/tools/perl/mcstas_reconfigure.in 
#chmod a+x lib/tools/perl/mcstas_reconfigure

# run lex, yacc (assuming linux - flex -i & bison -v -d)
cd src
flex -i instrument.l
bison -v -d instrument.y
cd ..

# Set the INSTALL environment variable to make the src archive
# default to ./install-sh in the contributed Makefile.
# Note: the -c is needed to preserve mcdoc.fixpl which is run at make install
export INSTALL="./install-sh -c"

# Also, do a ./configure to create Makefile and mcstas_config.perl
# These will be dependent on this system, ofcourse...
./configure
# Select scilab as default plotter
make pgplot

# Clean up
rm TODO.txt
rm mkdist
rm setversion
rm setyear
rm header
# Make new runs of configure not dependent of this system...
rm config.*
cd ..

# Create tar archive
tar cfz $PW/../$MCCODE-$1-src.tar.gz $MCCODE-$1

# Do a 'make' for creation of binary version (should apply to 'any' Unix)
cd $PW
cd $DIST

# Default again to Linux' /usr/bin/install -c (or whatever ./configure finds)
export INSTALL=
./configure
# Select pgplot as default plotter
make pgplot

make
UNAME=`uname`
MACH=`uname -m`
# Up to now, this is always done on intel...
PROC=Intel
cd ..

# Create tar archive
tar cfz $PW/../$MCCODE-$1-$MACH-$PROC-$UNAME.tar.gz $MCCODE-$1

# Remove temporary dir
# rm -rf $TMPDIR

# Create .tar.gz archive for building a binary Windows version
cd $PW
cd $DIST
make clean
cd src
flex -i instrument.l
bison -v -d instrument.y
cd ..
./configure
sed 's/DOZIP="0"/DOZIP="1"/' build.bat > build.bat.new
sed 's/DONSIS="0"/DONSIS="1"/' build.bat.new > build.bat
cp support/Win32/install/which.exe .
cd ..
tar cfz $PW/../$MCCODE-$1-Win32-src.tar.gz $MCCODE-$1
if [ `which makensis` ]; then
    cd -
    ./configure
    # Make sure we default to PGPLOT plotter
    make pgplot
    make mcstas.win32
    cp mcstas.ini ..
    cp mcstas.nsi ..
    cp mcstas.bmp ..
    cp LICENSE.rtf ..
    cd ..
    zip -r mcstas-$1-i686-Intel-Win32.zip mcstas-$1
    cp winsupport/* .
    makensis mcstas.nsi
    echo Created Win32 binary packages: `ls *zip *exe`
else
    echo Binary versions for Win32 NOT created
fi
echo
echo
echo Your mcstas dist packages are placed in
echo ../$MCCODE-$1-src.tar.gz
echo ../$MCCODE-$1-$MACH-$PROC-$UNAME.tar.gz
echo ../$MCCODE-$1-Win32-src.tar.gz
echo
echo NOTE: Win32 version must be built using \'build.bat\' of the Win32-src package
echo
echo Your mcstas doc packages are placed in
echo ../$MCCODE-$1-manual.ps.gz
echo ../$MCCODE-$1-manual.pdf
echo ../$MCCODE-$1-components.ps.gz
echo ../$MCCODE-$1-components.pdf
echo
echo WARNING: Please install to a test system and run the following tools
echo before release:
echo
echo compiletest.sh \(check if all examples compile\)
echo mcrun --test \(validation test of selected instruments\)
echo
echo Follow instructions in ../adm to publish on the web.
echo

echo Build packages from `pwd`
# In case of mkfs.hfsplus available in /sbin we'll create the
# DMG file for Mac OS X
if [ -e /sbin/mkfs.hfsplus ]
then
    # Note: DMG file needs enough space to hold the support tools plus
    # our own code. April 2008 this is about 120 megs...
    dd if=/dev/zero of=./McStas-$1.dmg bs=1M count=130
    /sbin/mkfs.hfsplus -v 'McStas' ./McStas-$1.dmg
    # Likely needs root level access:
    sudo mkdir /mnt/dmg
    sudo mount -t hfsplus -o loop ./McStas-$1.dmg /mnt/dmg
    # Copy the ./adm/OSX/DMG stuff to the mountpoint
    sudo cp -rp ./adm/OSX/DMG/Applications /mnt/dmg
    sudo cp ./adm/OSX/DMG/README.TXT /mnt/dmg
    # Clear out CVS stuff
    sudo find /mnt/dmg -type d -name CVS -exec rm -rf \{\} \;
    # Copy McStas there
    sudo cp ./mcstas-$1-src.tar.gz /mnt/dmg/Applications
    # Unmount
    sudo umount /mnt/dmg
    sudo rm -rf /mnt/dmg
    ls -l ./McStas-$1.dmg
fi


# In case of a debian build host, we also build an .deb
# (.rpm was tried using alien - did not work too well)
if [ -e /etc/debian_version ]
then
  if [ -e etch-chroot ]
  then
    echo Proceeding to .deb build
    # First, clean up in case of previous McStas installs in the chrooot
    sudo mkdir -p etch-chroot/build
    sudo rm -f etch-chroot/usr/local/bin/*
    sudo rm -rf etch-chroot/usr/local/lib/*
    sudo rm -rf etch-chroot/usr/local/pgplot
    sudo cp mcstas-$1/deb/debcreate etch-chroot/root
    sudo cp mcstas-$1-src.tar.gz etch-chroot/root
    sudo chroot etch-chroot /root/debcreate
    echo
    echo
    echo Build packages created:
    echo
    cp etch-chroot/build/*deb .
    ls -lf mcstas-$1*.* McStas-$1*.*
    echo
  else
    echo You need a chroot environment based on debootstrap in etch-chroot before building deb packages
  fi
fi
