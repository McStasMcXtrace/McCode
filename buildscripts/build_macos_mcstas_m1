#!/bin/bash
export CMAKE_BUILD_PARALLEL_LEVEL=${CMAKE_BUILD_PARALLEL_LEVEL:-$(python3 -c "import os;print(os.cpu_count())")}

if [ "x$1" = "x" ]; then
    # No arguments
    echo Please provide one argument,e.g : $0 2.0
    exit 1;
fi

# Ensure our 3rd party modules are in place and updated
THIRDPARTY=`ls 3rdparty | grep -v patches`
cd 3rdparty

cd -

./3rdparty/sync.sh


for MODULE in `echo $THIRDPARTY`
do
    if [ -d "3rdparty/patches/${MODULE}" ]; then
	echo Making McCode cmake modules available for $MODULE
        rsync -avz cmake/ 3rdparty/${MODULE}/cmake
	echo Applying McCode patches to 3rdparty/${MODULE}
	cp -rp 3rdparty/patches/${MODULE}/* 3rdparty/${MODULE}/
    fi
done

# This is an app bundle being built, but non-relocatable.
export MCINSTALL_PREFIX=/Applications/McStas-$1.app/
./mkdist mcstas-app $1 support/MacOSX/McCode.app/ "" mac-silicon "" -- OSXapp
# hack to ensure the silicon app is opened arch -arm64
sed -i.bak s+/bin/bash+/usr/bin/arch\ -arm64\ /bin/bash+ $MCINSTALL_PREFIX/Contents/MacOS/mccodegui

# For the actual mcstas part, the packages need a 'deep' PREFIX
export MCINSTALL_PREFIX=/Applications/McStas-$1.app/Contents/Resources/
# 64-bit Mac OS
./mkdist mcstas $1 "" "" mac-silicon "" -- OSXapp
./mkdist mcstas-comps $1 "" "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-perl $1 tools/Legacy-Perl/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-perl-cmdline $1 tools/Legacy-Perl-cmdline/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-matlab-mcplot $1 tools/matlab/mcplot/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-matlab-mcdisplay $1 tools/matlab/mcdisplay/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcplot-pyqtgraph $1 tools/Python/mcplot/pyqtgraph/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcplot-matplotlib $1 tools/Python/mcplot/matplotlib/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcplot-svg $1 tools/Python/mcplot/svg/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcrun $1 tools/Python/mcrun/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcresplot $1 tools/Python/mcresplot/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcgui $1 tools/Python/mcgui/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mccodelib $1 tools/Python/mccodelib/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcdisplay-webgl $1 tools/Python/mcdisplay/webgl/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcdisplay-pyqtgraph $1 tools/Python/mcdisplay/pyqtgraph/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcdisplay-matplotlib $1 tools/Python/mcdisplay/matplotlib/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcdisplay-mantid $1 tools/Python/mcdisplay/mantid_xml/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-tools-python-mcdoc $1 tools/Python/mcdoc/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-clusterscripts $1 tools/cluster-scripts/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-manuals $1 docpkg/manuals/mcstas/ "" mac-silicon "" -- OSXapp
./mkdist mcstas-mcpl $1 3rdparty/mcpl-package "" mac-silicon "" -- OSXapp
./mkdist mcstas-ncrystal $1 3rdparty/ncrystal-package "" mac-silicon "" -- OSXapp


# Hack to ensure pymcpltool is in place
ln -sf /Applications/McStas-$1.app/Contents/Resources/mcstas/$1/libs/mcpl/pymcpltool /Applications/McStas-$1.app/Contents/Resources/mcstas/$1/bin

if [ ! -f Miniconda3-latest-MacOSX-arm64.sh ]; then
    # Download and embed a miniconda
    echo
    echo "*********************************************************"
    echo "* Downloading a miniconda3 for your app                 *"
    echo "*********************************************************"
    echo
    sleep 3
    curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh
fi
echo "*********************************************************"
echo "* Embedding miniconda3 in your app                      *"
echo "*********************************************************"
chmod a+x Miniconda3-latest-MacOSX-arm64.sh
./Miniconda3-latest-MacOSX-arm64.sh -b -p $MCINSTALL_PREFIX/mcstas/$1/miniconda3/

# Run conda to install the dependencies
echo
echo "*********************************************************"
echo "* Downloading python dependencies to embedded miniconda *"
echo "*********************************************************"
echo
export PATHBAK=$PATH
export PATH=$MCINSTALL_PREFIX/mcstas/$1/miniconda3/bin:$PATH

conda update conda -y
conda install mamba conda-build -y
mamba install openmpi gsl pyaml ply matplotlib numpy tornado scipy pillow pyqtgraph pyqt nomkl -y
mamba clean --all -y
cd $TMPDIR
git clone https://github.com/conda-forge/qscintilla2-feedstock.git
cd qscintilla2-feedstock
conda-build .
mamba install qscintilla2 --use-local -y
mamba clean --all -y
mamba build purge
cd $WORK

export PATH=$PATHBAK
# Copy in the mpicc snippets
cp support/MacOSX/mpicc-wrappers/* $MCINSTALL_PREFIX/mcstas/$1/bin

export MCINSTALL_PREFIX=/Applications/McStas-$1.app/Contents/Resources/

cd $WORK
# Generate mcdoc pages
$MCINSTALL_PREFIX/mcstas/$1/miniconda3/bin/python $MCINSTALL_PREFIX/mcstas/$1/tools/Python/mcdoc/mcdoc.py -i

# Hack to make openmpi from the conda env available on Big Sur and later
ln -s $MCINSTALL_PREFIX/mcstas/$1/miniconda3/bin/mpi* $MCINSTALL_PREFIX/mcstas/$1/bin/

mkdir -p dist
# Move the App bundle back to the dist - or keep it in /Applications?
if [ "x$2" = "x" ]; then
    mv /Applications/McStas-$1.app dist
    ln -s /Applications dist/
    cd dist
    ln -s McStas-$1.app/Contents/Resources/mcstas/$1/environment McStas-$1-environment.command
    cd ..
    cp support/MacOSX/Check-dependencies/* dist
    mv dist mcstas-$1
    mkdir dist
    tar cfz dist/mcstas-$1_arm64.tgz mcstas-$1
    cp INSTALL-McStas-3.x/macOS/README.md dist
    echo A tgz of your app is now located in the dist folder
    rm -rf mcstas-$1
else
    ln -s /Applications/McStas-$1.app dist/
    echo Your app is now located in /Applications \(link available in the dist folder\)
fi



