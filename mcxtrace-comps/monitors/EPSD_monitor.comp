/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright (C), All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor
*
* %I
* Written by: Erik Knudsen
* Date: June 22, 2009
* Version: $Revision$
* Origin: Risoe
*
* Position-sensitive monitor.
*
* %D
* Based on neutron component written by Kim Lefmann
* An nx times ny pixel PSD monitor, which only counts photons with energy in an interval
* given by Emin and Emax in nE energy bins. The default energy interval is (almost) infinite, with a single bin.
* If nE>1 the component will output nE detector files + one which is integrated over the full energy interval.
*
* Example: EPSD_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, ny=90, filename="Output.psd")
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]             Lower x bound of detector opening
* xmax: [m]             Upper x bound of detector opening
* ymin: [m]             Lower y bound of detector opening
* ymax: [m]             Upper y bound of detector opening
* Emin: [keV]           Lower bound of energy interval
* Emax: [keV]           Upper bound of energy interval
* xwidth: [m]           Width of detector. Overrides xmin,xmax.
* yheight: [m]          Height of detector. Overrides ymin,ymax.
* nx: [m]               Number of pixel columns
* ny: [m]               Number of pixel rows
* nE: [m]               Number of energy bins
* filename: [1]         Name of file in which to store the detector image.
* restore_xray: [1]     If set, the monitor does not influence the xray state.
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of xray counts
* PSD_p:    Array of xray weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT EPSD_monitor
DEFINITION PARAMETERS (nx=90, ny=90, string filename=0, restore_xray=0)
  SETTING PARAMETERS (xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, Emax=0, Emin=0, nE=1 , int nowritefile=0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2, PSD_N_s, PSD_p_s, PSD_p2_s)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

DECLARE
%{
    double **PSD_N;
    double **PSD_p;
    double **PSD_p2;
    
    double PSD_N_s[nx][ny];
    double PSD_p_s[nx][ny];
    double PSD_p2_s[nx][ny];
%}

INITIALIZE
%{
    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
      fprintf(stderr,"ERROR (%s): Null detection area! Aborting.\n",NAME_CURRENT_COMP);
      exit(-1);
    }
    if (Emax<=Emin){
      fprintf(stderr,"ERROR (%s): Unmeaningful energy interval E:[%g,%g]\n Aborting",NAME_CURRENT_COMP,Emin,Emax);
      exit(-1);
    }
    if (Emax==0){
      Emax=FLT_MAX;
    }

    if (nE>1){
        /*allocate memory for the data*/
        if( (PSD_N=calloc(nE, sizeof(*PSD_N)))==NULL ||
                (PSD_p=calloc(nE, sizeof(*PSD_p)))==NULL ||
                (PSD_p2=calloc(nE, sizeof(*PSD_p2)))==NULL ){
            fprintf(stderr,"Error(%s): Memory allocation error for energy bins.\n",NAME_CURRENT_COMP);
            exit(-1);
        }
        for (i=0;i<nE;i++){
            int status=0;

            if( (PSD_N[i]=calloc(nx*ny, sizeof(**PSD_N)))==NULL ||
                    (PSD_p[i]=calloc(nx*ny, sizeof(**PSD_p)))==NULL || 
                    (PSD_p2[i]=calloc(nx*ny, sizeof(**PSD_p2)))==NULL ){
                fprintf(stderr,"Error(%s): Memory allocation error.\n",NAME_CURRENT_COMP);exit(-1);
            }
        }
    }
%}

TRACE
%{
    int i,j,k;
    double e;

    PROP_Z0;
    e=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz))*K2E;
    if (x>xmin && x<xmax && y>ymin && y<ymax && e<Emax && e>Emin )
    {
      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));
      k = floor((e-Emin)*nE/(Emax-Emin));

      if (nE>1){
          PSD_N[k][i*ny+j]++;
          PSD_p[k][i*ny+j] += p;
          PSD_p2[k][i*ny+j] += p*p;
      }
      PSD_N_s[i][j]++;
      PSD_p_s[i][j]+=p;
      PSD_p2_s[i][j]+=p*p;

      SCATTER;
    }
    if (restore_xray) {
      RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }
%}

SAVE
%{
    if(!nowritefile){
      if (nE<=1){
          DETECTOR_OUT_2D(
                  "PSD monitor",
                  "X position [m]",
                  "Y position [m]",
                  xmin, xmax, ymin, ymax,
                  nx, ny,
                  &PSD_N_s[0][0],&PSD_p_s[0][0],&PSD_p2_s[0][0],
                  filename);
      }else{
          int kk;
          char ff[256];
          char tt[256];

          /*figure out padding to make the files appear in alphanuerical order*/
          char  format[32];
          snprintf(format,32,"%%s_%%0%ui",(int) floor(log(nE)/log(10.0))+1);
          sprintf(ff, "%s_Sum",filename);

          DETECTOR_OUT_2D(
                  "PSD monitor Energy Sum",
                  "X position [m]",
                  "Y position [m]",
                  xmin, xmax, ymin, ymax,
                  nx, ny,
                  &PSD_N_s[0][0],&PSD_p_s[0][0],&PSD_p2_s[0][0],
                  ff);
  
          for (kk=0; kk<nE; kk++) {
              sprintf(ff, format,filename,kk);
              sprintf(tt, "PSD monitor Energy slice %i ~ %g keV",kk,Emin+kk*(Emax-Emin)/nE);
              DETECTOR_OUT_2D(
                      tt,
                      "X position [m]",
                      "Y position [m]",
                      xmin, xmax, ymin, ymax, nx, ny,
                      &PSD_N[kk][0],&PSD_p[kk][0],&PSD_p2[kk][0],
                      ff);
          }
      }
    }
%}

FINALLY
%{
    int i;
    if (nE>1){
        for (i=0;i<nE;i++){
            free(PSD_N[i]);
            free(PSD_p[i]);
            free(PSD_p2[i]);
        }
        free(PSD_N);
        free(PSD_p);
        free(PSD_p2);
    }
%}

MCDISPLAY
%{
  
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
