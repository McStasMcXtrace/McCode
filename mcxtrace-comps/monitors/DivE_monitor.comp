/*******************************************************************************
*
* McXtrace, xray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: DivE_monitor
*
* %I
* Written by: Erik B Knudsen
* Based on neutron component by Kristian Nielsen
* Date: Jun. 2016
* Version: $Revision$
* Origin: DTU Physics
*
* Divergence/Energy monitor.
*
* %Description
* 2D detector for intensity as a function of both horizontal divergence
* and Energy.
*
* Example: DivE_monitor(nE=20, nh=20, filename="Output.div",
*           xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*           maxdiv_h=2, Emin=2, Emax=10)
*
* %Parameters
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* nE:       Number of bins in energy (1)
* nh:       Number of bins in divergence (1)
* nx:       (1)
* ny:       Vector definition of "forward" direction wrt. divergence, to be used e.g. when the monitor is rotated into the horizontal plane.(1)
* nz:       (1)
* maxdiv_h: Maximal horizontal divergence detected (degrees)
* Emin:     Minimum energy detected (keV)
* Emax:     Maximum energy detected (keV)
* filename: Name of file in which to store the detector image (string)
* restore_xray: If set, the monitor does not influence the photon state (1)
* nowritefile: [1]  If set, monitor will skip writing to disk.
*
* OUTPUT PARAMETERS:
*
* Div_N:    Array of photon ray counts
* Div_p:    Array of photon weight counts
* Div_p2:   Array of second moments
*
* %End
*******************************************************************************/

DEFINE COMPONENT DivE_monitor
DEFINITION PARAMETERS (nE=20, nh=20)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, maxdiv_h=2, Emin, Emax, restore_xray=0, nx=0, ny=0, nz=1, int nowritefile=0)
OUTPUT PARAMETERS (Div_N, Div_p, Div_p2)
/* X-ray  parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

DECLARE
%{
    double Div_N[nh][ndiv];
    double Div_p[nh][ndiv];
    double Div_p2[nh][ndiv];
%}

INITIALIZE
%{
    int i,j;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
      printf("ERROR: (%s): Null detection area! Exiting.\n",NAME_CURRENT_COMP);
      exit(-1);
    }

    for (i=0; i<nE; i++)
     for (j=0; j<nh; j++)
     {
      Div_N[i][j] = 0;
      Div_p[i][j] = 0;
      Div_p2[i][j] = 0;
     }
    NORM(nx,ny,nz);
%}

TRACE
%{
    int i,j;
    double div;
    double e;
    double k, kn;

    PROP_Z0;
    e = K2E*sqrt(kx*kx + ky*ky + kz*kz);
    if (x>xmin && x<xmax && y>ymin && y<ymax &&
        e > Emin && e < Emax)
    {
      /* Find length of projection onto the [nx ny nz] axis */
      kn = scalar_prod(kx, ky, kz, nx, ny, nz);
      div = RAD2DEG*atan2(kx,kn);

      if (div < maxdiv_h && div > -maxdiv_h)
      {
        i = floor((lambda - Lmin)*nL/(Lmax - Lmin));
        j = floor((div + maxdiv_h)*nh/(2.0*maxdiv_h));
        Div_N[i][j]++;
        Div_p[i][j] += p;
        Div_p2[i][j] += p*p;
        SCATTER;
      }
    }
    if (restore_xray) {
        RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }
%}

SAVE
%{
  if(!nowritefile){
    DETECTOR_OUT_2D(
        "Energy-divergence monitor",
        "Energy [keV]",
        "divergence [deg]",
        Lmin, Lmax, -maxdiv_h, maxdiv_h,
        nE, nh,
        &Div_N[0][0],&Div_p[0][0],&Div_p2[0][0],
        filename);
  }
%}

MCDISPLAY
  %{
    
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
%}

END
