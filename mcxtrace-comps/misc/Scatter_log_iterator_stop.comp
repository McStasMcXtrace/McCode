/*******************************************************************************
*
* McXtrace, xray-tracing package
*         Copyright (C) 1997-2017, All rights reserved
*         DTU Physics, Kgs. Lyngby, Denmark
*
* Component: Scatter_log_iterator_stop.comp
*
* %I
*
* Written by: Erik B Knudsen 
* Date: November 2012
* Version: $Revision: 1.21 $
* Release: McXtrace 1.7
* Origin: DTU Physics
*
* Iteration stop element for a Scatter_log
*
* %D
*
* This component marks the end of the trace-region in which pseudo-photons are handled. Please see the Scatter_log_iterator-component for more details.
* N.B. This component should be immediately followed by a construction like:
* COMPONENT a1 = Arm()
* AT (0,0,0) ABSOLUTE
* JUMP a0 WHEN(MC_GETPAR(iterator_stop_comp_name,loop))
*
* This is to extract the value of the loop variable from the innards of this component
*
* %P
* Input parameters:
*
* iterator: [ ] Instance name of the Scatter_log_iterator log component preceeding this one.
*
* %E
*******************************************************************************/

DEFINE COMPONENT Scatter_log_iterator_stop
DEFINITION PARAMETERS (iterator)
SETTING PARAMETERS ()
OUTPUT PARAMETERS (loop)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE 
%{
%}

DECLARE
%{
  int loop;
%}

INITIALIZE 
%{
  loop=1;
%}


TRACE
%{
scatter_iterator_stop:
  loop=1;
  struct Generalized_State_t *s1=MC_GETPAR(iterator,s1);

  if (s1->_p==-1){
    /*we have reached the end - unset loop and reset photon state to whatever it was before we entered the pseudo photon iterator*/
    loop=0;
    double *ns=MC_GETPAR(iterator,nstate_initial);
    x=ns[0];y=ns[1];z=ns[2];
    kx=ns[3];ky=ns[4];kz=ns[5];
    t=ns[6];
    phi=ns[7];
    Ex=ns[8];Ey=ns[9];Ez=ns[10];
    p=ns[11];

    free(ns);
    MC_GETPAR(iterator,nstate_initial)=NULL;
    /* Restore std ABSORB */
#undef mcabsorb
#define mcabsorb mcabsorbAll
  } else if (s1->_abs) {
    /*if the absorption flag is set for s1 it means that the photon was absorbed in components within the scatter_logger 
      (see scatter logger definition) and should not be propagated further after this iterator*/
    /* printf("INFO: (%s): Performing ABSORB after the iterator\n",NAME_CURRENT_COMP); */
    loop=0;
    double *ns=MC_GETPAR(iterator,nstate_initial);
    x=ns[0];y=ns[1];z=ns[2];
    kx=ns[3];ky=ns[4];kz=ns[5];
    t=ns[6];
    phi=ns[7];
    Ex=ns[8];Ey=ns[9];Ez=ns[10];
    p=ns[11];

    free(ns);
    MC_GETPAR(iterator,nstate_initial)=NULL;
    /* Restore std ABSORB */
#undef mcabsorb
#define mcabsorb mcabsorbAll
    ABSORB; 
  }
%}

MCDISPLAY
%{
  /* A bit ugly; hard-coded dimensions. */
  
  line(0,0,0,0.2,0,0);
  line(0,0,0,0,0.2,0);
  line(0,0,0,0,0,0.2);
%}

END
