/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Lens_simple
*
* %I
* Written by: Erik Knudsen
* Date: June 16, 2009
* Version: $Revision: 1.0$
* Origin: Risoe
*
* Simple refractive x-ray lens
* 
* %D
* Models a stack of N refractive lenses, with a radius of curvature, r, at the apex.
* The model is a thin-lens approximation where photons are refracted in a the XY plane
* at Z=0. Absorption is generally disregarded may be handled through the use of the optional
* transmission parameter T, where 0<=T<=1.
* Thus, the lens has the focal length of f=R/(2*N*&delta) where the x-ray refractive
* index is written: n = 1 - &delta + i &beta.
*
* Example: Lens_simple(xwidth=1e-5, yheight=1e-5, material_datafile="Be.txt",N=100,r=0.3e-3)
*
* %P
* INPUT PARAMETERS
*
* xwidth:  [m] Width of lens aperture.
* yheight: [m] Height of lens aperture.
* radius:  [m] Radius of lens aperture (overrides xwidth & yheight).
* f:       [m] Focal length - overrides the material_datafile - and diregards chromatic aberration.
* material_datafile: [ ] File where the material parameters for the lens may be found. Format is similar to what may be found off the NISP website.
* N:       [ ] The number of successive lenses in the stack.
* r:       [ ] The radius of curvature of the lens.
* Optional parameters:
* T:       [ ] Transmission efficiency of the lens.
* verbose: [ ] Extra information for debugging. 
*
* %E
*******************************************************************************/
DEFINE COMPONENT Lens_simple
DEFINITION PARAMETERS ()
SETTING PARAMETERS (xwidth=0,yheight=0,radius=1e-3, T=1 ,r=0, int N=1, int verbose=0, f=0, string material_datafile="Be.txt")
OUTPUT PARAMETERS (prms)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{
  %include "read_table-lib"
%}

DECLARE
%{
  struct {
    int Z;
    double At, rho;
    double *E,*delta;
    t_Table Tb;
  } *prms;
%}

INITIALIZE
%{
  int status=0;
 
  if(!radius && !(xwidth && yheight) ){
    fprintf(stderr,"%s: Lens has zero effective area\n",NAME_CURRENT_COMP);
    exit(-1);
  }
  
  if(r<=0){
      fprintf(stderr,"Error (%s): No meaningful radius of curvature found r=%g.\n",NAME_CURRENT_COMP,r);
      exit(-1);
  }

  prms=calloc(1,sizeof(*prms));
  if (!f && material_datafile && strlen(material_datafile)){
      if ( (status=Table_Read(&(prms->Tb),material_datafile,0))==-1){
          fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",material_datafile,NAME_CURRENT_COMP);
          exit(-1);
      }
      char **header_parsed;
      header_parsed=Table_ParseHeader(prms->Tb.header,"Z","A[r]","rho","sigma[a]");
      if (!prms->At) prms->At=strtod(header_parsed[1],NULL);
      if (!prms->Z) prms->Z=strtol(header_parsed[0],NULL,10);
      if (!prms->rho) prms->rho=strtod(header_parsed[2],NULL);
  }

  if (T==0){
      fprintf(stderr,"Warning (%s): Transmission is set to 0 and no material set. All X-rays will be absorbed by lens\n.",NAME_CURRENT_COMP);
  }
%}

TRACE
%{
  double sx,sy,sz,s;  
  double s2x,s2y,s2z,s2;  
  double F,k,e,theta,alpha,delta;
  double f1,rhoel;

  PROP_Z0;
  if (r && x*x+y*y<r*r){
      SCATTER;
  }else if (xwidth && (x >-xwidth*0.5 && x<xwidth*0.5 && y>-yheight*0.5 && y<yheight*0.5)){
      SCATTER;
  }else{
      ABSORB;
  }

  /*change direction towards focal point*/
  if(!f){
      /*Focal length given by lambda and delta*/
      k=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz));
      e=K2E*k;
      f1=Table_Value(prms->Tb,e,1);

      /*Calculation of Refractive Index */
      rhoel= f1*NA*(prms->rho*1e-24)/prms->At; /*Material's Number Density of Electrons [e/A^3] incl f' scattering length correction*/
      delta= 2.0*M_PI*RE*rhoel/(k*k);
      F=r/2/delta/N;
  }else{
      /*focal length is a scalar*/
      F=f;
  }

  /*Only focusing in the y-direction for now.*/


  /*auxiliary vector s*/
  sx=0;sy=-y;sz=F;
  s=sqrt(scalar_prod(sx,sy,sz,sx,sy,sz));
  theta=acos(scalar_prod(sx,sy,sz,0,0,1)/s);
  if (y<0)theta=-theta; /*if y is negative rotation should be ccw*/
  /*apply the rotation around the x-axis to focus in y*/
  Rotation R;
  R[0][0]=1; R[0][1]=0;R[0][2]=0;
  R[1][0]=0; R[1][1]=cos(theta); R[1][2]=-sin(theta);
  R[2][0]=0; R[2][1]=sin(theta); R[2][2]=cos(theta);
  /*reuse the vector s as temp storage*/
  sx=kx;
  sy=ky*R[1][1]+kz*R[1][2];
  sz=ky*R[2][1]+kz*R[2][2];
  
  /*rotate around a vector parallel to x.*/
  rotate(s2x,s2y,s2z, kx,ky,kz, theta, 1, 0, 0);

  kx=s2x;ky=s2y;kz=s2z;
  //printf("s= %g %g %g   s2= %g %g %g\n",sx,sy,sz,s2x,s2y,s2z);

  /*set the phase shift*/
  //printf("PHI %.15e ",phi);
  phi+=k*1e10*((x*x+y*y)/2*F); /*k in AA⁻1 but x,y and f are in m. conversion factor.*/
  //printf("%.15e %.8e\n", phi, k*1e10*((x*x+y*y)/2*F));
%}

FINALLY
%{
  Table_Free(&(prms->Tb));
  free(prms);
%}


MCDISPLAY
%{
  double delta;
  int N=8,i;
  
  rectangle("xy",0,0,0,xwidth,yheight);
  if (yheight<xwidth){
    delta=yheight/N;
  } else {
    delta=xwidth/N;
  }
  for (i=1;i<=N;i++){
    circle("xy",0,0,0,sqrt(delta*i));
  }
%}

END
