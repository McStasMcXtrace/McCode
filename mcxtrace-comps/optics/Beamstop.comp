/*******************************************************************************
*
* McXtrace, x-ray tracing package
*         Copyright, All rights reserved
*         DTU Physics, Kgs. Lyngby, Denmark
*         Synchrotron SOLEIL, Saint-Aubin, France
*
* Component: Beamstop
*
* %Identification
*
* Written by: Kristian Nielsen
* Modified by Erik BergbÃ¤ck Knudsen
* Date: March 2011
* Release: McXtrace 1.0rc1
* Origin: Risoe
*
* Rectangular/circular beam stop.
*
* %Description
* A simple rectangular or circular beam stop.
* Infinitely thin and infinitely absorbing.
* The beam stop is by default rectangular. You may either
* specify the radius (circular shape), or the rectangular bounds.
*
* Example: Beamstop(xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05)
*          Beamstop(radius=0.1)
*
* %Parameters
*
* INPUT PARAMETERS
*
* radius: [m] Radius of the beam stop in the z=0 plane, centered at Origo
* xmin:   [m] Lower x bound
* xmax:   [m] Upper x bound
* ymin:   [m] Lower y bound
* ymax:   [m] Upper y bound
* xwidth: [m] Width of beamstop (x). Overrides xmin,xmax.
* yheight:[m] Height of beamstop (y). Overrides ymin,ymax.
*
* %END
*******************************************************************************/

DEFINE COMPONENT Beamstop

SETTING PARAMETERS (xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05,
  xwidth=0, yheight=0, radius=0)

/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

INITIALIZE
%{
  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
  if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }
  
  if (xmin == 0 && xmax == 0 && ymin == 0 & ymax == 0 && radius == 0)
  { fprintf(stderr,"Beamstop: %s: Error: give geometry\n", NAME_CURRENT_COMP); exit(-1); }
%}

TRACE
%{
    double dz,z0=z;
    ALLOW_BACKPROP;
    PROP_Z0;
    dz=z-z0;/*dz<0 means photon must travel backwards to hit beamstop*/
    if ( ((dz>=0) && ((radius!=0) && (x*x + y*y <= radius*radius)))
        || ((dz>=0) && (radius==0) && (x>xmin && x<xmax && y>ymin && y<ymax)) ){
      ABSORB;
    } else {
      RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }
%}

MCDISPLAY
%{
  
  if (radius != 0)
    circle("xy", 0, 0, 0, radius);
  else
    multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
