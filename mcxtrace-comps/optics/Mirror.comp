/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Mirror
*
* %I
*
* Written by: Erik B Knudsen 
* Date: July 2016
* Version: 1.3
* Origin: DTU Physics
*
* Perfectly flat mirror
*
* %D
* This is a simple implementation of a perfectly flat mirror. The mirror plane is in the XZ-plane.
*
* %P
* Input parameters:
* xwidth:  [m] The width of the mirror
* zdepth:  [m] The length of the mirror
* yheight: [m] The height of the mirror. This overrides xwidth and puts the mirror in the yz-plane. 
* R0:      [ ] Constant reflecticity
* reflectivity: [ ] Filename containing reflectivities.
* rtype:   [ ] Type of reflectivity parametrization. 0 means to infer the kind from the reflectivity file.
*
* (none)
*
* %E
*******************************************************************************/

DEFINE COMPONENT Mirror
DEFINITION PARAMETERS (reflec="")
SETTING PARAMETERS (string reflectivity=0, zdepth=0.1, xwidth=0.01, yheight=0, R0=0, rtype=0)
OUTPUT PARAMETERS (reflec_table, prms, re)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{
    %include "read_table-lib"
    %include "reflectivity-lib"
%}

DECLARE
%{  
    struct {
        double e_min,e_max,e_step,theta_min,theta_max,theta_step;
        int use_reflec_table;
    } prms;
    t_Table reflec_table;
    t_Reflec re;

%}

INITIALIZE
%{
    int status;

    if (reflec && strlen(reflec)){
      fprintf(stderr,"WARNING (%s): You have specified the reflec parameter. This is deprecated - please use \'reflectivity\' instead\n", NAME_CURRENT_COMP);
    }

    if (reflectivity && strlen(reflectivity)) {
      status=reflec_Init(&re,COATING_UNDEFINED,reflectivity);
    }else{
      /*assume a constant reflectivity*/
      status=reflec_Init(&re,CONSTANT,R0);
    }

    if(status!=0){
      fprintf(stderr,"ERROR (%s): Could not interpret reflectivity. Aborting.\n", NAME_CURRENT_COMP);
      exit(-1);
    }

%}

TRACE
%{
    int status,hit;
    double l0,l1,l2,l3,tx,ty,tz;
    double nx,ny,nz;
    
    hit=1;
    if(yheight){
        PROP_X0;
        if(y<-yheight/2.0|| y>yheight/2.0 || z<-zdepth/2.0 || z>zdepth/2.0){
            hit=0;
        }else{
            nx=1;
            ny=0;
            nz=0;
        }
    }else{
        PROP_Y0;
        if(x<-xwidth/2.0|| x>xwidth/2.0 || z<-zdepth/2.0 || z>zdepth/2.0){
            hit=0;
        }else{
            nx=0;
            ny=1;
            nz=0;
        }
    }
    if(hit){
        double s=scalar_prod(kx,ky,kz,nx,ny,nz);
        double k=sqrt(scalar_prod(kx,ky,kz,kx,ky,kz)); 
         
        kx=kx-2*s*nx;
        ky=ky-2*s*ny;
        kz=kz-2*s*nz;
        SCATTER;
        double q=2.0*s;
        double R=reflecq(&re,q,0,k*K2E,fabs(90-acos(s/k)*RAD2DEG));
        p*=R;
        /*update phase - as an approximation turn by 180 deg.*/;
        phi+=M_PI;
    }else{
        /*missed mirror - restore xray*/
        RESTORE_XRAY(INDEX_CURRENT_COMP, x,y,z, kx,ky,kz, phi,t, Ex,Ey,Ez, p);
    }
%}

MCDISPLAY
%{
  /* A bit ugly; hard-coded dimensions. */
  magnify("");
  if(yheight){
      line(-yheight/2.0,0,-zdepth/2.0, yheight/2.0,0,-zdepth/2.0);
      line(-yheight/2.0,0, zdepth/2.0, yheight/2.0,0, zdepth/2.0);
      line(-yheight/2.0,0,-zdepth/2.0,-yheight/2.0,0, zdepth/2.0);
      line( yheight/2.0,0,-zdepth/2.0, yheight/2.0,0, zdepth/2.0);
  }else{
      line(-xwidth/2.0,0,-zdepth/2.0, xwidth/2.0,0,-zdepth/2.0);
      line(-xwidth/2.0,0, zdepth/2.0, xwidth/2.0,0, zdepth/2.0);
      line(-xwidth/2.0,0,-zdepth/2.0,-xwidth/2.0,0, zdepth/2.0);
      line( xwidth/2.0,0,-zdepth/2.0, xwidth/2.0,0, zdepth/2.0);
  }
%}

END
