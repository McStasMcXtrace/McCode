/************************************************************************'
 * 
 * McXtrace X-ray tracing software
 * Copyright, All Rights Reserved
 * Risoe-DTU, Roskilde, Denmark
 *
 *
 * Component: Undulator
 *
 * %I
 * Written by: Erik B. Knudsen
 * Date: May, 2013.
 * Version: 1.0
 * Origin: DTU Physics
 * Release: McXtrace 1.2
 *
 * Model of an undulator source
 * 
 * %D
 * A undulator source model based on the derivation by K.J. Kim, AIP, conf. proc., 184, 1989. doi:10.1063/1.38046.
 *
 * %P
 * Input Parameters:
 * Ee: (GeV) Storage ring electron energy (typically a few GeV)
 * Ie: (A)   Ring current
 * tbunch: (s) Bunch length. 0 means continous source.
 * t0:     (s) Delay of the first bunch from t=0.
 * B:      (T) Peak magnet field strength
 * Nper:   ( ) Number of magnetic periods in the undulator
 * length: (m) Length of the undulator.
 * K:      ( ) Dimensionless undulator parameter. overrides B.
 * gap:    (m) Undulator gap.
 * sigex:  ( ) Electron ring beam size in horizontal plane (rms) 
 * sigey:  ( ) Electron ring beam size in vertical plane (rms)
 * phase:  ( ) Initial phase of radiation.
 * randomphase: ( ) If !=0 phase will be random (I.e. the emitted radiation is completely incoherent)
 * focus_xw: (m) Width of target window
 * focus yh: (m) Height of target window
 * dist: (m) Distance from source plane to target window along the optical axis
 * E0: (keV) Center of emitted energy spectrum (overrides lambda0)
 * dE: (keV) Half-width of emitted energy spectrum
 * verbose: ( ) if nonzero, output extra information
 * quick_integ: ( ) if nonzero, use faster (but less accurate) integration scheme.
*/

DEFINE COMPONENT Undulator
DEFINITION PARAMETERS (verbose=0)
SETTING PARAMETERS (E0=0, dE=0, phase=0, randomphase=1, Ee=2.4, Ie=0.4, tbunch=0, t0=0, B=1.6, K=3,
        gap=1e-3, int Nper=1, length=1, sigey=0, sigex=0, focus_xw=0, focus_yh=0, dist=1, gauss_t=0, quick_integ=0)
OUTPUT PARAMETERS (prms,alpha,MELE)
DEPENDENCY "-lgsl -lgslcblas"
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{

#include <gsl/gsl_sf_bessel.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_integration.h>

double mxundulator_Bsig_integrand(double x, void *params){
    double w_w1 = *((double *) params);
    double p = *((double *) params+1);
    double q = *((double *) params+2);
    double angle_term = *((double *) params+3);/* xi*gamma/K  horizontal angle term*/

    double f1 = angle_term - cos(x);
    double inner= w_w1*x - p*sin(x) + q*sin(2*x);
    double f2 =  cos(inner);

    return f1*f2;
}

double mxundulator_Bpi_integrand(double x, void *params){
    double w_w1 = *((double *) params);
    double p = *((double *) params+1);
    double q = *((double *) params+2);
    double angle_term = *((double *) params+3); /*phi*gamma/K vertical angle term*/

    double f1 = angle_term;
    double inner= w_w1*x - p*sin(x) + q*sin(2*x);
    double f2 =  cos(inner);

    return f1*f2;
}

double mxundulator_S_N(double w_w1, int N){
    return pow(sin(N*M_PI*w_w1)/(N*sin(M_PI*w_w1)),2.0);
}


%}

DECLARE
%{
  struct {
    double gamma,gamma2,igamma;
    double s1x,s1y; /*beam's size at dist (convolution of sigex/sigey and igamma)*/
    double lu; /*undulator magnetic period*/
    double kc; /*undulator kritical wavenumber*/
    gsl_function Bsig,Bpi;
    gsl_integration_workspace *gsl_int_ws;
  } prms;

  /*fine structure constant from CODATA*/
  const double alpha=7.2973525698e-3;
  /*electron mass from CODATA in kg*/
  const double MELE=9.10938291e-31;
  //double besselj[nharm],besselh[nharm];
%}


INITIALIZE
%{
  fprintf(stderr,"Warning (%s): Undulator is an experimental component - testing is ongoing\n",NAME_CURRENT_COMP);
  
  prms.lu=length/Nper;

  if( (!K && B<=0) || Ee<=0 || Ie<=0 ){
    fprintf(stderr, "Error (%s): K, B, Ee, and Ie do not have a consistent set of values. Found (%g %g %g %g). Aborting.\n",NAME_CURRENT_COMP,K,B,Ee,Ie);
    exit(1);
  }
  
  if(K){
    B=2*M_PI*MELE*M_C*K/CELE/prms.lu;
    if (verbose) printf("Undulator (%s) B=f(K=%g)= %g\n",NAME_CURRENT_COMP,K,B);
  }else if (B>0){
    K=CELE*B*prms.lu/(2*M_PI*MELE*M_C);
    if (verbose) printf("Undulator (%s) K=f(B=%g)= %g\n",NAME_CURRENT_COMP,B,K);
  }

  if (sigex <0 || sigey<0){
   fprintf(stderr, "Error (%s): sigex and sigey must be >= 0. Negative beam size isn't meaningful. Aborting.\n",NAME_CURRENT_COMP,sigex,sigey);
    exit(1);
  }
  if (dist<=0){
    fprintf(stderr,"Error (%s): Target undefined.\n",NAME_CURRENT_COMP);
    exit(1);
  }

  /*compute gamma*/
  prms.gamma=(Ee*1e9)/(MELE/CELE*M_C*M_C);/*the extra CELE is to convert to eV*/
  prms.gamma2=prms.gamma*prms.gamma;
  prms.igamma=1.0/prms.gamma;

  //printf("Undulator (%s): gamma=%g, divergence is 1/gamma=%g rad.\n",NAME_CURRENT_COMP,prms.gamma,prms.igamma);
  /*compute characteristic energy in keV*/
  double Ec=0.665*Ee*Ee*B;
  //double Ec=1.5*prms.gamma2*HBAR*CELE*B/MELE *1e-3; /*check units on this one. The 1e-3 factor is because energy is assumed to be in keV*/
  /*We normally do computations in k so use that for transfer*/
  prms.kc=E2K*Ec;

  /*allocate an integration workspace*/
  if(!quick_integ){
      prms.gsl_int_ws = gsl_integration_workspace_alloc (1000);
  }
  prms.Bsig.function= &mxundulator_Bsig_integrand;
  prms.Bpi.function = &mxundulator_Bpi_integrand;
  gsl_set_error_handler_off();

%}


TRACE
%{

    double k,e,l,w_u,r,w;
    double xo,yo,zo,xi,psi,theta2,Omega;
    double bsigma_integral, bpi_integral, s_n2;
    double bsigma_error, bpi_error;

    /* pick an energy in the given interval */
    e=E0+randpm1()*dE;
/*    double rtt=rand01();*/
/*    if(rtt<0.5){*/
/*        e=E0;*/
/*    }else{*/
/*        e=2*E0;*/
/*    }*/

    /* the undulator's fundamental wavelength*/
    w_u=2*M_PI*M_C/prms.lu;

    /* now pick angles (\xi and \psi => \theta) within the focus_window 
     * (point on window + point in electron beam)
     * ... we can now weight properly according to ang. flux density*/
    if(focus_xw && focus_yh){
        randvec_target_rect(&xo,&yo,&zo, &Omega, 0,0,dist, focus_xw, focus_yh, ROT_A_CURRENT_COMP);
    }else if (focus_yh!=0){
        xi=0;xo=0;yo=0;
        yo=randpm1()*0.5*focus_yh;
        Omega=1;
    }else if (focus_xw!=0){
        psi=0;xo=0;yo=0;
        xo=randpm1()*0.5*focus_xw;
        Omega=1;
    }else{
        xi=0;psi=0;xo=0;yo=0;
        Omega=1;
    }
    p=Omega/(4*M_PI);
    xi=fabs(tan(xo/dist));
    //xi=0.05/prms.gamma;
    psi=fabs(tan(yo/dist));
    //psi=0;
    theta2=xi*xi+psi*psi;

    //printf("XYO: %g %g\n",xo,yo);
    /*for now disregard e-beam size*/
    x=y=z=0;
    k=E2K*e;
    /*anguar frequency w:*/
    w=M_C*k*1e10;

    kx=xo;ky=yo;kz=dist;
    NORM(kx,ky,kz);
    kx*=k;
    ky*=k;
    kz*=k;

    double w1theta=2*prms.gamma2/(1+K*K/2.0 + prms.gamma2 *theta2) * w_u; 
    double w10=2*prms.gamma2/(1+K*K/2.0) * w_u; 
    double w_w1=w/w1theta;
    double w_w10=w/w10;
    //double e2=0.95*Ee*Ee/((1+K*K/2.0)*prms.lu);

    //printf("SPECTR: %g %g %g %g %g %g %g\n",e,e2,k,w,w1theta,w10,w_w1);

    //double w, res,err,res2;
    //w=w_w10*2*gam*gam/(1+K*K/2.0)*wu;
    double Bsig_integ_prms[4],Bpi_integ_prms[4];
    Bsig_integ_prms[0] = Bpi_integ_prms[0]=w_w1; /*relative frequency*/
    Bsig_integ_prms[1] = Bpi_integ_prms[1] = 2*w_w1*xi*prms.gamma*K/(1+K*K/2.0); /*p*/
    Bsig_integ_prms[2] = Bpi_integ_prms[1] = 0.25 * w_w1*K*K/(1+K*K/2.0); /*q*/
    Bsig_integ_prms[3] = xi *prms.gamma/K; /*angle terms*/
    Bpi_integ_prms[3]  = psi*prms.gamma/K; 

    /*pass the parameters to the integrand*/
    prms.Bsig.params=Bsig_integ_prms;
    prms.Bpi.params =Bpi_integ_prms;
    if (!quick_integ){
        gsl_integration_qags (&(prms.Bsig),    0, M_PI,    0, 1e-6, 1000, prms.gsl_int_ws, &bsigma_integral, &bsigma_error); 
        gsl_integration_qags (&(prms.Bpi),     0, M_PI,    0, 1e-6, 1000, prms.gsl_int_ws, &bpi_integral, &bpi_error); 
    }else{
        size_t neval;
        gsl_integration_qng (&(prms.Bsig),    0, M_PI,    0, 1e-6, &bsigma_integral, &bsigma_error,&neval);
        gsl_integration_qng (&(prms.Bpi),     0, M_PI,    0, 1e-6, &bpi_integral, &bpi_error,&neval); 
    }
    bsigma_integral*=M_2_PI;/*correct for only integrating half interval and normalize by pi.*/
    bpi_integral*=M_2_PI;

    s_n2=mxundulator_S_N(w_w1, Nper);
    
    double prefactor=alpha*Ie/CELE*pow(K*prms.gamma/(1+K*K/2.0),2.0)*Nper*Nper*w_w10*w_w10;

    p*=prefactor* pow(bsigma_integral,2.0)*s_n2;
    p=p;

    /*randomly pick phase*/
    if (randomphase){
        phi=rand01()*2*M_PI;
    }else{
        phi=phase;
    }

    /*set polarization vector*/
    Ex=0;Ey=0;Ez=0;
%}
FINALLY
%{
    if(!quick_integ){
        gsl_integration_workspace_free (prms.gsl_int_ws);
    }
%}
MCDISPLAY
%{
  magnify("xz");
  double zz,dz;
  const double xwidth=1e-2;
  const double D=dist;
  double x0,z0,x1,z1;

  zz=-(length+prms.lu)/2.0;
  dz=prms.lu/2.0;

  while (zz<=(length-prms.lu)/2.0){
    box(0.0,gap/2.0+5e-4,zz,xwidth,1e-3,prms.lu/2.0);
    box(0.0,-gap/2.0-5e-4,zz,xwidth,1e-3,prms.lu/2.0);
    zz+=dz;
  }

  line(0.0,0.0,0.0, K*D*sin(prms.igamma), 0.0, D);
  line(0.0,0.0,0.0,-K*D*sin(prms.igamma), 0.0, D);
  line(0.0,0.0,0.0, 0.0, D*sin(prms.igamma), D);
  line(0.0,0.0,0.0, 0.0,-D*sin(prms.igamma), D);
  
  double phi,dphi;  
  phi =-prms.igamma;
  dphi= 2.0*prms.igamma/32;
  while(phi<prms.igamma){
    x0=D*sin(phi);
    x1=D*sin(phi+dphi);
    z0=D*cos(phi);
    z1=D*cos(phi+dphi);
    line(K*x0,0.0,z0,K*x1,0.0,z1);
    line(0.0,x0,z0,0.0,x1,z1);
    phi+=dphi;
  }
%}

END
