.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CodeText::Template 3pm"
.TH CodeText::Template 3pm "2004-03-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tk::CodeText::Template \- a template for syntax highlighting plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Tk::CodeText::Template is a framework to assist authors of plugin modules.
All methods to provide highlighting in a Tk::CodeText widget are there, Just
no syntax definitions and callbacks. An instance of Tk::CodeText::Template 
should never be created, it's meant to be sub classed only.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBcallbacks\fR({\fI'Tagname'\fR => \fI\e&callback\fR, ...});" 4
.IX Item "callbacks({'Tagname' => &callback, ...});"
sets and returns the instance variable 'callbacks'
.ie n .IP "\fBhighlight\fR(\fI\fI$text\fI\fR);" 4
.el .IP "\fBhighlight\fR(\fI\f(CI$text\fI\fR);" 4
.IX Item "highlight($text);"
highlights \fI\f(CI$text\fI\fR. It does so by selecting the proper callback
from the \fBcommands\fR hash and invoke it. It will do so untill
\&\f(CW$text\fR has been reduced to an empty string.
.ie n .IP "\fBlistAdd\fR(\fI'listname'\fR, \fI\fI$item1\fI\fR, \fI\fI$item2\fI\fR ...);" 4
.el .IP "\fBlistAdd\fR(\fI'listname'\fR, \fI\f(CI$item1\fI\fR, \fI\f(CI$item2\fI\fR ...);" 4
.IX Item "listAdd('listname', $item1, $item2 ...);"
Adds a list to the 'lists' hash.
.IP "\fBlists\fR(\fI?\e%lists?\fR);" 4
.IX Item "lists(?%lists?);"
sets and returns the instance variable 'lists'.
.IP "\fBout\fR(\fI?\e@highlightedlist?\fR);" 4
.IX Item "out(?@highlightedlist?);"
sets and returns the instance variable 'out'.
.IP "\fBparserError\fR(\fI'text'\fR);" 4
.IX Item "parserError('text');"
Error trapping method. Tries to escape the current mode. If that is not
possible, it will parse the text with the default tag. Furthermore it
complains about being called at all. Usefull for debugging when writing
a new plugin.
.IP "\fBrules\fR(\fI?\e@rules?\fR)" 4
.IX Item "rules(?@rules?)"
sets and returns a reference to a list of tagnames and options.
By default it is set to [].
.ie n .IP "\fBsnippetAppend\fR(\fI\fI$string\fI\fR)" 4
.el .IP "\fBsnippetAppend\fR(\fI\f(CI$string\fI\fR)" 4
.IX Item "snippetAppend($string)"
appends \fI\f(CI$string\fI\fR to the current snippet.
.IP "\fBsnippetParse\fR(\fI?$text?\fR, \fI?$tagname?\fR)" 4
.IX Item "snippetParse(?$text?, ?$tagname?)"
parses \f(CW$text\fR to the 'out' list, and assigns \f(CW$tagname\fR to it. If \f(CW$tagname\fR is
not specified it will look for the tagname by calling \fBstackTop\fR. If \fI\f(CI$text\fI\fR
is also not specified it will look for text by calling \fBsnippet\fR.
.IP "\fBstack\fR" 4
.IX Item "stack"
sets and returns the instance variable 'stack', a reference to an array.
.IP "\fBstackPull\fR" 4
.IX Item "stackPull"
retrieves the element that is on top of the stack, decrements stacksize by 1.
.ie n .IP "\fBstackPush\fR(\fI\fI$tagname\fI\fR)" 4
.el .IP "\fBstackPush\fR(\fI\f(CI$tagname\fI\fR)" 4
.IX Item "stackPush($tagname)"
puts \fI\f(CI$tagname\fI\fR on top of the stack, increments stacksize by 1
.IP "\fBstackTop\fR" 4
.IX Item "stackTop"
retrieves the element that is on top of the stack.
.IP "\fBstateCompare\fR(\fI\e@state\fR);" 4
.IX Item "stateCompare(@state);"
Compares two lists, \e@state and the stack. returns true if they
match.
.IP "\fBstateGet\fR" 4
.IX Item "stateGet"
Returns a list containing the entire stack.
.ie n .IP "\fBstateSet\fR(\fI\fI@list\fI\fR)" 4
.el .IP "\fBstateSet\fR(\fI\f(CI@list\fI\fR)" 4
.IX Item "stateSet(@list)"
Accepts \fI\f(CI@list\fI\fR as the current stack.
.IP "\fBtokenParse\fR(\fI'Tagname'\fR);" 4
.IX Item "tokenParse('Tagname');"
Parses the currently build snippet and tags it with 'Tagname'
.ie n .IP "\fBtokenTest\fR(\fI\fI$value\fI\fR, \fI'Listname'\fR);" 4
.el .IP "\fBtokenTest\fR(\fI\f(CI$value\fI\fR, \fI'Listname'\fR);" 4
.IX Item "tokenTest($value, 'Listname');"
returns true if \f(CW$value\fR is and element of 'Listname' in the 'lists' hash
.SH "AUTHOR"
.IX Header "AUTHOR"
Hans Jeuken (haje@toneel.demon.nl)
.SH "BUGS"
.IX Header "BUGS"
Unknown.
