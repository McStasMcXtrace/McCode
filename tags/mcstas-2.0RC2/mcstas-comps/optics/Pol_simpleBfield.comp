/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_simpleBfield
*
* %I
* Written by: Peter Christiansen and Peter Willendrup
* Date: August 2006
* Version: $Revision: 1.1 $
* Origin: RISOE
* Release: McStas 1.10
*
* Magnetic field component.
*
* %D 
*
* Rectangular box with a definable B field.
*
* The component is concentric. It means that it requires a 
*
* // START MAGNETIC FIELD
* COMPONENT msf =
* Pol_simpleBfield(xwidth=0.08, yheight=0.08, zdepth=0.2, Bx=0, By=-0.678332e-4, Bz=0)
*      AT (0, 0, 0) RELATIVE armMSF
*
* // HERE CAN BE OTHER COMPONENTS INSIDE THE MAGNETIC FIELD
*
* // STOP MAGNETIC FIELD
* COMPONENT msfCp = COPY(msf)
*      AT (0, 0, 0) RELATIVE armMSF
*
* In between the two component instances the propagation routine
* PROP_DT also handles the spin propagation.
* The current algorithm used for spin propagation is:
* SimpleNumMagnetPrecession
* in pol-lib.
* and does not handle gravity.
*
* GRAVITY: NO
* POLARISATION: YES
*
* Example: Pol_simpleBfield(xwidth=0.1, yheight=0.1, zdepth=0.2, Bx=0, By=1, Bz=0)
*
* %P
* INPUT PARAMETERS:
*
* xwidth:      [m]       Width of opening. 
* yheight:      [m]       Height of opening. 
* zdepth:  [m]       Length of field.
* Bx:      [T]       Parameter used for x composant of field.
* By:      [T]       Parameter used for y composant of field.
* Bz:      [T]       Parameter used for z composant of field.
* nx:      [1]       Number of field points to draw along x axis.
* ny:      [1]       Number of field points to draw along y axis.
* nz:      [1]       Number of field points to draw along z axis.
* fieldFunction [pointer] Function describing the magnetic field.
*
* OUTPUT PARAMETERS:
*
* gz:             z-component of gravity (m/s/s)
* parPtr:         Pointer to component magnet parameters (pointer)
*
* %E
****************************************************************************/

DEFINE COMPONENT Pol_simpleBfield
DEFINITION PARAMETERS (fieldFunction=const_magnetic_field)
SETTING PARAMETERS (xwidth, yheight,zdepth,
		       Bx, By, Bz,
		       int nx=5, int ny=5, int nz=5)
  OUTPUT PARAMETERS(gz, magnet, parPtr)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

SHARE
%{
  %include "pol-lib"
  double fmax(double, double);
  double fmin(double, double);
%}


DECLARE
%{
  /*   Larmor frequency and scalar product threshold*/
  double gz;
  void *parPtr;
  mcmagnet_field_info *magnet;  
%}

INITIALIZE
%{  
  double gx, gy;
  double *t;
  Coords localG = rot_apply(ROT_A_CURRENT_COMP, coords_set(0,-GRAVITY,0));
  //mcMagnetPrecession=SimpleNumMagnetPrecession;
  printf("%s: By=%g, zdepth=%g\n",NAME_CURRENT_COMP,By,zdepth);

  if (fieldFunction==const_magnetic_field){
    t=malloc(3*sizeof(double));
    t[0]=Bx;
    t[1]=By;
    t[2]=Bz;
  } else if (fieldFunction==rot_magnetic_field){
    t=malloc(2*sizeof(double));
    t[0]=By;
    t[1]=zdepth;
  } else if (fieldFunction==majorana_magnetic_field){
    t=malloc(3*sizeof(double));
    t[0]=Bx;
    t[1]=By;
    t[2]=zdepth;
  }
  parPtr=(void *)t;

  coords_get(localG, &gx, &gy, &gz);
  if(!mcgravitation)
    gz = 0;
  
  if ((xwidth<=0) || (yheight<=0) || (zdepth<=0)) {
    fprintf(stderr, "Pol_filter: %s: Null or negative volume!\n"
	    "ERROR      (xwidth, yheight, zdepth). Exiting\n",
	    NAME_CURRENT_COMP);
    exit(1);
  }  
%}

TRACE
%{
  //enter
  PROP_Z0;
  /*terminate neutrons which miss the component*/
  if (2*x>xwidth || 2*x<-xwidth || 2*y>yheight || 2*y<-yheight){
    ABSORB;
  }
  mcmagnet_push(fieldFunction,&(ROT_A_CURRENT_COMP),&(POS_A_CURRENT_COMP),0,parPtr); 
//  mcmagnet_print_stack();
%}

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}


MCDISPLAY
%{
  magnify("xy");
  rectangle(0,0,0,xwidth,yheight,0);
%}

END
