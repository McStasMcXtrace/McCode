/*****************************************************************************
*         McXtrace instrument definition URL=http://www.mcxtrace.org
*
* Instrument: Test_Monochromators
*
* %Identification
* Written by: A. Vickery, A. Prodi and E. Knudsen
* Date: July 2011.
* Origin: NBI,Ris&oslash; DTU
* Release: McXtrace 1.0
* %INSTRUMENT_SITE: Tests_optics
*
* Compares intensities of Monochromator components.
*
* %Description
*
* Very simple setup to compare intensities diffracted by Monochromators. 
* It shows that implementations are equivalent.
*
* %Example: Test_Mono -n 1e6 Mono=1 Detector: emon_I=6.97053e-16
*
* %Parameters
* INPUT PARAMETERS:
* Mono:   Unused (here for compatibility reasons)
* lambda: Source wavelength   [Angs]
* L1 [m]: distance from source to monochromator
* OMM [deg]: rotation angle of monochromator, i.e. angle of incidence
* TTM [deg]: scattering angle at which to put the detector
*
* %Link
*
* %End
****************************************************************************/

DEFINE INSTRUMENT Test_Monochromators(int Mono=1, lambda=1.0, L1=10.0,OMM=14.2208,TTM=28.4416)

DECLARE
%{
  double DM  = 3.1356 ; /* Monochromator d-spacing in Angs */
			/* Si(111): 3.1356 */
                       /* PG002 Orders : 1st 3.355 2e 1.6775, 3e 1.1183 */
  
  /* to compute */
  double A1,A2;
  double mono_q;
  
  /* This variable helps us switch on and off the different setups*/
  double filterProb;
%}
/* end of DECLARE */

INITIALIZE
%{
  int    ORDER = 1;
  double Ki;
  int    SM;
  
  /* SM : scattering at mono to the right (-1)/left(+1) */
  SM = 1;
  
  mono_q = 2*PI*ORDER/DM;  /* Q mono in Angs-1 */

  Ki = 2*PI/lambda; 
  /* Ki = 2*PI/12.398; */
  
  A2 = asin(mono_q/2/Ki)*RAD2DEG*2;
  
  A2 *= SM;   /* A1 : mono theta (crystal) */
  A1 = A2/2;  /* A2 : mono 2 theta (arm to sample) */

 /*  printf("lambda for Mono angle calculation is: %g: \n", lambda);
   printf("Bragg angle for Mono is: %g: \n", A1);
   printf("2theta angle for Mono is: %g: \n", A2);*/

  %}
/* end of INITIALIZE */

TRACE
/* Source description */

COMPONENT Origin = Progress_bar()
     AT (0,0,0) ABSOLUTE

/* a flat constant source */

COMPONENT generic_source=Source_flat(
    E0=8.05, dE=0.1,
    xwidth=1.0e-5, yheight=1.0e-5, 
    focus_xw=1.0e-5,focus_yh=1.0e-5, dist=L1
)
AT (0,0,0) RELATIVE PREVIOUS

COMPONENT psd_pre = 
PSD_monitor(xwidth = 0.10, yheight = 0.10,
	    nx=20, ny=20, filename="psd2.dat")
  AT (0, 0, 0.5) RELATIVE generic_source 

 COMPONENT emon_pre = E_monitor(nE=200, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05,  
				xwidth=0, yheight=0, nE=200, Emin=8,Emax=8.1, restore_xray=1,filename="emon_pre.dat") 
   AT (0, 0, 0.6) RELATIVE generic_source  

COMPONENT Mono_Arm = Arm()
  AT (0, 0, L1) RELATIVE generic_source ROTATED (OMM, 0, 0) RELATIVE generic_source
  
COMPONENT Mono1 =  
 Perfect_crystal(length=0.05, width=0.02, V=160.1826, h=1, k=1, l=1, alpha=0) 
      AT (0, 0, 0) RELATIVE Mono_Arm 

COMPONENT Mono_Out = Arm()
  AT (0, 0, 0) RELATIVE Mono_Arm ROTATED (TTM, 0, 0) RELATIVE generic_source

COMPONENT psd1 = 
PSD_monitor(xwidth = 0.20, yheight = 0.20,
	    nx=20, ny=20, filename="psd1.dat")
  AT (0, 0, 1) RELATIVE Mono_Out

COMPONENT emon = E_monitor(nE=200, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, 
			   xwidth=0, yheight=0, nE=200, Emin=8,Emax=8.1, restore_xray=1,filename="emon.dat")
  AT (0, 0, 1.1) RELATIVE Mono_Out

COMPONENT emon_zm = E_monitor(nE=50, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, 
			   xwidth=0, yheight=0, nE=200, Emin=8.0475,Emax=8.05, restore_xray=1,filename="emonzm.dat")
  AT (0, 0, 1.1) RELATIVE Mono_Out

END

