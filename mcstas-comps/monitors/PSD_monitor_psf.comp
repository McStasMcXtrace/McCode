/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor_psf
*
* %I
* Written by: Kim Lefmann, Linda Udby
* Date: Feb 3, 1998
* Updated: Oct 15, 2007 (with psf)
* Origin: Risoe
*
* Position-sensitive monitor.
*
* %D
* An (n times m) pixel PSD monitor. This component may also be used as a beam
* detector.
*
* Example: PSD_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, nx=90, ny=90, filename="Output.psd")
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]           Lower x bound of detector opening 
* xmax: [m]           Upper x bound of detector opening 
* ymin: [m]           Lower y bound of detector opening 
* ymax: [m]           Upper y bound of detector opening 
* xwidth: [m]         Width/diameter of detector (x). Overrides xmin, xmax 
* yheight: [m]        Height of detector (y). Overrides ymin, ymax 
* nx: [1]             Number of pixel columns 
* ny: [1]             Number of pixel rows 
* filename: [string]  Name of file in which to store the detector image 
* psf: [m]            Point spread function, ray (x,y) coordinate randomized by gaussion of sigma psf 
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* OUTPUT PARAMETERS:
*
* PSD_N: []           Array of neutron counts
* PSD_p: []           Array of neutron weight counts
* PSD_p2: []          Array of second moments
*
* %E
*******************************************************************************/


DEFINE COMPONENT PSD_monitor_psf
DEFINITION PARAMETERS (nx=90, ny=90, string filename,restore_neutron=0)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0, psf=0, int nowritefile=0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2)
STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
POLARISATION PARAMETERS (sx,sy,sz)

DECLARE
%{
double PSD_N[nx][ny];
double PSD_p[nx][ny];
double PSD_p2[nx][ny];
%}

INITIALIZE
%{
int i,j;

if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("PSD_monitor_psf: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(-1);
    }

    for (i=0; i<nx; i++)
     for (j=0; j<ny; j++)
     {
      PSD_N[i][j] = 0;
      PSD_p[i][j] = 0;
      PSD_p2[i][j] = 0;
     }
  %}

TRACE
  %{
    int i,j;
    double xp,yp;

    PROP_Z0;

    xp = x + psf*randnorm();
    yp = y + psf*randnorm();

    if (xp>xmin && xp<xmax && yp>ymin && yp<ymax)
    {
      i = floor((xp - xmin)*nx/(xmax - xmin));
      j = floor((yp - ymin)*ny/(ymax - ymin));
      PSD_N[i][j]++;
      PSD_p[i][j] += p;
      PSD_p2[i][j] += p*p;
      SCATTER;
    }
    if (restore_neutron) {
    RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}

SAVE
  %{
    if (!nowritefile) {
      DETECTOR_OUT_2D(
          "PSD monitor",
          "X position [cm]",
          "Y position [cm]",
          xmin*100.0, xmax*100.0, ymin*100.0, ymax*100.0,
          nx, ny,
          &PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],
          filename);
    }
  %}

MCDISPLAY
%{
  
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
