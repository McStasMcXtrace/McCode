/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor_TOF
*
* %I
* Written by: Peter Willendrup, derived from PSD_monitor by Kim Lefmann
* Date: Feb 3, 1998
* Version: $Revision$
* Origin: Risoe
* Release: McStas 1.6
*
* Position-sensitive monitor with a TOF signal pr. bin.
*
* %D
* An (nx times ny) pixel PSD monitor with nt time bins pr pixel. 
*
* Will output 1 integrated PSD images plus an nt time bin TOF signal pr pixel.
*
* Example: PSD_monitor_TOF(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, ny=90, tmin=4000, tmax=7000, nt=1000, filename="Output")
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* tmin:     Lower time bound (mu-s)
* tmax:     Upper time bound (mu-s)
* xwidth:   Width/diameter of detector (x). Overrides xmin,xmax. (m)
* yheight:  Height of detector (y). Overrides ymin,ymax. (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* nt:       Number of TOF bins (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of neutron counts
* PSD_p:    Array of neutron weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/


DEFINE COMPONENT PSD_monitor_TOF
DEFINITION PARAMETERS (nx=90, ny=90, nt=10, string filename, restore_neutron=0)
SETTING PARAMETERS (xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0, tmin=0, tmax=0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2, PSD_Ns, PSD_ps, PSD_p2s)

DECLARE
%{
  double PSD_N[nx][ny][nt];
  double PSD_p[nx][ny][nt];
  double PSD_p2[nx][ny][nt];
  double PSD_Ns[nx][ny];
  double PSD_ps[nx][ny];
  double PSD_p2s[nx][ny];
%}

INITIALIZE
%{
  int i,j,k;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("PSD_TOF_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    if (tmin >= tmax) {
      printf("PSD_TOF_monitor: %s: Unmeaningful TOF definition!\n",
	     NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nx; i++)
      for (j=0; j<ny; j++) {
	PSD_Ns[i][j] = 0;
	PSD_ps[i][j] = 0;
	PSD_p2s[i][j] = 0;
	for (k=0; k<nt; k++) {
	  PSD_N[i][j][k] = 0;
	  PSD_p[i][j][k] = 0;
	  PSD_p2[i][j][k] = 0;
	}
      }
    %}
TRACE
  %{
    int i,j,k;


    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax && (1E6*t)>tmin && (1E6*t)<tmax)
    {
      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));
      k = floor((1E6*t - tmin)*nt/(tmax - tmin));

      PSD_N[i][j][k]++;
      PSD_p[i][j][k] += p;
      PSD_p2[i][j][k] += p*p;

      PSD_Ns[i][j]++;
      PSD_ps[i][j] += p;
      PSD_p2s[i][j] += p*p;
      
      SCATTER;
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
%}

SAVE
%{
  int kk,ll;
  char ff[256];
  char tt[256];
  sprintf(ff, "%s_Sum",filename);
  DETECTOR_OUT_2D(
	"PSD monitor TOF Sum",
        "X position [cm]",
        "Y position [cm]",
        xmin*100.0, xmax*100.0, ymin*100.0, ymax*100.0,
        nx, ny,
        &PSD_Ns[0][0],&PSD_ps[0][0],&PSD_p2s[0][0],
        ff);
  
  for (kk=0; kk<nx; kk++) {
    for (ll=0; ll<ny; ll++) {
      sprintf(ff, "%s_%i_%i",filename,kk,ll);
      sprintf(tt, "PSD monitor TOF signal in bin %i,%i (%g,%g) m ",kk,ll,xmin+kk*(xmax-xmin)/nx,ymin+ll*(ymax-ymin)/ny);
      DETECTOR_OUT_1D(
		      tt,
		      "Time-of-flight [\\gms]",
		      "Intensity",
		      "t", tmin, tmax, nt,
		      &PSD_N[kk][ll][0],&PSD_p[kk][ll][0],&PSD_p2[kk][ll][0],
		      ff);
    }
  }
%}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
