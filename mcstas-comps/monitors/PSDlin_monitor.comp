/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* %I
* Written by:  Kim Lefmann
* Date: May 7, 2001
* Origin: Risoe
*
* Rectangular 1D PSD, measuring intensity vs. position along an axis, 
*
* %D
* A 1-dimensional PSD measuring intensity along either the horizontal axis x (default) or
* the vertical axis y. 
*
*
* Example: PSDlin_monitor(nbins=20, filename="Output.x", xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1)
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]    Lower x bound of detector opening.
* xmax: [m]    Upper x bound of detector opening.
* ymin: [m]    Lower y bound of detector opening.
* ymax: [m]    Upper y bound of detector opening.
* xwidth: [m]  Width of detector. Overrides xmin, xmax.
* yheight: [m] Height of detector. Overrides ymin, ymax.
* nbins: [1]   Number of positional bins.
* filename: [str] Name of file in which to store the detector image.
* vertical: [1]   Flag to indicate whether the monitor measures along the horiz. or vert. axis
* restore_neutron: [1] If set, the monitor does not influence the neutron state.
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* CALCULATED PARAMETERS:
*
* PSDlin_N:    Array of neutron counts
* PSDlin_p:    Array of neutron weight counts
* PSDlin_p2:   Array of second moments
*
* %E
******************************************************************************/

DEFINE COMPONENT PSDlin_monitor

SETTING PARAMETERS (int nbins=20, string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, int nowritefile=0,
    xwidth=0, yheight=0, int restore_neutron=0, int vertical=0)

/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

DECLARE
%{
  DArray1d PSDlin_N;
  DArray1d PSDlin_p;
  DArray1d PSDlin_p2;
%}

INITIALIZE
%{
  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
  if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

  if ((xmin >= xmax) || (ymin >= ymax)) {
    printf("PSDlin_monitor: %s: Null detection area !\n"
           "ERROR           (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
    exit(0);
  }

  PSDlin_N = create_darr1d(nbins);
  PSDlin_p = create_darr1d(nbins);
  PSDlin_p2 = create_darr1d(nbins);

  // Use instance name for monitor output if no input was given
  if (!strcmp(filename,"\0")) sprintf(filename,"%s",NAME_CURRENT_COMP);
%}

TRACE
%{
  int i;

  PROP_Z0;
  if (x>xmin && x<xmax && y>ymin && y<ymax){ 
    /* Bin number */
    if (!vertical){
      i = floor(nbins*(x-xmin)/(xmax-xmin));
    }else{
      i = floor(nbins*(y-ymin)/(ymax-ymin));
    }
    if((i >= nbins) || (i<0))
    {
      printf("ERROR: (%s) wrong positioning in linear PSD. i= %i \n",NAME_CURRENT_COMP,i);
      exit(1);
    }
    double p2 = p*p;
    #pragma acc atomic
    PSDlin_N[i] = PSDlin_N[i] +1;
    #pragma acc atomic
    PSDlin_p[i] = PSDlin_p[i] + p;
    #pragma acc atomic
    PSDlin_p2[i] = PSDlin_p2[i] + p2;
    SCATTER;
  }
  if (restore_neutron) {
    RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
  }
%}

SAVE
%{
if (!nowritefile) {
  if (!vertical){
    DETECTOR_OUT_1D(
        "Linear PSD monitor","x-Position [m]","Intensity","x", xmin, xmax, nbins,
        &PSDlin_N[0],&PSDlin_p[0],&PSDlin_p2[0],filename);
  }else{
    DETECTOR_OUT_1D(
        "Linear PSD monitor","y-Position [m]","Intensity","y", ymin, ymax, nbins,
        &PSDlin_N[0],&PSDlin_p[0],&PSDlin_p2[0],filename);
  }
}
%}

FINALLY
%{
  destroy_darr1d(PSDlin_N);
  destroy_darr1d(PSDlin_p);
  destroy_darr1d(PSDlin_p2);
%}

MCDISPLAY
%{
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
