/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_TOF_monitor
*
* %I
* Written by: Peter Willendrup, derived from PSD_monitor by Kim Lefmann
* Date: Feb 3, 1998
* Origin: Risoe
*
* Position-sensitive monitor with TOF slices.
*
* %D
* An (nx times ny) pixel PSD monitor with nt time bins pr pixel.
*
* Will output nt PSD images plus 1 integrated image.
*
* Example: PSD_TOF_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, nx=90, ny=90, tmin=4000, tmax=7000, nt=3, filename="Output")
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]             Lower x bound of detector opening
* xmax: [m]             Upper x bound of detector opening
* ymin: [m]             Lower y bound of detector opening
* ymax: [m]             Upper y bound of detector opening
* tmin: [mu-s]          Lower time bound
* tmax: [mu-s]          Upper time bound
* xwidth: [m]           Width/diameter of detector (x). Overrides xmin, xmax
* yheight: [m]          Height of detector (y). Overrides ymin, ymax
* nx: [1]               Number of pixel columns
* ny: [1]               Number of pixel rows
* nt: [1]               Number of TOF bins
* filename: [string]    Name of file in which to store the detector image
* restore_neutron: [1]  If set, the monitor does not influence the neutron state
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* OUTPUT PARAMETERS:
*
* PSD_N: []             Array of neutron counts
* PSD_p: []             Array of neutron weight counts
* PSD_p2: []            Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT PSD_TOF_monitor
DEFINITION PARAMETERS ()
SETTING PARAMETERS (int nx=90, int ny=90, int nt=10, restore_neutron=0,
		    string filename, xmin=0, xmax=0, ymin=0, ymax=0, xwidth=0, yheight=0,
		    tmin=0, tmax=0, int nowritefile=0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2, PSD_Ns, PSD_ps, PSD_p2s)


SHARE %{
%include "array-lib"
%}

DECLARE
%{
  DArray3d PSD_N;
  DArray3d PSD_p;
  DArray3d PSD_p2;

  DArray2d PSD_Ns;
  DArray2d PSD_ps;
  DArray2d PSD_p2s;
%}

INITIALIZE
%{
  int i,j,k;

  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
  if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

  if ((xmin >= xmax) || (ymin >= ymax)) {
          printf("PSD_TOF_monitor: %s: Null detection area !\n"
                 "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
         NAME_CURRENT_COMP);
    exit(-1);
  }

  if (tmin >= tmax) {
    printf("PSD_TOF_monitor: %s: Unmeaningful TOF definition!\n",
     NAME_CURRENT_COMP);
    exit(-1);
  }

  PSD_N = create_darr3d(nt, nx, ny);
  PSD_p = create_darr3d(nt, nx, ny);
  PSD_p2 = create_darr3d(nt, nx, ny);

  PSD_Ns = create_darr2d(nx, ny);
  PSD_ps = create_darr2d(nx, ny);
  PSD_p2s = create_darr2d(nx, ny);

  for (i=0; i<nx; i++)
    for (j=0; j<ny; j++) {
    	PSD_Ns[i][j] = 0;
    	PSD_ps[i][j] = 0;
    	PSD_p2s[i][j] = 0;
    	for (k=0; k<nt; k++) {
    	  PSD_N[k][i][j] = 0;
    	  PSD_p[k][i][j] = 0;
    	  PSD_p2[k][i][j] = 0;
    	}
    }
%}

TRACE
%{
  int i, j, k;

  PROP_Z0;
  if (x>xmin && x<xmax && y>ymin && y<ymax && (1E6*t)>tmin && (1E6*t)<tmax)
  {
    i = floor((x - xmin)*nx/(xmax - xmin));
    j = floor((y - ymin)*ny/(ymax - ymin));
    k = floor((1E6*t - tmin)*nt/(tmax - tmin));

    PSD_N[k][i][j]++;
    PSD_p[k][i][j] += p;
    PSD_p2[k][i][j] += p*p;

    PSD_Ns[i][j]++;
    PSD_ps[i][j] += p;
    PSD_p2s[i][j] += p*p;

    SCATTER;
  }
  if (restore_neutron) {
    RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
  }
%}

SAVE
%{
if (!nowritefile) {
  int kk;
  char ff[256];
  char tt[256];
  sprintf(ff, "%s_Sum",filename);
  DETECTOR_OUT_2D(
	 "PSD monitor TOF Sum",
    "X position [cm]",
    "Y position [cm]",
    xmin*100.0, xmax*100.0, ymin*100.0, ymax*100.0,
    nx, ny,
    &PSD_Ns[0][0],&PSD_ps[0][0],&PSD_p2s[0][0],
    ff);

  for (kk=0; kk<nt; kk++) {
    sprintf(ff, "%s_%i",filename,kk);
    sprintf(tt, "PSD monitor TOF slice %i ~ %g mu-s",kk,kk*(tmax-tmin)/nt);
    DETECTOR_OUT_2D(
      tt,
      "X position [cm]",
      "Y position [cm]",
      xmin*100.0, xmax*100.0, ymin*100.0, ymax*100.0,
      nx, ny,
      &PSD_N[kk][0][0],&PSD_p[kk][0][0],&PSD_p2[kk][0][0],
      ff);
  }
}
%}

FINALLY
%{
  destroy_darr3d(PSD_N);
  destroy_darr3d(PSD_p);
  destroy_darr3d(PSD_p2);

  destroy_darr2d(PSD_Ns);
  destroy_darr2d(PSD_ps);
  destroy_darr2d(PSD_p2s);
%}

MCDISPLAY
%{
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
