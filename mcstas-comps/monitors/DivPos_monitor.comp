/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: DivPos_monitor
*
* %I
* Written by: Kristian Nielsen
* Date: 1999
* Origin: Risoe
*
* Divergence/position monitor (acceptance diagram).
*
* %D
* 2D detector for intensity as a function of both horizontal position
* and wavelength. This gives information similar to an aceptance diagram used
* eg. to investigate beam profiles in neutron guides.
*
* Example: DivPos_monitor(nh=20, ndiv=20, filename="Output.dip",
*           xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, maxdiv_h=2)
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]             Lower x bound of detector opening 
* xmax: [m]             Upper x bound of detector opening 
* ymin: [m]             Lower y bound of detector opening 
* ymax: [m]             Upper y bound of detector opening 
* xwidth: [m]           Width of detector. Overrides xmin,xmax. 
* yheight: [m]          Height of detector. Overrides ymin,ymax. 
* nh: [1]               Number of bins in position 
* ndiv: [1]             Number of bins in divergence 
* nx: [1]               
* ny: [1]               Vector definition of "forward" direction wrt. divergence, to be used e.g. when the monitor is rotated into the horizontal plane 
* nz: [1]               
* maxdiv_h: [degrees]   Maximal horizontal divergence detected 
* filename: [string]    Name of file in which to store the detector image 
* restore_neutron: [1]  If set, the monitor does not influence the neutron state 
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* OUTPUT PARAMETERS:
*
* Div_N: []             Array of neutron counts
* Div_p: []             Array of neutron weight counts
* Div_p2: []            Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT DivPos_monitor
DEFINITION PARAMETERS (nh=20, ndiv=20)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05,
xwidth=0, yheight=0, maxdiv_h=2, restore_neutron=0, nx=0, ny=0, nz=1, int nowritefile=0)
OUTPUT PARAMETERS (Div_N, Div_p, Div_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

DECLARE
%{
double Div_N[nh][ndiv];
double Div_p[nh][ndiv];
double Div_p2[nh][ndiv];
%}

INITIALIZE
%{
int i,j;

if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("DivPos_monitor: %s: Null detection area !\n"
                   "ERROR           (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(-1);
    }

    for (i=0; i<nh; i++)
     for (j=0; j<ndiv; j++)
     {
      Div_N[i][j] = 0;
      Div_p[i][j] = 0;
      Div_p2[i][j] = 0;
     }
    NORM(nx,ny,nz);
  %}

TRACE
  %{
    int i,j;
    double div;
    double v, vn;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      /* Find length of projection onto the [nx ny nz] axis */
      vn = scalar_prod(vx, vy, vz, nx, ny, nz);
      div = RAD2DEG*atan2(vx,vn);

      if (div < maxdiv_h && div > -maxdiv_h)
      {
        i = floor((x - xmin)*nh/(xmax - xmin));
        j = floor((div + maxdiv_h)*ndiv/(2.0*maxdiv_h));
        Div_N[i][j]++;
        Div_p[i][j] += p;
        Div_p2[i][j] += p*p;
        SCATTER;
      }
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}

SAVE
  %{
    if (!nowritefile) {
    DETECTOR_OUT_2D(
        "Position-divergence monitor",
        "pos [m]",
        "divergence [deg]",
        xmin, xmax, -maxdiv_h, maxdiv_h,
        nh, ndiv,
        &Div_N[0][0],&Div_p[0][0],&Div_p2[0][0],
        filename);
    }
  %}

MCDISPLAY
  %{
    
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
  %}

END
