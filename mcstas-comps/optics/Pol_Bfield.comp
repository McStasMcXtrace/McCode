/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_Bfield
*
* %I
* Written by: Erik B Knudsen, Peter Christiansen and Peter Willendrup
* Date: July 2011
* Origin: RISOE
*
* Magnetic field component.
*
* %D
*
* Region with a definable magnetic field.
*
* The component is nestable if the concentric flag is set (the default). This means that it requires a
* // START MAGNETIC FIELD
* COMPONENT msf =
* Pol_Bfield(xwidth=0.08, yheight=0.08, zdepth=0.2, Bx=0, By=-0.678332e-4, Bz=0)
*      AT (0, 0, 0) RELATIVE armMSF
*
* // OTHER COMPONENTS INSIDE THE MAGNETIC FIELD CAN BE PLACED HERE
*
* // STOP MAGNETIC FIELD
* COMPONENT msf_stop = Pol_simpleBfield_stop(magnet_comp_stop=msf)
*      AT (0, 0, 0) RELATIVE armMSF
*
* Note that if you have objects within the magnetic field that extend outside it you may get
* wrong results, because propagation within the field will then possibly extend outside, e.g.
* when using a tabled field. The evaluated field will then use the nearest defined field point
* _also_ outside the defintion area. If these outside-points have a non-zero field precession will
* continue - even after the neutron has left the field region.
*
* In between the two component instances the propagation routine
* PROP_DT also handles spin propagation.
* The current algorithm used for spin propagation is:
* SimpleNumMagnetPrecession
* in pol-lib.
*
* Example: Pol_Bfield(xwidth=0.1, yheight=0.1, zdepth=0.2, Bx=0, By=1, Bz=0)
*          Pol_Bfield(xwidth=0.1, yheight=0.1, zdepth=0.2,
*            filename="bfield.dat", fieldFunction=table_magnetic_field)
*
* The magetic field may be given as any definable c-function with a specific footprint:
*   int func(double x, double y, double z, double t, double *bx, double *by, double *bz, void *data)
* where the magnetic field at coordinates (x,y,z, t) is returned in the variables
* pointed to by bx,by, and bz. Additional parameters to be handed to the function
* should be handed to the function using the pointer data.
*
* Functions supplied by the system are:
* 1. const_magnetic_field: Constant field (Bx,By,Bz) within the region
* 2. rot_magnetic_field: Field is initially (0,By,0) but after a length of zdepth
*      has rotated to (By,0,0)
* 3. majorana_magnetic_field: Field is initially (Bx,By,0) liearly transforms to
*      (-Bx,By,0) after zdepth where By<<Bx
* 4. table_magnetic_field: The magnetic field is read from a text file where it is
*      specified as a point cloud with N rows of 6 columns:
*      x y z Bx By Bz
*    the B field map is resampled with Stepx*Stepy*Stepz points.
*    Use Stepx=Stepy=Stepz=0 to skip resampling and use the table as is.
* 5. table_magnetic_field
*
* Users may specify any other function with the required footprint to have any
* other field. Note that coordinates refer the coordinate system defined by this
* component.
*
* If the concentric parameter is set to 1 the magnetic field is turned on by an
* instance of this component, and turned off by an instance of Pol_simpleBfield_stop.
* Anything in between is considered inside the field.
* If concentric is nonzero the field is considered a closed component - neutrons are propagated
* through the field region, and no other components are permitted inside the field.
*
* When using table_magnetic_field as * fieldFunction the input data is first resampled 
* to speed up the interpolation. 
*
* %P
* INPUT PARAMETERS:
*
* xwidth: [m]               Width of opening.
* yheight: [m]              Height of opening.
* zdepth: [m]               Length of field.
* radius: [m]               Radius of field if it is cylindrical or spherical.
* Bx: [T]                   Parameter used for x composant of field.
* By: [T]                   Parameter used for y composant of field.
* Bz: [T]                   Parameter used for z composant of field.
* fieldFunction: [pointer]  Function describing the magnetic field.
* filename: [ ]             File where the magnetic field is tabulated.
* interpol_method: [ ]      When using tabulated field, choice of interpolation method "kdtree" (default) / "regular"
* concentric: [ ]           Allow components and/or other fields inside field. Requires a subsequent Pol_simpleBfield_stop component.
*
* OUTPUT PARAMETERS:
* magnet: [ ]
* parPtr: [pointer]         Pointer to component magnet parameters.
* prms:   [ ]               Structur containing the shape of the magnetic field.
* %E
****************************************************************************/

DEFINE COMPONENT Pol_Bfield
DEFINITION PARAMETERS (fieldFunction=const_magnetic_field, field_prms=NULL)
SETTING PARAMETERS (xwidth=0, yheight=0,zdepth=0, radius=0, Bx=0, By=0, Bz=0, string filename="bfield.dat", string geometry=NULL, string interpol_method=NULL,
        concentric=1)
OUTPUT PARAMETERS(magnet, parPtr, prms)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
%include "pol-lib"
  double fmax(double, double);
  double fmin(double, double);
%}


DECLARE
%{
  /* Larmor frequency and scalar product threshold*/
  void *parPtr;
  mcmagnet_field_info *magnet;

  struct {
      int shape;
  } prms;
%}

INITIALIZE
%{
  enum {NONE=0, BOX, WINDOW, CYLINDER, SPHERE, ANY} shapes;
  parPtr=NULL;
  /* these default field functions are part of pol-lib */
  if (fieldFunction==const_magnetic_field){
      double *a=malloc(3*sizeof(double));
      a[0]=Bx;
      a[1]=By;
      a[2]=Bz;
      parPtr=(void *) a;
  } else if (fieldFunction==rot_magnetic_field){
      parPtr=(void *)malloc(2*sizeof(double));
      ( *( (double *)parPtr +0) )=By;
      ( *( (double *)parPtr +1) )=zdepth;
  } else if (fieldFunction==majorana_magnetic_field){
      double *a=malloc(3*sizeof(double));
      a[0]=Bx;
      a[1]=By;
      a[2]=zdepth;
      parPtr=(void *) a;
  } else if (fieldFunction==table_magnetic_field){
    /*initialize the interpolation vertex structure*/
      struct interpolator_struct *interpolator = interpolator_load(filename, 3, 3, interpol_method);
      interpolator_info(interpolator);
      parPtr=(void *) interpolator;
  }
  /*if not set yet, parPtr can be overridden by the external userland pointer*/
  if(!parPtr && field_prms){
      parPtr=field_prms;
  }

  /*initialize shape to either be window/box/cylinder*/
  /*some logic here to enter through a box or cylinder*/
  if(geometry && strlen(geometry)){
      prms.shape=ANY;
  }else if(xwidth && yheight && zdepth){
      prms.shape=BOX;
  }else if (xwidth && yheight && !zdepth){
      prms.shape=WINDOW;
  }else if(radius && yheight){
      prms.shape=CYLINDER;
  }else if (radius) {
      prms.shape=SPHERE;
  }else{
      prms.shape=NONE;
  }

  if( (prms.shape == WINDOW || prms.shape == NONE) && !concentric){
      printf("Warning (%s): Magnetic field has window shape and concentric==0 => Field volume == 0.\n",NAME_CURRENT_COMP);
  }
  if(prms.shape == NONE) {
      printf("Warning (%s): Magnetic field has no geometry. Full Z=0-plane is used as boundary.\n",NAME_CURRENT_COMP);
  }

%}

TRACE
%{
    double t0,t1;
    int hit;
    enum {NONE=0, BOX, WINDOW, CYLINDER, SPHERE, ANY} shapes;

    /*enter through whatever object we are*/
    switch (prms.shape){
        case BOX:
            hit=box_intersect(&t0,&t1,x,y,z,vx,vy,vz,xwidth,yheight,zdepth);
            /*terminate neutrons which miss the component*/
            if(!hit) ABSORB;
            /*If we do hit - propagate to the start of the field unless the neutron is already there.*/
            if(t0>FLT_EPSILON) {
                PROP_DT(t0);
                t1-=t0;
            }else if (t0<-FLT_EPSILON && concentric){
                PROP_DT(t1);
            }
            break;
        case CYLINDER:
            hit=cylinder_intersect(&t0,&t1,x,y,z,vx,vy,vz,radius,yheight);
            /*terminate neutrons which miss the component*/
            if(!hit)ABSORB;
            /*If we do hit - propagate to the start of the field unless the neutron is already there.*/
            if(t0>FLT_EPSILON) {
                PROP_DT(t0);
                t1-=t0;
            }else if (t0<-FLT_EPSILON && concentric){
                PROP_DT(t1);
            }
            break;
        case WINDOW:
            PROP_Z0;
            if (2*x>xwidth || 2*x<-xwidth || 2*y>yheight || 2*y<-yheight){
                /*terminate neutrons which miss the component*/
                ABSORB;
            }
            break;
        default:
            PROP_Z0;
    }
    mcmagnet_push(fieldFunction,&(ROT_A_CURRENT_COMP),&(POS_A_CURRENT_COMP),0,parPtr);
#ifdef MCDEBUG
    mcmagnet_print_stack();
#endif

    /*does the field "close/stop" itself*/
    if (!concentric){
        switch (prms.shape){
            case BOX:
                PROP_DT(t1);
                break;
            case CYLINDER:
                PROP_DT(t1);
                break;
            case WINDOW:
                PROP_Z0;
                /*terminate neutrons which miss the exit window*/
                if (2*x>xwidth || 2*x<-xwidth || 2*y>yheight || 2*y<-yheight){
                    ABSORB;
                }
                break;
            default:
                PROP_Z0;
        }
        mcmagnet_pop();
    }
%}

MCDISPLAY
%{
    enum {NONE=0, BOX, WINDOW, CYLINDER, SPHERE, ANY} shapes;
    switch (prms.shape){
        case BOX:
            box(0,0,0,xwidth,yheight,zdepth);
            break;
        case CYLINDER:
            circle("xz",0, yheight/2.0,0,radius);
            circle("xz",0,-yheight/2.0,0,radius);
            line(-radius,-yheight/2.0,0,-radius,yheight/2.0,0);
            line( radius,-yheight/2.0,0, radius,yheight/2.0,0);
            line(0,-yheight/2.0,-radius,0,yheight/2.0,-radius);
            line(0,-yheight/2.0, radius,0,yheight/2.0, radius);
            break;
        case SPHERE:
            circle("xz",0,0,0,radius);
            circle("xy",0,0,0,radius);
            circle("yz",0,0,0,radius);
            break;
        case WINDOW:
            rectangle("xy",0,0,0,xwidth,yheight);
            break;
    }
%}

END
