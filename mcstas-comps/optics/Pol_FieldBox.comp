/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_FieldBox
*
* %I
*
* Written by: Erik B Knudsen and P Willendrup
* Date: 2013
* Version: $Revision$
* Release: McStas 2.0
* Origin: Risoe
*
* Box containing a constant or tabled magnetic field
*
* %D
*
*
* %P
* fieldFunction: [ ] Should be either const_magnetic field or table_magnetic_field (unquoted in both cases).
* xwidth:  [m] Width of the box containing the field.
* yheight: [m] Height of the box containing the field.
* zdepth:  [m] Depth of the box containing the field.
* Bx:  [T] Magnetic field strength along the x-axis.
* By:  [T] Magnetic field strength along the y-axis.
* Bz:  [T] Magnetic field strength along the z-axis.
* filename: [text] Name of file containing the magnetic field.
*
* %E
*******************************************************************************/

DEFINE COMPONENT Pol_FieldBox
DEFINITION PARAMETERS (fieldFunction=const_magnetic_field)
SETTING PARAMETERS (xwidth,yheight,zdepth, Bx,By,Bz, string filename="")
OUTPUT PARAMETERS (field_parameters,const_field_parameters)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
    %include "pol-lib"
%}

DECLARE
%{
  double const_field_parameters[3];
  void *field_parameters;
%}

INITIALIZE
%{
  if (fieldFunction==table_magnetic_field){
      /*initialize the interpolation vertex structure*/
      struct interpolator_struct *interpolator = interpolator_load(filename, 3, 3, NULL);
      interpolator_info(interpolator);
      field_parameters=(void *)interpolator;
  }  else {
      field_parameters = (void *) const_field_parameters;
  }

%}



TRACE
%{
    int hit;
    double t0,t1;
    if (hit=box_intersect(&t0,&t1,x,y,z,vx,vy,vz,xwidth,yheight,zdepth)){
        if(t0>0) PROP_DT(t0);
        ((double *)field_parameters)[0]=Bx;
        ((double *)field_parameters)[1]=By;
        ((double *)field_parameters)[2]=Bz;

        mcmagnet_push(fieldFunction,&(ROT_A_CURRENT_COMP),&(POS_A_CURRENT_COMP),0,field_parameters);
        if(t1-t0>0) PROP_DT(t1-t0);

        mcmagnet_pop();
    }

%}

MCDISPLAY
%{
  const int nDash = 10;
  double xw_2,yh_2,zd_2;
  xw_2=xwidth/2.0;yh_2=yheight/2.0;zd_2=zdepth/2.0;
  /*entrance*/
  dashed_line(-xw_2, -yh_2, -zd_2,  xw_2, -yh_2, -zd_2, nDash);
  dashed_line(-xw_2, -yh_2, -zd_2, -xw_2,  yh_2, -zd_2, nDash);
  dashed_line( xw_2,  yh_2, -zd_2, -xw_2,  yh_2, -zd_2, nDash);
  dashed_line( xw_2,  yh_2, -zd_2,  xw_2, -yh_2, -zd_2, nDash);

  /*exit*/
  dashed_line(-xw_2, -yh_2, +zd_2,  xw_2, -yh_2, +zd_2, nDash);
  dashed_line(-xw_2, -yh_2, +zd_2, -xw_2,  yh_2, +zd_2, nDash);
  dashed_line( xw_2,  yh_2, +zd_2, -xw_2,  yh_2, +zd_2, nDash);
  dashed_line( xw_2,  yh_2, +zd_2,  xw_2, -yh_2, +zd_2, nDash);

  /*4 lines to make a box*/
  dashed_line(-xw_2, -yh_2, -zd_2, -xw_2, -yh_2, +zd_2, nDash);
  dashed_line(-xw_2,  yh_2, -zd_2, -xw_2,  yh_2, +zd_2, nDash);
  dashed_line( xw_2, -yh_2, -zd_2,  xw_2, -yh_2, +zd_2, nDash);
  dashed_line( xw_2,  yh_2, -zd_2,  xw_2,  yh_2, +zd_2, nDash);
%}

END
