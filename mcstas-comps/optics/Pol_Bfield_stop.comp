/**************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2006, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Pol_Bfield_stop
*
* %I
* Written by: Erik B Knudsen, Peter Christiansen, and Peter Willendrup
* Date: August 2006
* Origin: RISOE
*
* Magnetic field component.
*
* %D 
*
* End of magnetic field region defined by the latest preceeding Pol_Bfield component.
*
* The component is concentric. It means that it requires a 
*
* // START MAGNETIC FIELD
* COMPONENT msf =
* Pol_Bfield(xw=0.08, yh=0.08, length=0.2, Bx=0, By=-0.678332e-4, Bz=0)
*      AT (0, 0, 0) RELATIVE armMSF
*
* // OTHER COMPONENTS INSIDE THE MAGNETIC FIELD CAN BE PLACED HERE
*
* // STOP MAGNETIC FIELD
* COMPONENT msfCp = Pol_Bfield_stop()
*      AT ("SOMEWHERE") RELATIVE armMSF
*
* In between the two components the propagation routine
* PROP_DT also handles the spin propagation.
* The current algorithm used for spin propagation is:
* SimpleNumMagnetPrecession
* in pol-lib.
* and does not handle gravity.
*
* GRAVITY: NO
* POLARISATION: YES
*
* Example: Pol_Bfield_stop()
*
* %P
* INPUT PARAMETERS:
*
* %E
****************************************************************************/

DEFINE COMPONENT Pol_Bfield_stop
DEFINITION PARAMETERS ()
SETTING PARAMETERS (string geometry="", yheight=0, xwidth=0, zdepth=0, radius=0)
OUTPUT PARAMETERS(prms)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

SHARE
%{
%include "pol-lib"
%}
DECLARE
%{
    struct {
        int shape;
    } prms;
%}
INITIALIZE
%{
    enum {NONE=0, BOX, WINDOW, CYLINDER, SPHERE, ANY} shapes;
    /*if a start component is given, and no geometry is set, inherent geometry from start comp.*/
    if(geometry && strlen(geometry)){
        prms.shape=ANY;
    }else if(xwidth && yheight && zdepth){
        prms.shape=BOX;
    }else if (xwidth && yheight && !zdepth){
        prms.shape=WINDOW;
    }else if(radius && yheight){
        prms.shape=CYLINDER;
    }else if (radius) {
        prms.shape=SPHERE;
    }else{
        prms.shape=NONE;
    }
%}

TRACE
%{
    double t0,t1;
    int nofield=0;
    enum {NONE=0, BOX, WINDOW, CYLINDER, SPHERE, ANY} shapes;
    /*enter through whatever object we are*/
    switch (prms.shape){
        case BOX:
            box_intersect(&t0,&t1,x,y,z,vx,vy,vz,xwidth,yheight,zdepth);
            if (t0>0) PROP_DT(t0);/*this is to get a hollow inside the field.*/
            else PROP_DT(t1);
            break;
        case CYLINDER:
            cylinder_intersect(&t0,&t1,x,y,z,vx,vy,vz,radius,yheight);/*this is to get a hollow inside the field.*/
            if (t0>0) PROP_DT(t0);
            else PROP_DT(t1);
            break;
        case WINDOW:
            PROP_Z0;
            /*terminate neutrons which miss the exit window*/
            if (2*x>xwidth || 2*x<-xwidth || 2*y>yheight || 2*y<-yheight){
                ABSORB;
            }
            break;
        case NONE:
            break;
        default:
            PROP_Z0;
    }
    mcmagnet_pop();
%}

MCDISPLAY
%{
    enum {NONE=0, BOX, WINDOW, CYLINDER, SPHERE, ANY} shapes;
    switch (prms.shape){
        case BOX:
            box(0,0,0,xwidth,yheight,zdepth);
            break;
        case CYLINDER:
            circle("xz",0, yheight/2.0,0,radius);
            circle("xz",0,-yheight/2.0,0,radius);
            line(-radius,-yheight/2.0,0,-radius,yheight/2.0,0);
            line( radius,-yheight/2.0,0, radius,yheight/2.0,0);
            line(0,-yheight/2.0,-radius,0,yheight/2.0,-radius);
            line(0,-yheight/2.0, radius,0,yheight/2.0, radius);
            break;
        case SPHERE:
            circle("xz",0,0,0,radius);
            circle("xy",0,0,0,radius);
            circle("yz",0,0,0,radius);
            break;
        case WINDOW:
            rectangle("xy",0,0,0,xwidth,yheight);
            break;
    }
%}

END
